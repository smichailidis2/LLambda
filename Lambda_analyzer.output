Terminals unused in grammar

    KW_ENDCOMP
    KW_OF


Grammar

    0 $accept: input $end

    1 input: PROGRAM_START

    2 PROGRAM_START: pdeclare

    3 pdeclare: s_main_s
    4         | constant_declaration s_main_s
    5         | constant_declaration composite_declaration s_main_s
    6         | constant_declaration composite_declaration function_declaration s_main_s
    7         | constant_declaration composite_declaration function_declaration variable_declaration s_main_s

    8 s_main_s: KW_DEF KW_MAIN '(' ')' main_body KW_ENDDEF

    9 main_body: commands

   10 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_NUMBER ':' KW_INTEGER
   11                     | KW_CONST TK_IDENTIFIER '=' TK_DECIMAL ':' KW_SCALAR
   12                     | KW_CONST TK_IDENTIFIER '=' TK_STRING ':' KW_STR
   13                     | KW_CONST TK_IDENTIFIER '=' KW_TRUE ':' KW_BOOL
   14                     | KW_CONST TK_IDENTIFIER '=' KW_FALSE ':' KW_BOOL

   15 composite_declaration: KW_COMP

   16 function_declaration: KW_DEF function_header function_body KW_ENDDEF

   17 variable_declaration: TK_IDENTIFIER ':' data_type ';'
   18                     | TK_IDENTIFIER ':' data_type ',' variable_declaration

   19 data_type: basic_data_type
   20          | composite_data_type

   21 basic_data_type: KW_INTEGER
   22                | KW_BOOL
   23                | KW_SCALAR
   24                | KW_STR

   25 composite_data_type: KW_COMP TK_IDENTIFIER

   26 expression: TK_NUMBER
   27           | TK_REAL
   28           | TK_CHAR
   29           | TK_STRING
   30           | TK_DIGIT
   31           | TK_DECIMAL
   32           | TK_IDENTIFIER
   33           | TK_IDENTIFIER '(' function_arg ')'
   34           | TK_IDENTIFIER '(' ')'
   35           | TK_IDENTIFIER brackets
   36           | KW_TRUE
   37           | KW_FALSE
   38           | '(' expression ')'
   39           | composite_data_type '.' expression
   40           | math_expression
   41           | logical_expression
   42           | '+' expression
   43           | '-' expression

   44 math_expression: expression POW expression
   45                | expression '+' expression
   46                | expression '-' expression
   47                | expression '*' expression
   48                | expression '/' expression
   49                | expression MOD expression
   50                | expression KW_MOD expression

   51 logical_expression: expression EQ expression
   52                   | expression LEQ expression
   53                   | expression GEQ expression
   54                   | expression NEQ expression
   55                   | expression '<' expression
   56                   | expression '>' expression
   57                   | expression LAND expression
   58                   | expression KW_AND expression
   59                   | expression LOR expression
   60                   | expression KW_OR expression
   61                   | '!' expression
   62                   | KW_NOT expression

   63 brackets: '[' expression ']'
   64         | brackets '[' expression ']'

   65 commands: command commands
   66         | command

   67 command: ';'
   68        | variable_assignement
   69        | TK_IDENTIFIER brackets '=' expression ';'
   70        | if_statement ';'
   71        | for_statement ';'
   72        | compound_array_i ';'
   73        | compound_array_a ';'
   74        | while_statement ';'
   75        | KW_BREAK ';'
   76        | KW_CONTINUE ';'
   77        | KW_RETURN ';'
   78        | KW_RETURN expression ';'
   79        | TK_IDENTIFIER '(' function_arg ')' ';'
   80        | TK_IDENTIFIER '(' ')' ';'
   81        | TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'

   86 variable_assignement: TK_IDENTIFIER '=' expression ';'

   87 if_statement: KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   88             | KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF

   89 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   90              | KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR

   91 compound_array_a: TK_IDENTIFIER ASSIGN '[' ']'

   92 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type

   93 while_statement: KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE

   94 function_arg: expression
   95             | function_arg ',' expression

   96 function_header: TK_IDENTIFIER '(' function_arg ')' '-' '>' data_type

   97 function_body: commands


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 61
    '(' (40) 8 33 34 38 79 80 87 88 93 96
    ')' (41) 8 33 34 38 79 80 87 88 93 96
    '*' (42) 47
    '+' (43) 42 45
    ',' (44) 18 95
    '-' (45) 43 46 96
    '.' (46) 39
    '/' (47) 48
    ':' (58) 10 11 12 13 14 17 18 87 88 89 90 92
    ';' (59) 17 67 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86
    '<' (60) 55
    '=' (61) 10 11 12 13 14 69 86
    '>' (62) 56 96
    '[' (91) 63 64 89 90 91 92
    ']' (93) 63 64 89 90 91 92
    error (256)
    TK_IDENTIFIER <strng> (258) 10 11 12 13 14 17 18 25 32 33 34 35 69 79 80 81 82 83 84 85 86 89 90 91 92 96
    TK_CHAR <strng> (259) 28
    TK_STRING <strng> (260) 12 29
    TK_REAL <strng> (261) 27
    TK_DIGIT <strng> (262) 30
    TK_NUMBER <strng> (263) 10 26 89 90 92
    TK_DECIMAL <strng> (264) 11 31
    KW_MAIN (265) 8
    KW_INTEGER <strng> (266) 10 21
    KW_SCALAR <strng> (267) 11 23
    KW_STR <strng> (268) 12 24
    KW_BOOL <strng> (269) 13 14 22
    KW_TRUE <strng> (270) 13 36
    KW_FALSE <strng> (271) 14 37
    KW_CONST (272) 10 11 12 13 14
    KW_IF (273) 87 88
    KW_ELSE (274) 88
    KW_ENDIF (275) 87 88
    KW_FOR (276) 89 90 92
    KW_IN (277) 89 90
    KW_ENDFOR (278) 89 90
    KW_WHILE (279) 93
    KW_ENDWHILE (280) 93
    KW_BREAK (281) 75
    KW_RETURN (282) 77 78
    KW_CONTINUE (283) 76
    KW_AND (284) 58
    KW_OR (285) 60
    KW_COMP (286) 15 25
    KW_ENDCOMP (287)
    KW_OF (288)
    KW_DEF (289) 8 16
    KW_ENDDEF (290) 8 16
    ADD_ASSIGN (291) 81
    SUB_ASSIGN (292) 82
    MULT_ASSIGN (293) 83
    DIV_ASSIGN (294) 84
    MOD_ASSIGN (295) 85
    ASSIGN (296) 91 92
    LOR (297) 59
    LAND (298) 57
    KW_NOT (299) 62
    NEQ (300) 54
    EQ (301) 51
    LEQ (302) 52
    GEQ (303) 53
    MOD (304) 49
    KW_MOD (305) 50
    POW (306) 44


Nonterminals, with rules where they appear

    $accept (68)
        on left: 0
    input (69)
        on left: 1
        on right: 0
    PROGRAM_START <strng> (70)
        on left: 2
        on right: 1
    pdeclare <strng> (71)
        on left: 3 4 5 6 7
        on right: 2
    s_main_s <strng> (72)
        on left: 8
        on right: 3 4 5 6 7
    main_body <strng> (73)
        on left: 9
        on right: 8
    constant_declaration <strng> (74)
        on left: 10 11 12 13 14
        on right: 4 5 6 7
    composite_declaration <strng> (75)
        on left: 15
        on right: 5 6 7
    function_declaration <strng> (76)
        on left: 16
        on right: 6 7
    variable_declaration <strng> (77)
        on left: 17 18
        on right: 7 18
    data_type <strng> (78)
        on left: 19 20
        on right: 17 18 92 96
    basic_data_type <strng> (79)
        on left: 21 22 23 24
        on right: 19
    composite_data_type <strng> (80)
        on left: 25
        on right: 20 39
    expression <strng> (81)
        on left: 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
        on right: 38 39 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 69 78 86 92 94 95
    math_expression <strng> (82)
        on left: 44 45 46 47 48 49 50
        on right: 40
    logical_expression <strng> (83)
        on left: 51 52 53 54 55 56 57 58 59 60 61 62
        on right: 41 87 88 93
    brackets <strng> (84)
        on left: 63 64
        on right: 35 64 69
    commands <strng> (85)
        on left: 65 66
        on right: 9 65 87 88 89 90 93 97
    command <strng> (86)
        on left: 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85
        on right: 65 66
    variable_assignement <strng> (87)
        on left: 86
        on right: 68
    if_statement <strng> (88)
        on left: 87 88
        on right: 70
    for_statement <strng> (89)
        on left: 89 90
        on right: 71
    compound_array_a <strng> (90)
        on left: 91
        on right: 73
    compound_array_i <strng> (91)
        on left: 92
        on right: 72
    while_statement <strng> (92)
        on left: 93
        on right: 74
    function_arg <strng> (93)
        on left: 94 95
        on right: 33 79 95 96
    function_header <strng> (94)
        on left: 96
        on right: 16
    function_body <strng> (95)
        on left: 97
        on right: 16


State 0

    0 $accept: • input $end
    1 input: • PROGRAM_START
    2 PROGRAM_START: • pdeclare
    3 pdeclare: • s_main_s
    4         | • constant_declaration s_main_s
    5         | • constant_declaration composite_declaration s_main_s
    6         | • constant_declaration composite_declaration function_declaration s_main_s
    7         | • constant_declaration composite_declaration function_declaration variable_declaration s_main_s
    8 s_main_s: • KW_DEF KW_MAIN '(' ')' main_body KW_ENDDEF
   10 constant_declaration: • KW_CONST TK_IDENTIFIER '=' TK_NUMBER ':' KW_INTEGER
   11                     | • KW_CONST TK_IDENTIFIER '=' TK_DECIMAL ':' KW_SCALAR
   12                     | • KW_CONST TK_IDENTIFIER '=' TK_STRING ':' KW_STR
   13                     | • KW_CONST TK_IDENTIFIER '=' KW_TRUE ':' KW_BOOL
   14                     | • KW_CONST TK_IDENTIFIER '=' KW_FALSE ':' KW_BOOL

    KW_CONST  shift, and go to state 1
    KW_DEF    shift, and go to state 2

    input                 go to state 3
    PROGRAM_START         go to state 4
    pdeclare              go to state 5
    s_main_s              go to state 6
    constant_declaration  go to state 7


State 1

   10 constant_declaration: KW_CONST • TK_IDENTIFIER '=' TK_NUMBER ':' KW_INTEGER
   11                     | KW_CONST • TK_IDENTIFIER '=' TK_DECIMAL ':' KW_SCALAR
   12                     | KW_CONST • TK_IDENTIFIER '=' TK_STRING ':' KW_STR
   13                     | KW_CONST • TK_IDENTIFIER '=' KW_TRUE ':' KW_BOOL
   14                     | KW_CONST • TK_IDENTIFIER '=' KW_FALSE ':' KW_BOOL

    TK_IDENTIFIER  shift, and go to state 8


State 2

    8 s_main_s: KW_DEF • KW_MAIN '(' ')' main_body KW_ENDDEF

    KW_MAIN  shift, and go to state 9


State 3

    0 $accept: input • $end

    $end  shift, and go to state 10


State 4

    1 input: PROGRAM_START •

    $default  reduce using rule 1 (input)


State 5

    2 PROGRAM_START: pdeclare •

    $default  reduce using rule 2 (PROGRAM_START)


State 6

    3 pdeclare: s_main_s •

    $default  reduce using rule 3 (pdeclare)


State 7

    4 pdeclare: constant_declaration • s_main_s
    5         | constant_declaration • composite_declaration s_main_s
    6         | constant_declaration • composite_declaration function_declaration s_main_s
    7         | constant_declaration • composite_declaration function_declaration variable_declaration s_main_s
    8 s_main_s: • KW_DEF KW_MAIN '(' ')' main_body KW_ENDDEF
   15 composite_declaration: • KW_COMP

    KW_COMP  shift, and go to state 11
    KW_DEF   shift, and go to state 2

    s_main_s               go to state 12
    composite_declaration  go to state 13


State 8

   10 constant_declaration: KW_CONST TK_IDENTIFIER • '=' TK_NUMBER ':' KW_INTEGER
   11                     | KW_CONST TK_IDENTIFIER • '=' TK_DECIMAL ':' KW_SCALAR
   12                     | KW_CONST TK_IDENTIFIER • '=' TK_STRING ':' KW_STR
   13                     | KW_CONST TK_IDENTIFIER • '=' KW_TRUE ':' KW_BOOL
   14                     | KW_CONST TK_IDENTIFIER • '=' KW_FALSE ':' KW_BOOL

    '='  shift, and go to state 14


State 9

    8 s_main_s: KW_DEF KW_MAIN • '(' ')' main_body KW_ENDDEF

    '('  shift, and go to state 15


State 10

    0 $accept: input $end •

    $default  accept


State 11

   15 composite_declaration: KW_COMP •

    $default  reduce using rule 15 (composite_declaration)


State 12

    4 pdeclare: constant_declaration s_main_s •

    $default  reduce using rule 4 (pdeclare)


State 13

    5 pdeclare: constant_declaration composite_declaration • s_main_s
    6         | constant_declaration composite_declaration • function_declaration s_main_s
    7         | constant_declaration composite_declaration • function_declaration variable_declaration s_main_s
    8 s_main_s: • KW_DEF KW_MAIN '(' ')' main_body KW_ENDDEF
   16 function_declaration: • KW_DEF function_header function_body KW_ENDDEF

    KW_DEF  shift, and go to state 16

    s_main_s              go to state 17
    function_declaration  go to state 18


State 14

   10 constant_declaration: KW_CONST TK_IDENTIFIER '=' • TK_NUMBER ':' KW_INTEGER
   11                     | KW_CONST TK_IDENTIFIER '=' • TK_DECIMAL ':' KW_SCALAR
   12                     | KW_CONST TK_IDENTIFIER '=' • TK_STRING ':' KW_STR
   13                     | KW_CONST TK_IDENTIFIER '=' • KW_TRUE ':' KW_BOOL
   14                     | KW_CONST TK_IDENTIFIER '=' • KW_FALSE ':' KW_BOOL

    TK_STRING   shift, and go to state 19
    TK_NUMBER   shift, and go to state 20
    TK_DECIMAL  shift, and go to state 21
    KW_TRUE     shift, and go to state 22
    KW_FALSE    shift, and go to state 23


State 15

    8 s_main_s: KW_DEF KW_MAIN '(' • ')' main_body KW_ENDDEF

    ')'  shift, and go to state 24


State 16

    8 s_main_s: KW_DEF • KW_MAIN '(' ')' main_body KW_ENDDEF
   16 function_declaration: KW_DEF • function_header function_body KW_ENDDEF
   96 function_header: • TK_IDENTIFIER '(' function_arg ')' '-' '>' data_type

    TK_IDENTIFIER  shift, and go to state 25
    KW_MAIN        shift, and go to state 9

    function_header  go to state 26


State 17

    5 pdeclare: constant_declaration composite_declaration s_main_s •

    $default  reduce using rule 5 (pdeclare)


State 18

    6 pdeclare: constant_declaration composite_declaration function_declaration • s_main_s
    7         | constant_declaration composite_declaration function_declaration • variable_declaration s_main_s
    8 s_main_s: • KW_DEF KW_MAIN '(' ')' main_body KW_ENDDEF
   17 variable_declaration: • TK_IDENTIFIER ':' data_type ';'
   18                     | • TK_IDENTIFIER ':' data_type ',' variable_declaration

    TK_IDENTIFIER  shift, and go to state 27
    KW_DEF         shift, and go to state 2

    s_main_s              go to state 28
    variable_declaration  go to state 29


State 19

   12 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_STRING • ':' KW_STR

    ':'  shift, and go to state 30


State 20

   10 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_NUMBER • ':' KW_INTEGER

    ':'  shift, and go to state 31


State 21

   11 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_DECIMAL • ':' KW_SCALAR

    ':'  shift, and go to state 32


State 22

   13 constant_declaration: KW_CONST TK_IDENTIFIER '=' KW_TRUE • ':' KW_BOOL

    ':'  shift, and go to state 33


State 23

   14 constant_declaration: KW_CONST TK_IDENTIFIER '=' KW_FALSE • ':' KW_BOOL

    ':'  shift, and go to state 34


State 24

    8 s_main_s: KW_DEF KW_MAIN '(' ')' • main_body KW_ENDDEF
    9 main_body: • commands
   65 commands: • command commands
   66         | • command
   67 command: • ';'
   68        | • variable_assignement
   69        | • TK_IDENTIFIER brackets '=' expression ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   87 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   88             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   89 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   90              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   91 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   92 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type
   93 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 35
    KW_IF          shift, and go to state 36
    KW_FOR         shift, and go to state 37
    KW_WHILE       shift, and go to state 38
    KW_BREAK       shift, and go to state 39
    KW_RETURN      shift, and go to state 40
    KW_CONTINUE    shift, and go to state 41
    ';'            shift, and go to state 42

    main_body             go to state 43
    commands              go to state 44
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51


State 25

   96 function_header: TK_IDENTIFIER • '(' function_arg ')' '-' '>' data_type

    '('  shift, and go to state 52


State 26

   16 function_declaration: KW_DEF function_header • function_body KW_ENDDEF
   65 commands: • command commands
   66         | • command
   67 command: • ';'
   68        | • variable_assignement
   69        | • TK_IDENTIFIER brackets '=' expression ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   87 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   88             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   89 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   90              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   91 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   92 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type
   93 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE
   97 function_body: • commands

    TK_IDENTIFIER  shift, and go to state 35
    KW_IF          shift, and go to state 36
    KW_FOR         shift, and go to state 37
    KW_WHILE       shift, and go to state 38
    KW_BREAK       shift, and go to state 39
    KW_RETURN      shift, and go to state 40
    KW_CONTINUE    shift, and go to state 41
    ';'            shift, and go to state 42

    commands              go to state 53
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51
    function_body         go to state 54


State 27

   17 variable_declaration: TK_IDENTIFIER • ':' data_type ';'
   18                     | TK_IDENTIFIER • ':' data_type ',' variable_declaration

    ':'  shift, and go to state 55


State 28

    6 pdeclare: constant_declaration composite_declaration function_declaration s_main_s •

    $default  reduce using rule 6 (pdeclare)


State 29

    7 pdeclare: constant_declaration composite_declaration function_declaration variable_declaration • s_main_s
    8 s_main_s: • KW_DEF KW_MAIN '(' ')' main_body KW_ENDDEF

    KW_DEF  shift, and go to state 2

    s_main_s  go to state 56


State 30

   12 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_STRING ':' • KW_STR

    KW_STR  shift, and go to state 57


State 31

   10 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_NUMBER ':' • KW_INTEGER

    KW_INTEGER  shift, and go to state 58


State 32

   11 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_DECIMAL ':' • KW_SCALAR

    KW_SCALAR  shift, and go to state 59


State 33

   13 constant_declaration: KW_CONST TK_IDENTIFIER '=' KW_TRUE ':' • KW_BOOL

    KW_BOOL  shift, and go to state 60


State 34

   14 constant_declaration: KW_CONST TK_IDENTIFIER '=' KW_FALSE ':' • KW_BOOL

    KW_BOOL  shift, and go to state 61


State 35

   63 brackets: • '[' expression ']'
   64         | • brackets '[' expression ']'
   69 command: TK_IDENTIFIER • brackets '=' expression ';'
   79        | TK_IDENTIFIER • '(' function_arg ')' ';'
   80        | TK_IDENTIFIER • '(' ')' ';'
   81        | TK_IDENTIFIER • ADD_ASSIGN TK_IDENTIFIER ';'
   82        | TK_IDENTIFIER • SUB_ASSIGN TK_IDENTIFIER ';'
   83        | TK_IDENTIFIER • MULT_ASSIGN TK_IDENTIFIER ';'
   84        | TK_IDENTIFIER • DIV_ASSIGN TK_IDENTIFIER ';'
   85        | TK_IDENTIFIER • MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: TK_IDENTIFIER • '=' expression ';'
   91 compound_array_a: TK_IDENTIFIER • ASSIGN '[' ']'
   92 compound_array_i: TK_IDENTIFIER • ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type

    ADD_ASSIGN   shift, and go to state 62
    SUB_ASSIGN   shift, and go to state 63
    MULT_ASSIGN  shift, and go to state 64
    DIV_ASSIGN   shift, and go to state 65
    MOD_ASSIGN   shift, and go to state 66
    ASSIGN       shift, and go to state 67
    '='          shift, and go to state 68
    '('          shift, and go to state 69
    '['          shift, and go to state 70

    brackets  go to state 71


State 36

   87 if_statement: KW_IF • '(' logical_expression ')' ':' commands KW_ENDIF
   88             | KW_IF • '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF

    '('  shift, and go to state 72


State 37

   89 for_statement: KW_FOR • TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   90              | KW_FOR • TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR

    TK_IDENTIFIER  shift, and go to state 73


State 38

   93 while_statement: KW_WHILE • '(' logical_expression ')' commands KW_ENDWHILE

    '('  shift, and go to state 74


State 39

   75 command: KW_BREAK • ';'

    ';'  shift, and go to state 75


State 40

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression
   77 command: KW_RETURN • ';'
   78        | KW_RETURN • expression ';'

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90
    ';'            shift, and go to state 91

    composite_data_type  go to state 92
    expression           go to state 93
    math_expression      go to state 94
    logical_expression   go to state 95


State 41

   76 command: KW_CONTINUE • ';'

    ';'  shift, and go to state 96


State 42

   67 command: ';' •

    $default  reduce using rule 67 (command)


State 43

    8 s_main_s: KW_DEF KW_MAIN '(' ')' main_body • KW_ENDDEF

    KW_ENDDEF  shift, and go to state 97


State 44

    9 main_body: commands •

    $default  reduce using rule 9 (main_body)


State 45

   65 commands: • command commands
   65         | command • commands
   66         | • command
   66         | command •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE, KW_ENDDEF]
   67 command: • ';'
   68        | • variable_assignement
   69        | • TK_IDENTIFIER brackets '=' expression ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   87 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   88             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   89 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   90              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   91 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   92 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type
   93 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 35
    KW_IF          shift, and go to state 36
    KW_FOR         shift, and go to state 37
    KW_WHILE       shift, and go to state 38
    KW_BREAK       shift, and go to state 39
    KW_RETURN      shift, and go to state 40
    KW_CONTINUE    shift, and go to state 41
    ';'            shift, and go to state 42

    $default  reduce using rule 66 (commands)

    commands              go to state 98
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51


State 46

   68 command: variable_assignement •

    $default  reduce using rule 68 (command)


State 47

   70 command: if_statement • ';'

    ';'  shift, and go to state 99


State 48

   71 command: for_statement • ';'

    ';'  shift, and go to state 100


State 49

   73 command: compound_array_a • ';'

    ';'  shift, and go to state 101


State 50

   72 command: compound_array_i • ';'

    ';'  shift, and go to state 102


State 51

   74 command: while_statement • ';'

    ';'  shift, and go to state 103


State 52

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression
   94 function_arg: • expression
   95             | • function_arg ',' expression
   96 function_header: TK_IDENTIFIER '(' • function_arg ')' '-' '>' data_type

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 104
    math_expression      go to state 94
    logical_expression   go to state 95
    function_arg         go to state 105


State 53

   97 function_body: commands •

    $default  reduce using rule 97 (function_body)


State 54

   16 function_declaration: KW_DEF function_header function_body • KW_ENDDEF

    KW_ENDDEF  shift, and go to state 106


State 55

   17 variable_declaration: TK_IDENTIFIER ':' • data_type ';'
   18                     | TK_IDENTIFIER ':' • data_type ',' variable_declaration
   19 data_type: • basic_data_type
   20          | • composite_data_type
   21 basic_data_type: • KW_INTEGER
   22                | • KW_BOOL
   23                | • KW_SCALAR
   24                | • KW_STR
   25 composite_data_type: • KW_COMP TK_IDENTIFIER

    KW_INTEGER  shift, and go to state 107
    KW_SCALAR   shift, and go to state 108
    KW_STR      shift, and go to state 109
    KW_BOOL     shift, and go to state 110
    KW_COMP     shift, and go to state 85

    data_type            go to state 111
    basic_data_type      go to state 112
    composite_data_type  go to state 113


State 56

    7 pdeclare: constant_declaration composite_declaration function_declaration variable_declaration s_main_s •

    $default  reduce using rule 7 (pdeclare)


State 57

   12 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_STRING ':' KW_STR •

    $default  reduce using rule 12 (constant_declaration)


State 58

   10 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_NUMBER ':' KW_INTEGER •

    $default  reduce using rule 10 (constant_declaration)


State 59

   11 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_DECIMAL ':' KW_SCALAR •

    $default  reduce using rule 11 (constant_declaration)


State 60

   13 constant_declaration: KW_CONST TK_IDENTIFIER '=' KW_TRUE ':' KW_BOOL •

    $default  reduce using rule 13 (constant_declaration)


State 61

   14 constant_declaration: KW_CONST TK_IDENTIFIER '=' KW_FALSE ':' KW_BOOL •

    $default  reduce using rule 14 (constant_declaration)


State 62

   81 command: TK_IDENTIFIER ADD_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 114


State 63

   82 command: TK_IDENTIFIER SUB_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 115


State 64

   83 command: TK_IDENTIFIER MULT_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 116


State 65

   84 command: TK_IDENTIFIER DIV_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 117


State 66

   85 command: TK_IDENTIFIER MOD_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 118


State 67

   91 compound_array_a: TK_IDENTIFIER ASSIGN • '[' ']'
   92 compound_array_i: TK_IDENTIFIER ASSIGN • '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type

    '['  shift, and go to state 119


State 68

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression
   86 variable_assignement: TK_IDENTIFIER '=' • expression ';'

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 120
    math_expression      go to state 94
    logical_expression   go to state 95


State 69

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression
   79 command: TK_IDENTIFIER '(' • function_arg ')' ';'
   80        | TK_IDENTIFIER '(' • ')' ';'
   94 function_arg: • expression
   95             | • function_arg ',' expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90
    ')'            shift, and go to state 121

    composite_data_type  go to state 92
    expression           go to state 104
    math_expression      go to state 94
    logical_expression   go to state 95
    function_arg         go to state 122


State 70

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression
   63 brackets: '[' • expression ']'

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 123
    math_expression      go to state 94
    logical_expression   go to state 95


State 71

   64 brackets: brackets • '[' expression ']'
   69 command: TK_IDENTIFIER brackets • '=' expression ';'

    '='  shift, and go to state 124
    '['  shift, and go to state 125


State 72

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression
   87 if_statement: KW_IF '(' • logical_expression ')' ':' commands KW_ENDIF
   88             | KW_IF '(' • logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 126
    math_expression      go to state 94
    logical_expression   go to state 127


State 73

   89 for_statement: KW_FOR TK_IDENTIFIER • KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   90              | KW_FOR TK_IDENTIFIER • KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR

    KW_IN  shift, and go to state 128


State 74

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression
   93 while_statement: KW_WHILE '(' • logical_expression ')' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 126
    math_expression      go to state 94
    logical_expression   go to state 129


State 75

   75 command: KW_BREAK ';' •

    $default  reduce using rule 75 (command)


State 76

   32 expression: TK_IDENTIFIER •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', POW, ')', ']', ';', ',']
   33           | TK_IDENTIFIER • '(' function_arg ')'
   34           | TK_IDENTIFIER • '(' ')'
   35           | TK_IDENTIFIER • brackets
   63 brackets: • '[' expression ']'
   64         | • brackets '[' expression ']'

    '('  shift, and go to state 130
    '['  shift, and go to state 70

    $default  reduce using rule 32 (expression)

    brackets  go to state 131


State 77

   28 expression: TK_CHAR •

    $default  reduce using rule 28 (expression)


State 78

   29 expression: TK_STRING •

    $default  reduce using rule 29 (expression)


State 79

   27 expression: TK_REAL •

    $default  reduce using rule 27 (expression)


State 80

   30 expression: TK_DIGIT •

    $default  reduce using rule 30 (expression)


State 81

   26 expression: TK_NUMBER •

    $default  reduce using rule 26 (expression)


State 82

   31 expression: TK_DECIMAL •

    $default  reduce using rule 31 (expression)


State 83

   36 expression: KW_TRUE •

    $default  reduce using rule 36 (expression)


State 84

   37 expression: KW_FALSE •

    $default  reduce using rule 37 (expression)


State 85

   25 composite_data_type: KW_COMP • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 132


State 86

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   61                   | '!' • expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 133
    math_expression      go to state 94
    logical_expression   go to state 95


State 87

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression
   62                   | KW_NOT • expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 134
    math_expression      go to state 94
    logical_expression   go to state 95


State 88

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   43           | '-' • expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 135
    math_expression      go to state 94
    logical_expression   go to state 95


State 89

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   42           | '+' • expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 136
    math_expression      go to state 94
    logical_expression   go to state 95


State 90

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   38           | '(' • expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 137
    math_expression      go to state 94
    logical_expression   go to state 95


State 91

   77 command: KW_RETURN ';' •

    $default  reduce using rule 77 (command)


State 92

   39 expression: composite_data_type • '.' expression

    '.'  shift, and go to state 138


State 93

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression
   78 command: KW_RETURN expression • ';'

    KW_AND  shift, and go to state 139
    KW_OR   shift, and go to state 140
    LOR     shift, and go to state 141
    LAND    shift, and go to state 142
    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155
    ';'     shift, and go to state 156


State 94

   40 expression: math_expression •

    $default  reduce using rule 40 (expression)


State 95

   41 expression: logical_expression •

    $default  reduce using rule 41 (expression)


State 96

   76 command: KW_CONTINUE ';' •

    $default  reduce using rule 76 (command)


State 97

    8 s_main_s: KW_DEF KW_MAIN '(' ')' main_body KW_ENDDEF •

    $default  reduce using rule 8 (s_main_s)


State 98

   65 commands: command commands •

    $default  reduce using rule 65 (commands)


State 99

   70 command: if_statement ';' •

    $default  reduce using rule 70 (command)


State 100

   71 command: for_statement ';' •

    $default  reduce using rule 71 (command)


State 101

   73 command: compound_array_a ';' •

    $default  reduce using rule 73 (command)


State 102

   72 command: compound_array_i ';' •

    $default  reduce using rule 72 (command)


State 103

   74 command: while_statement ';' •

    $default  reduce using rule 74 (command)


State 104

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression
   94 function_arg: expression •  [')', ',']

    KW_AND  shift, and go to state 139
    KW_OR   shift, and go to state 140
    LOR     shift, and go to state 141
    LAND    shift, and go to state 142
    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155

    $default  reduce using rule 94 (function_arg)


State 105

   95 function_arg: function_arg • ',' expression
   96 function_header: TK_IDENTIFIER '(' function_arg • ')' '-' '>' data_type

    ')'  shift, and go to state 157
    ','  shift, and go to state 158


State 106

   16 function_declaration: KW_DEF function_header function_body KW_ENDDEF •

    $default  reduce using rule 16 (function_declaration)


State 107

   21 basic_data_type: KW_INTEGER •

    $default  reduce using rule 21 (basic_data_type)


State 108

   23 basic_data_type: KW_SCALAR •

    $default  reduce using rule 23 (basic_data_type)


State 109

   24 basic_data_type: KW_STR •

    $default  reduce using rule 24 (basic_data_type)


State 110

   22 basic_data_type: KW_BOOL •

    $default  reduce using rule 22 (basic_data_type)


State 111

   17 variable_declaration: TK_IDENTIFIER ':' data_type • ';'
   18                     | TK_IDENTIFIER ':' data_type • ',' variable_declaration

    ';'  shift, and go to state 159
    ','  shift, and go to state 160


State 112

   19 data_type: basic_data_type •

    $default  reduce using rule 19 (data_type)


State 113

   20 data_type: composite_data_type •

    $default  reduce using rule 20 (data_type)


State 114

   81 command: TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 161


State 115

   82 command: TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 162


State 116

   83 command: TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 163


State 117

   84 command: TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 164


State 118

   85 command: TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 165


State 119

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression
   91 compound_array_a: TK_IDENTIFIER ASSIGN '[' • ']'
   92 compound_array_i: TK_IDENTIFIER ASSIGN '[' • expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90
    ']'            shift, and go to state 166

    composite_data_type  go to state 92
    expression           go to state 167
    math_expression      go to state 94
    logical_expression   go to state 95


State 120

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression
   86 variable_assignement: TK_IDENTIFIER '=' expression • ';'

    KW_AND  shift, and go to state 139
    KW_OR   shift, and go to state 140
    LOR     shift, and go to state 141
    LAND    shift, and go to state 142
    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155
    ';'     shift, and go to state 168


State 121

   80 command: TK_IDENTIFIER '(' ')' • ';'

    ';'  shift, and go to state 169


State 122

   79 command: TK_IDENTIFIER '(' function_arg • ')' ';'
   95 function_arg: function_arg • ',' expression

    ')'  shift, and go to state 170
    ','  shift, and go to state 158


State 123

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression
   63 brackets: '[' expression • ']'

    KW_AND  shift, and go to state 139
    KW_OR   shift, and go to state 140
    LOR     shift, and go to state 141
    LAND    shift, and go to state 142
    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155
    ']'     shift, and go to state 171


State 124

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression
   69 command: TK_IDENTIFIER brackets '=' • expression ';'

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 172
    math_expression      go to state 94
    logical_expression   go to state 95


State 125

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression
   64 brackets: brackets '[' • expression ']'

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 173
    math_expression      go to state 94
    logical_expression   go to state 95


State 126

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    KW_AND  shift, and go to state 139
    KW_OR   shift, and go to state 140
    LOR     shift, and go to state 141
    LAND    shift, and go to state 142
    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155


State 127

   41 expression: logical_expression •  [KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', POW]
   87 if_statement: KW_IF '(' logical_expression • ')' ':' commands KW_ENDIF
   88             | KW_IF '(' logical_expression • ')' ':' commands KW_ELSE ':' commands KW_ENDIF

    ')'  shift, and go to state 174

    $default  reduce using rule 41 (expression)


State 128

   89 for_statement: KW_FOR TK_IDENTIFIER KW_IN • '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   90              | KW_FOR TK_IDENTIFIER KW_IN • '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR

    '['  shift, and go to state 175


State 129

   41 expression: logical_expression •  [KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', POW]
   93 while_statement: KW_WHILE '(' logical_expression • ')' commands KW_ENDWHILE

    ')'  shift, and go to state 176

    $default  reduce using rule 41 (expression)


State 130

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   33           | TK_IDENTIFIER '(' • function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   34           | TK_IDENTIFIER '(' • ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression
   94 function_arg: • expression
   95             | • function_arg ',' expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90
    ')'            shift, and go to state 177

    composite_data_type  go to state 92
    expression           go to state 104
    math_expression      go to state 94
    logical_expression   go to state 95
    function_arg         go to state 178


State 131

   35 expression: TK_IDENTIFIER brackets •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', POW, ')', ']', ';', ',']
   64 brackets: brackets • '[' expression ']'

    '['  shift, and go to state 125

    $default  reduce using rule 35 (expression)


State 132

   25 composite_data_type: KW_COMP TK_IDENTIFIER •

    $default  reduce using rule 25 (composite_data_type)


State 133

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression
   61                   | '!' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, ')', ']', ';', ',']

    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155

    $default  reduce using rule 61 (logical_expression)

    Conflict between rule 61 and token KW_AND resolved as reduce (KW_AND < '!').
    Conflict between rule 61 and token KW_OR resolved as reduce (KW_OR < '!').
    Conflict between rule 61 and token LOR resolved as reduce (LOR < '!').
    Conflict between rule 61 and token LAND resolved as reduce (LAND < '!').
    Conflict between rule 61 and token NEQ resolved as shift ('!' < NEQ).
    Conflict between rule 61 and token EQ resolved as shift ('!' < EQ).
    Conflict between rule 61 and token LEQ resolved as shift ('!' < LEQ).
    Conflict between rule 61 and token GEQ resolved as shift ('!' < GEQ).
    Conflict between rule 61 and token '<' resolved as shift ('!' < '<').
    Conflict between rule 61 and token '>' resolved as shift ('!' < '>').
    Conflict between rule 61 and token '*' resolved as shift ('!' < '*').
    Conflict between rule 61 and token '/' resolved as shift ('!' < '/').
    Conflict between rule 61 and token MOD resolved as shift ('!' < MOD).
    Conflict between rule 61 and token KW_MOD resolved as shift ('!' < KW_MOD).
    Conflict between rule 61 and token '-' resolved as shift ('!' < '-').
    Conflict between rule 61 and token '+' resolved as shift ('!' < '+').
    Conflict between rule 61 and token POW resolved as shift ('!' < POW).


State 134

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression
   62                   | KW_NOT expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, ')', ']', ';', ',']

    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155

    $default  reduce using rule 62 (logical_expression)

    Conflict between rule 62 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 62 and token KW_OR resolved as reduce (KW_OR < KW_NOT).
    Conflict between rule 62 and token LOR resolved as reduce (LOR < KW_NOT).
    Conflict between rule 62 and token LAND resolved as reduce (LAND < KW_NOT).
    Conflict between rule 62 and token NEQ resolved as shift (KW_NOT < NEQ).
    Conflict between rule 62 and token EQ resolved as shift (KW_NOT < EQ).
    Conflict between rule 62 and token LEQ resolved as shift (KW_NOT < LEQ).
    Conflict between rule 62 and token GEQ resolved as shift (KW_NOT < GEQ).
    Conflict between rule 62 and token '<' resolved as shift (KW_NOT < '<').
    Conflict between rule 62 and token '>' resolved as shift (KW_NOT < '>').
    Conflict between rule 62 and token '*' resolved as shift (KW_NOT < '*').
    Conflict between rule 62 and token '/' resolved as shift (KW_NOT < '/').
    Conflict between rule 62 and token MOD resolved as shift (KW_NOT < MOD).
    Conflict between rule 62 and token KW_MOD resolved as shift (KW_NOT < KW_MOD).
    Conflict between rule 62 and token '-' resolved as shift (KW_NOT < '-').
    Conflict between rule 62 and token '+' resolved as shift (KW_NOT < '+').
    Conflict between rule 62 and token POW resolved as shift (KW_NOT < POW).


State 135

   43 expression: '-' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ',']
   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    POW  shift, and go to state 155

    $default  reduce using rule 43 (expression)

    Conflict between rule 43 and token KW_AND resolved as reduce (KW_AND < '-').
    Conflict between rule 43 and token KW_OR resolved as reduce (KW_OR < '-').
    Conflict between rule 43 and token LOR resolved as reduce (LOR < '-').
    Conflict between rule 43 and token LAND resolved as reduce (LAND < '-').
    Conflict between rule 43 and token NEQ resolved as reduce (NEQ < '-').
    Conflict between rule 43 and token EQ resolved as reduce (EQ < '-').
    Conflict between rule 43 and token LEQ resolved as reduce (LEQ < '-').
    Conflict between rule 43 and token GEQ resolved as reduce (GEQ < '-').
    Conflict between rule 43 and token '<' resolved as reduce ('<' < '-').
    Conflict between rule 43 and token '>' resolved as reduce ('>' < '-').
    Conflict between rule 43 and token '*' resolved as reduce ('*' < '-').
    Conflict between rule 43 and token '/' resolved as reduce ('/' < '-').
    Conflict between rule 43 and token MOD resolved as reduce (MOD < '-').
    Conflict between rule 43 and token KW_MOD resolved as reduce (KW_MOD < '-').
    Conflict between rule 43 and token '-' resolved as reduce (%left '-').
    Conflict between rule 43 and token '+' resolved as reduce (%left '+').
    Conflict between rule 43 and token POW resolved as shift ('-' < POW).


State 136

   42 expression: '+' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ',']
   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    POW  shift, and go to state 155

    $default  reduce using rule 42 (expression)

    Conflict between rule 42 and token KW_AND resolved as reduce (KW_AND < '+').
    Conflict between rule 42 and token KW_OR resolved as reduce (KW_OR < '+').
    Conflict between rule 42 and token LOR resolved as reduce (LOR < '+').
    Conflict between rule 42 and token LAND resolved as reduce (LAND < '+').
    Conflict between rule 42 and token NEQ resolved as reduce (NEQ < '+').
    Conflict between rule 42 and token EQ resolved as reduce (EQ < '+').
    Conflict between rule 42 and token LEQ resolved as reduce (LEQ < '+').
    Conflict between rule 42 and token GEQ resolved as reduce (GEQ < '+').
    Conflict between rule 42 and token '<' resolved as reduce ('<' < '+').
    Conflict between rule 42 and token '>' resolved as reduce ('>' < '+').
    Conflict between rule 42 and token '*' resolved as reduce ('*' < '+').
    Conflict between rule 42 and token '/' resolved as reduce ('/' < '+').
    Conflict between rule 42 and token MOD resolved as reduce (MOD < '+').
    Conflict between rule 42 and token KW_MOD resolved as reduce (KW_MOD < '+').
    Conflict between rule 42 and token '-' resolved as reduce (%left '-').
    Conflict between rule 42 and token '+' resolved as reduce (%left '+').
    Conflict between rule 42 and token POW resolved as shift ('+' < POW).


State 137

   38 expression: '(' expression • ')'
   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    KW_AND  shift, and go to state 139
    KW_OR   shift, and go to state 140
    LOR     shift, and go to state 141
    LAND    shift, and go to state 142
    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155
    ')'     shift, and go to state 179


State 138

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   39           | composite_data_type '.' • expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 180
    math_expression      go to state 94
    logical_expression   go to state 95


State 139

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   58                   | expression KW_AND • expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 181
    math_expression      go to state 94
    logical_expression   go to state 95


State 140

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   60                   | expression KW_OR • expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 182
    math_expression      go to state 94
    logical_expression   go to state 95


State 141

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   59                   | expression LOR • expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 183
    math_expression      go to state 94
    logical_expression   go to state 95


State 142

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   57                   | expression LAND • expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 184
    math_expression      go to state 94
    logical_expression   go to state 95


State 143

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   54                   | expression NEQ • expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 185
    math_expression      go to state 94
    logical_expression   go to state 95


State 144

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   51                   | expression EQ • expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 186
    math_expression      go to state 94
    logical_expression   go to state 95


State 145

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   52                   | expression LEQ • expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 187
    math_expression      go to state 94
    logical_expression   go to state 95


State 146

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   53                   | expression GEQ • expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 188
    math_expression      go to state 94
    logical_expression   go to state 95


State 147

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   55                   | expression '<' • expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 189
    math_expression      go to state 94
    logical_expression   go to state 95


State 148

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   56                   | expression '>' • expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 190
    math_expression      go to state 94
    logical_expression   go to state 95


State 149

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   47                | expression '*' • expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 191
    math_expression      go to state 94
    logical_expression   go to state 95


State 150

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   48                | expression '/' • expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 192
    math_expression      go to state 94
    logical_expression   go to state 95


State 151

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   49                | expression MOD • expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 193
    math_expression      go to state 94
    logical_expression   go to state 95


State 152

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   50                | expression KW_MOD • expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 194
    math_expression      go to state 94
    logical_expression   go to state 95


State 153

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   46                | expression '-' • expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 195
    math_expression      go to state 94
    logical_expression   go to state 95


State 154

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   45                | expression '+' • expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 196
    math_expression      go to state 94
    logical_expression   go to state 95


State 155

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   44                | expression POW • expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 197
    math_expression      go to state 94
    logical_expression   go to state 95


State 156

   78 command: KW_RETURN expression ';' •

    $default  reduce using rule 78 (command)


State 157

   96 function_header: TK_IDENTIFIER '(' function_arg ')' • '-' '>' data_type

    '-'  shift, and go to state 198


State 158

   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   26 expression: • TK_NUMBER
   27           | • TK_REAL
   28           | • TK_CHAR
   29           | • TK_STRING
   30           | • TK_DIGIT
   31           | • TK_DECIMAL
   32           | • TK_IDENTIFIER
   33           | • TK_IDENTIFIER '(' function_arg ')'
   34           | • TK_IDENTIFIER '(' ')'
   35           | • TK_IDENTIFIER brackets
   36           | • KW_TRUE
   37           | • KW_FALSE
   38           | • '(' expression ')'
   39           | • composite_data_type '.' expression
   40           | • math_expression
   41           | • logical_expression
   42           | • '+' expression
   43           | • '-' expression
   44 math_expression: • expression POW expression
   45                | • expression '+' expression
   46                | • expression '-' expression
   47                | • expression '*' expression
   48                | • expression '/' expression
   49                | • expression MOD expression
   50                | • expression KW_MOD expression
   51 logical_expression: • expression EQ expression
   52                   | • expression LEQ expression
   53                   | • expression GEQ expression
   54                   | • expression NEQ expression
   55                   | • expression '<' expression
   56                   | • expression '>' expression
   57                   | • expression LAND expression
   58                   | • expression KW_AND expression
   59                   | • expression LOR expression
   60                   | • expression KW_OR expression
   61                   | • '!' expression
   62                   | • KW_NOT expression
   95 function_arg: function_arg ',' • expression

    TK_IDENTIFIER  shift, and go to state 76
    TK_CHAR        shift, and go to state 77
    TK_STRING      shift, and go to state 78
    TK_REAL        shift, and go to state 79
    TK_DIGIT       shift, and go to state 80
    TK_NUMBER      shift, and go to state 81
    TK_DECIMAL     shift, and go to state 82
    KW_TRUE        shift, and go to state 83
    KW_FALSE       shift, and go to state 84
    KW_COMP        shift, and go to state 85
    '!'            shift, and go to state 86
    KW_NOT         shift, and go to state 87
    '-'            shift, and go to state 88
    '+'            shift, and go to state 89
    '('            shift, and go to state 90

    composite_data_type  go to state 92
    expression           go to state 199
    math_expression      go to state 94
    logical_expression   go to state 95


State 159

   17 variable_declaration: TK_IDENTIFIER ':' data_type ';' •

    $default  reduce using rule 17 (variable_declaration)


State 160

   17 variable_declaration: • TK_IDENTIFIER ':' data_type ';'
   18                     | • TK_IDENTIFIER ':' data_type ',' variable_declaration
   18                     | TK_IDENTIFIER ':' data_type ',' • variable_declaration

    TK_IDENTIFIER  shift, and go to state 27

    variable_declaration  go to state 200


State 161

   81 command: TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 81 (command)


State 162

   82 command: TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 82 (command)


State 163

   83 command: TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 83 (command)


State 164

   84 command: TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 84 (command)


State 165

   85 command: TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 85 (command)


State 166

   91 compound_array_a: TK_IDENTIFIER ASSIGN '[' ']' •

    $default  reduce using rule 91 (compound_array_a)


State 167

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression
   92 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression • KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type

    KW_FOR  shift, and go to state 201
    KW_AND  shift, and go to state 139
    KW_OR   shift, and go to state 140
    LOR     shift, and go to state 141
    LAND    shift, and go to state 142
    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155


State 168

   86 variable_assignement: TK_IDENTIFIER '=' expression ';' •

    $default  reduce using rule 86 (variable_assignement)


State 169

   80 command: TK_IDENTIFIER '(' ')' ';' •

    $default  reduce using rule 80 (command)


State 170

   79 command: TK_IDENTIFIER '(' function_arg ')' • ';'

    ';'  shift, and go to state 202


State 171

   63 brackets: '[' expression ']' •

    $default  reduce using rule 63 (brackets)


State 172

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression
   69 command: TK_IDENTIFIER brackets '=' expression • ';'

    KW_AND  shift, and go to state 139
    KW_OR   shift, and go to state 140
    LOR     shift, and go to state 141
    LAND    shift, and go to state 142
    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155
    ';'     shift, and go to state 203


State 173

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression
   64 brackets: brackets '[' expression • ']'

    KW_AND  shift, and go to state 139
    KW_OR   shift, and go to state 140
    LOR     shift, and go to state 141
    LAND    shift, and go to state 142
    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155
    ']'     shift, and go to state 204


State 174

   87 if_statement: KW_IF '(' logical_expression ')' • ':' commands KW_ENDIF
   88             | KW_IF '(' logical_expression ')' • ':' commands KW_ELSE ':' commands KW_ENDIF

    ':'  shift, and go to state 205


State 175

   89 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' • TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   90              | KW_FOR TK_IDENTIFIER KW_IN '[' • TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR

    TK_NUMBER  shift, and go to state 206


State 176

   65 commands: • command commands
   66         | • command
   67 command: • ';'
   68        | • variable_assignement
   69        | • TK_IDENTIFIER brackets '=' expression ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   87 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   88             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   89 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   90              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   91 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   92 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type
   93 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE
   93                | KW_WHILE '(' logical_expression ')' • commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 35
    KW_IF          shift, and go to state 36
    KW_FOR         shift, and go to state 37
    KW_WHILE       shift, and go to state 38
    KW_BREAK       shift, and go to state 39
    KW_RETURN      shift, and go to state 40
    KW_CONTINUE    shift, and go to state 41
    ';'            shift, and go to state 42

    commands              go to state 207
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51


State 177

   34 expression: TK_IDENTIFIER '(' ')' •

    $default  reduce using rule 34 (expression)


State 178

   33 expression: TK_IDENTIFIER '(' function_arg • ')'
   95 function_arg: function_arg • ',' expression

    ')'  shift, and go to state 208
    ','  shift, and go to state 158


State 179

   38 expression: '(' expression ')' •

    $default  reduce using rule 38 (expression)


State 180

   39 expression: composite_data_type '.' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', POW, ')', ']', ';', ',']
   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    $default  reduce using rule 39 (expression)

    Conflict between rule 39 and token KW_AND resolved as reduce (KW_AND < '.').
    Conflict between rule 39 and token KW_OR resolved as reduce (KW_OR < '.').
    Conflict between rule 39 and token LOR resolved as reduce (LOR < '.').
    Conflict between rule 39 and token LAND resolved as reduce (LAND < '.').
    Conflict between rule 39 and token NEQ resolved as reduce (NEQ < '.').
    Conflict between rule 39 and token EQ resolved as reduce (EQ < '.').
    Conflict between rule 39 and token LEQ resolved as reduce (LEQ < '.').
    Conflict between rule 39 and token GEQ resolved as reduce (GEQ < '.').
    Conflict between rule 39 and token '<' resolved as reduce ('<' < '.').
    Conflict between rule 39 and token '>' resolved as reduce ('>' < '.').
    Conflict between rule 39 and token '*' resolved as reduce ('*' < '.').
    Conflict between rule 39 and token '/' resolved as reduce ('/' < '.').
    Conflict between rule 39 and token MOD resolved as reduce (MOD < '.').
    Conflict between rule 39 and token KW_MOD resolved as reduce (KW_MOD < '.').
    Conflict between rule 39 and token '-' resolved as reduce ('-' < '.').
    Conflict between rule 39 and token '+' resolved as reduce ('+' < '.').
    Conflict between rule 39 and token POW resolved as reduce (POW < '.').


State 181

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   58                   | expression KW_AND expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, ')', ']', ';', ',']
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155

    $default  reduce using rule 58 (logical_expression)

    Conflict between rule 58 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 58 and token KW_OR resolved as reduce (KW_OR < KW_AND).
    Conflict between rule 58 and token LOR resolved as reduce (LOR < KW_AND).
    Conflict between rule 58 and token LAND resolved as reduce (%left LAND).
    Conflict between rule 58 and token NEQ resolved as shift (KW_AND < NEQ).
    Conflict between rule 58 and token EQ resolved as shift (KW_AND < EQ).
    Conflict between rule 58 and token LEQ resolved as shift (KW_AND < LEQ).
    Conflict between rule 58 and token GEQ resolved as shift (KW_AND < GEQ).
    Conflict between rule 58 and token '<' resolved as shift (KW_AND < '<').
    Conflict between rule 58 and token '>' resolved as shift (KW_AND < '>').
    Conflict between rule 58 and token '*' resolved as shift (KW_AND < '*').
    Conflict between rule 58 and token '/' resolved as shift (KW_AND < '/').
    Conflict between rule 58 and token MOD resolved as shift (KW_AND < MOD).
    Conflict between rule 58 and token KW_MOD resolved as shift (KW_AND < KW_MOD).
    Conflict between rule 58 and token '-' resolved as shift (KW_AND < '-').
    Conflict between rule 58 and token '+' resolved as shift (KW_AND < '+').
    Conflict between rule 58 and token POW resolved as shift (KW_AND < POW).


State 182

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression
   60                   | expression KW_OR expression •  [KW_FOR, KW_OR, LOR, ')', ']', ';', ',']

    KW_AND  shift, and go to state 139
    LAND    shift, and go to state 142
    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155

    $default  reduce using rule 60 (logical_expression)

    Conflict between rule 60 and token KW_AND resolved as shift (KW_OR < KW_AND).
    Conflict between rule 60 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 60 and token LOR resolved as reduce (%left LOR).
    Conflict between rule 60 and token LAND resolved as shift (KW_OR < LAND).
    Conflict between rule 60 and token NEQ resolved as shift (KW_OR < NEQ).
    Conflict between rule 60 and token EQ resolved as shift (KW_OR < EQ).
    Conflict between rule 60 and token LEQ resolved as shift (KW_OR < LEQ).
    Conflict between rule 60 and token GEQ resolved as shift (KW_OR < GEQ).
    Conflict between rule 60 and token '<' resolved as shift (KW_OR < '<').
    Conflict between rule 60 and token '>' resolved as shift (KW_OR < '>').
    Conflict between rule 60 and token '*' resolved as shift (KW_OR < '*').
    Conflict between rule 60 and token '/' resolved as shift (KW_OR < '/').
    Conflict between rule 60 and token MOD resolved as shift (KW_OR < MOD).
    Conflict between rule 60 and token KW_MOD resolved as shift (KW_OR < KW_MOD).
    Conflict between rule 60 and token '-' resolved as shift (KW_OR < '-').
    Conflict between rule 60 and token '+' resolved as shift (KW_OR < '+').
    Conflict between rule 60 and token POW resolved as shift (KW_OR < POW).


State 183

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   59                   | expression LOR expression •  [KW_FOR, KW_OR, LOR, ')', ']', ';', ',']
   60                   | expression • KW_OR expression

    KW_AND  shift, and go to state 139
    LAND    shift, and go to state 142
    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155

    $default  reduce using rule 59 (logical_expression)

    Conflict between rule 59 and token KW_AND resolved as shift (LOR < KW_AND).
    Conflict between rule 59 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 59 and token LOR resolved as reduce (%left LOR).
    Conflict between rule 59 and token LAND resolved as shift (LOR < LAND).
    Conflict between rule 59 and token NEQ resolved as shift (LOR < NEQ).
    Conflict between rule 59 and token EQ resolved as shift (LOR < EQ).
    Conflict between rule 59 and token LEQ resolved as shift (LOR < LEQ).
    Conflict between rule 59 and token GEQ resolved as shift (LOR < GEQ).
    Conflict between rule 59 and token '<' resolved as shift (LOR < '<').
    Conflict between rule 59 and token '>' resolved as shift (LOR < '>').
    Conflict between rule 59 and token '*' resolved as shift (LOR < '*').
    Conflict between rule 59 and token '/' resolved as shift (LOR < '/').
    Conflict between rule 59 and token MOD resolved as shift (LOR < MOD).
    Conflict between rule 59 and token KW_MOD resolved as shift (LOR < KW_MOD).
    Conflict between rule 59 and token '-' resolved as shift (LOR < '-').
    Conflict between rule 59 and token '+' resolved as shift (LOR < '+').
    Conflict between rule 59 and token POW resolved as shift (LOR < POW).


State 184

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   57                   | expression LAND expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, ')', ']', ';', ',']
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155

    $default  reduce using rule 57 (logical_expression)

    Conflict between rule 57 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 57 and token KW_OR resolved as reduce (KW_OR < LAND).
    Conflict between rule 57 and token LOR resolved as reduce (LOR < LAND).
    Conflict between rule 57 and token LAND resolved as reduce (%left LAND).
    Conflict between rule 57 and token NEQ resolved as shift (LAND < NEQ).
    Conflict between rule 57 and token EQ resolved as shift (LAND < EQ).
    Conflict between rule 57 and token LEQ resolved as shift (LAND < LEQ).
    Conflict between rule 57 and token GEQ resolved as shift (LAND < GEQ).
    Conflict between rule 57 and token '<' resolved as shift (LAND < '<').
    Conflict between rule 57 and token '>' resolved as shift (LAND < '>').
    Conflict between rule 57 and token '*' resolved as shift (LAND < '*').
    Conflict between rule 57 and token '/' resolved as shift (LAND < '/').
    Conflict between rule 57 and token MOD resolved as shift (LAND < MOD).
    Conflict between rule 57 and token KW_MOD resolved as shift (LAND < KW_MOD).
    Conflict between rule 57 and token '-' resolved as shift (LAND < '-').
    Conflict between rule 57 and token '+' resolved as shift (LAND < '+').
    Conflict between rule 57 and token POW resolved as shift (LAND < POW).


State 185

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   54                   | expression NEQ expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, ')', ']', ';', ',']
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155

    $default  reduce using rule 54 (logical_expression)

    Conflict between rule 54 and token KW_AND resolved as reduce (KW_AND < NEQ).
    Conflict between rule 54 and token KW_OR resolved as reduce (KW_OR < NEQ).
    Conflict between rule 54 and token LOR resolved as reduce (LOR < NEQ).
    Conflict between rule 54 and token LAND resolved as reduce (LAND < NEQ).
    Conflict between rule 54 and token NEQ resolved as reduce (%left NEQ).
    Conflict between rule 54 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 54 and token LEQ resolved as shift (NEQ < LEQ).
    Conflict between rule 54 and token GEQ resolved as shift (NEQ < GEQ).
    Conflict between rule 54 and token '<' resolved as shift (NEQ < '<').
    Conflict between rule 54 and token '>' resolved as shift (NEQ < '>').
    Conflict between rule 54 and token '*' resolved as shift (NEQ < '*').
    Conflict between rule 54 and token '/' resolved as shift (NEQ < '/').
    Conflict between rule 54 and token MOD resolved as shift (NEQ < MOD).
    Conflict between rule 54 and token KW_MOD resolved as shift (NEQ < KW_MOD).
    Conflict between rule 54 and token '-' resolved as shift (NEQ < '-').
    Conflict between rule 54 and token '+' resolved as shift (NEQ < '+').
    Conflict between rule 54 and token POW resolved as shift (NEQ < POW).


State 186

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   51                   | expression EQ expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, ')', ']', ';', ',']
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155

    $default  reduce using rule 51 (logical_expression)

    Conflict between rule 51 and token KW_AND resolved as reduce (KW_AND < EQ).
    Conflict between rule 51 and token KW_OR resolved as reduce (KW_OR < EQ).
    Conflict between rule 51 and token LOR resolved as reduce (LOR < EQ).
    Conflict between rule 51 and token LAND resolved as reduce (LAND < EQ).
    Conflict between rule 51 and token NEQ resolved as reduce (%left NEQ).
    Conflict between rule 51 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 51 and token LEQ resolved as shift (EQ < LEQ).
    Conflict between rule 51 and token GEQ resolved as shift (EQ < GEQ).
    Conflict between rule 51 and token '<' resolved as shift (EQ < '<').
    Conflict between rule 51 and token '>' resolved as shift (EQ < '>').
    Conflict between rule 51 and token '*' resolved as shift (EQ < '*').
    Conflict between rule 51 and token '/' resolved as shift (EQ < '/').
    Conflict between rule 51 and token MOD resolved as shift (EQ < MOD).
    Conflict between rule 51 and token KW_MOD resolved as shift (EQ < KW_MOD).
    Conflict between rule 51 and token '-' resolved as shift (EQ < '-').
    Conflict between rule 51 and token '+' resolved as shift (EQ < '+').
    Conflict between rule 51 and token POW resolved as shift (EQ < POW).


State 187

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   52                   | expression LEQ expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', ')', ']', ';', ',']
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155

    $default  reduce using rule 52 (logical_expression)

    Conflict between rule 52 and token KW_AND resolved as reduce (KW_AND < LEQ).
    Conflict between rule 52 and token KW_OR resolved as reduce (KW_OR < LEQ).
    Conflict between rule 52 and token LOR resolved as reduce (LOR < LEQ).
    Conflict between rule 52 and token LAND resolved as reduce (LAND < LEQ).
    Conflict between rule 52 and token NEQ resolved as reduce (NEQ < LEQ).
    Conflict between rule 52 and token EQ resolved as reduce (EQ < LEQ).
    Conflict between rule 52 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 52 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 52 and token '<' resolved as reduce (%left '<').
    Conflict between rule 52 and token '>' resolved as reduce (%left '>').
    Conflict between rule 52 and token '*' resolved as shift (LEQ < '*').
    Conflict between rule 52 and token '/' resolved as shift (LEQ < '/').
    Conflict between rule 52 and token MOD resolved as shift (LEQ < MOD).
    Conflict between rule 52 and token KW_MOD resolved as shift (LEQ < KW_MOD).
    Conflict between rule 52 and token '-' resolved as shift (LEQ < '-').
    Conflict between rule 52 and token '+' resolved as shift (LEQ < '+').
    Conflict between rule 52 and token POW resolved as shift (LEQ < POW).


State 188

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   53                   | expression GEQ expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', ')', ']', ';', ',']
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155

    $default  reduce using rule 53 (logical_expression)

    Conflict between rule 53 and token KW_AND resolved as reduce (KW_AND < GEQ).
    Conflict between rule 53 and token KW_OR resolved as reduce (KW_OR < GEQ).
    Conflict between rule 53 and token LOR resolved as reduce (LOR < GEQ).
    Conflict between rule 53 and token LAND resolved as reduce (LAND < GEQ).
    Conflict between rule 53 and token NEQ resolved as reduce (NEQ < GEQ).
    Conflict between rule 53 and token EQ resolved as reduce (EQ < GEQ).
    Conflict between rule 53 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 53 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 53 and token '<' resolved as reduce (%left '<').
    Conflict between rule 53 and token '>' resolved as reduce (%left '>').
    Conflict between rule 53 and token '*' resolved as shift (GEQ < '*').
    Conflict between rule 53 and token '/' resolved as shift (GEQ < '/').
    Conflict between rule 53 and token MOD resolved as shift (GEQ < MOD).
    Conflict between rule 53 and token KW_MOD resolved as shift (GEQ < KW_MOD).
    Conflict between rule 53 and token '-' resolved as shift (GEQ < '-').
    Conflict between rule 53 and token '+' resolved as shift (GEQ < '+').
    Conflict between rule 53 and token POW resolved as shift (GEQ < POW).


State 189

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   55                   | expression '<' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', ')', ']', ';', ',']
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155

    $default  reduce using rule 55 (logical_expression)

    Conflict between rule 55 and token KW_AND resolved as reduce (KW_AND < '<').
    Conflict between rule 55 and token KW_OR resolved as reduce (KW_OR < '<').
    Conflict between rule 55 and token LOR resolved as reduce (LOR < '<').
    Conflict between rule 55 and token LAND resolved as reduce (LAND < '<').
    Conflict between rule 55 and token NEQ resolved as reduce (NEQ < '<').
    Conflict between rule 55 and token EQ resolved as reduce (EQ < '<').
    Conflict between rule 55 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 55 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 55 and token '<' resolved as reduce (%left '<').
    Conflict between rule 55 and token '>' resolved as reduce (%left '>').
    Conflict between rule 55 and token '*' resolved as shift ('<' < '*').
    Conflict between rule 55 and token '/' resolved as shift ('<' < '/').
    Conflict between rule 55 and token MOD resolved as shift ('<' < MOD).
    Conflict between rule 55 and token KW_MOD resolved as shift ('<' < KW_MOD).
    Conflict between rule 55 and token '-' resolved as shift ('<' < '-').
    Conflict between rule 55 and token '+' resolved as shift ('<' < '+').
    Conflict between rule 55 and token POW resolved as shift ('<' < POW).


State 190

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   56                   | expression '>' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', ')', ']', ';', ',']
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155

    $default  reduce using rule 56 (logical_expression)

    Conflict between rule 56 and token KW_AND resolved as reduce (KW_AND < '>').
    Conflict between rule 56 and token KW_OR resolved as reduce (KW_OR < '>').
    Conflict between rule 56 and token LOR resolved as reduce (LOR < '>').
    Conflict between rule 56 and token LAND resolved as reduce (LAND < '>').
    Conflict between rule 56 and token NEQ resolved as reduce (NEQ < '>').
    Conflict between rule 56 and token EQ resolved as reduce (EQ < '>').
    Conflict between rule 56 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 56 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 56 and token '<' resolved as reduce (%left '<').
    Conflict between rule 56 and token '>' resolved as reduce (%left '>').
    Conflict between rule 56 and token '*' resolved as shift ('>' < '*').
    Conflict between rule 56 and token '/' resolved as shift ('>' < '/').
    Conflict between rule 56 and token MOD resolved as shift ('>' < MOD).
    Conflict between rule 56 and token KW_MOD resolved as shift ('>' < KW_MOD).
    Conflict between rule 56 and token '-' resolved as shift ('>' < '-').
    Conflict between rule 56 and token '+' resolved as shift ('>' < '+').
    Conflict between rule 56 and token POW resolved as shift ('>' < POW).


State 191

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   47                | expression '*' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, ')', ']', ';', ',']
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    '-'  shift, and go to state 153
    '+'  shift, and go to state 154
    POW  shift, and go to state 155

    $default  reduce using rule 47 (math_expression)

    Conflict between rule 47 and token KW_AND resolved as reduce (KW_AND < '*').
    Conflict between rule 47 and token KW_OR resolved as reduce (KW_OR < '*').
    Conflict between rule 47 and token LOR resolved as reduce (LOR < '*').
    Conflict between rule 47 and token LAND resolved as reduce (LAND < '*').
    Conflict between rule 47 and token NEQ resolved as reduce (NEQ < '*').
    Conflict between rule 47 and token EQ resolved as reduce (EQ < '*').
    Conflict between rule 47 and token LEQ resolved as reduce (LEQ < '*').
    Conflict between rule 47 and token GEQ resolved as reduce (GEQ < '*').
    Conflict between rule 47 and token '<' resolved as reduce ('<' < '*').
    Conflict between rule 47 and token '>' resolved as reduce ('>' < '*').
    Conflict between rule 47 and token '*' resolved as reduce (%left '*').
    Conflict between rule 47 and token '/' resolved as reduce (%left '/').
    Conflict between rule 47 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 47 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 47 and token '-' resolved as shift ('*' < '-').
    Conflict between rule 47 and token '+' resolved as shift ('*' < '+').
    Conflict between rule 47 and token POW resolved as shift ('*' < POW).


State 192

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   48                | expression '/' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, ')', ']', ';', ',']
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    '-'  shift, and go to state 153
    '+'  shift, and go to state 154
    POW  shift, and go to state 155

    $default  reduce using rule 48 (math_expression)

    Conflict between rule 48 and token KW_AND resolved as reduce (KW_AND < '/').
    Conflict between rule 48 and token KW_OR resolved as reduce (KW_OR < '/').
    Conflict between rule 48 and token LOR resolved as reduce (LOR < '/').
    Conflict between rule 48 and token LAND resolved as reduce (LAND < '/').
    Conflict between rule 48 and token NEQ resolved as reduce (NEQ < '/').
    Conflict between rule 48 and token EQ resolved as reduce (EQ < '/').
    Conflict between rule 48 and token LEQ resolved as reduce (LEQ < '/').
    Conflict between rule 48 and token GEQ resolved as reduce (GEQ < '/').
    Conflict between rule 48 and token '<' resolved as reduce ('<' < '/').
    Conflict between rule 48 and token '>' resolved as reduce ('>' < '/').
    Conflict between rule 48 and token '*' resolved as reduce (%left '*').
    Conflict between rule 48 and token '/' resolved as reduce (%left '/').
    Conflict between rule 48 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 48 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 48 and token '-' resolved as shift ('/' < '-').
    Conflict between rule 48 and token '+' resolved as shift ('/' < '+').
    Conflict between rule 48 and token POW resolved as shift ('/' < POW).


State 193

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   49                | expression MOD expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, ')', ']', ';', ',']
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    '-'  shift, and go to state 153
    '+'  shift, and go to state 154
    POW  shift, and go to state 155

    $default  reduce using rule 49 (math_expression)

    Conflict between rule 49 and token KW_AND resolved as reduce (KW_AND < MOD).
    Conflict between rule 49 and token KW_OR resolved as reduce (KW_OR < MOD).
    Conflict between rule 49 and token LOR resolved as reduce (LOR < MOD).
    Conflict between rule 49 and token LAND resolved as reduce (LAND < MOD).
    Conflict between rule 49 and token NEQ resolved as reduce (NEQ < MOD).
    Conflict between rule 49 and token EQ resolved as reduce (EQ < MOD).
    Conflict between rule 49 and token LEQ resolved as reduce (LEQ < MOD).
    Conflict between rule 49 and token GEQ resolved as reduce (GEQ < MOD).
    Conflict between rule 49 and token '<' resolved as reduce ('<' < MOD).
    Conflict between rule 49 and token '>' resolved as reduce ('>' < MOD).
    Conflict between rule 49 and token '*' resolved as reduce (%left '*').
    Conflict between rule 49 and token '/' resolved as reduce (%left '/').
    Conflict between rule 49 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 49 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 49 and token '-' resolved as shift (MOD < '-').
    Conflict between rule 49 and token '+' resolved as shift (MOD < '+').
    Conflict between rule 49 and token POW resolved as shift (MOD < POW).


State 194

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   50                | expression KW_MOD expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, ')', ']', ';', ',']
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    '-'  shift, and go to state 153
    '+'  shift, and go to state 154
    POW  shift, and go to state 155

    $default  reduce using rule 50 (math_expression)

    Conflict between rule 50 and token KW_AND resolved as reduce (KW_AND < KW_MOD).
    Conflict between rule 50 and token KW_OR resolved as reduce (KW_OR < KW_MOD).
    Conflict between rule 50 and token LOR resolved as reduce (LOR < KW_MOD).
    Conflict between rule 50 and token LAND resolved as reduce (LAND < KW_MOD).
    Conflict between rule 50 and token NEQ resolved as reduce (NEQ < KW_MOD).
    Conflict between rule 50 and token EQ resolved as reduce (EQ < KW_MOD).
    Conflict between rule 50 and token LEQ resolved as reduce (LEQ < KW_MOD).
    Conflict between rule 50 and token GEQ resolved as reduce (GEQ < KW_MOD).
    Conflict between rule 50 and token '<' resolved as reduce ('<' < KW_MOD).
    Conflict between rule 50 and token '>' resolved as reduce ('>' < KW_MOD).
    Conflict between rule 50 and token '*' resolved as reduce (%left '*').
    Conflict between rule 50 and token '/' resolved as reduce (%left '/').
    Conflict between rule 50 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 50 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 50 and token '-' resolved as shift (KW_MOD < '-').
    Conflict between rule 50 and token '+' resolved as shift (KW_MOD < '+').
    Conflict between rule 50 and token POW resolved as shift (KW_MOD < POW).


State 195

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   46                | expression '-' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ',']
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    POW  shift, and go to state 155

    $default  reduce using rule 46 (math_expression)

    Conflict between rule 46 and token KW_AND resolved as reduce (KW_AND < '-').
    Conflict between rule 46 and token KW_OR resolved as reduce (KW_OR < '-').
    Conflict between rule 46 and token LOR resolved as reduce (LOR < '-').
    Conflict between rule 46 and token LAND resolved as reduce (LAND < '-').
    Conflict between rule 46 and token NEQ resolved as reduce (NEQ < '-').
    Conflict between rule 46 and token EQ resolved as reduce (EQ < '-').
    Conflict between rule 46 and token LEQ resolved as reduce (LEQ < '-').
    Conflict between rule 46 and token GEQ resolved as reduce (GEQ < '-').
    Conflict between rule 46 and token '<' resolved as reduce ('<' < '-').
    Conflict between rule 46 and token '>' resolved as reduce ('>' < '-').
    Conflict between rule 46 and token '*' resolved as reduce ('*' < '-').
    Conflict between rule 46 and token '/' resolved as reduce ('/' < '-').
    Conflict between rule 46 and token MOD resolved as reduce (MOD < '-').
    Conflict between rule 46 and token KW_MOD resolved as reduce (KW_MOD < '-').
    Conflict between rule 46 and token '-' resolved as reduce (%left '-').
    Conflict between rule 46 and token '+' resolved as reduce (%left '+').
    Conflict between rule 46 and token POW resolved as shift ('-' < POW).


State 196

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   45                | expression '+' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ',']
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    POW  shift, and go to state 155

    $default  reduce using rule 45 (math_expression)

    Conflict between rule 45 and token KW_AND resolved as reduce (KW_AND < '+').
    Conflict between rule 45 and token KW_OR resolved as reduce (KW_OR < '+').
    Conflict between rule 45 and token LOR resolved as reduce (LOR < '+').
    Conflict between rule 45 and token LAND resolved as reduce (LAND < '+').
    Conflict between rule 45 and token NEQ resolved as reduce (NEQ < '+').
    Conflict between rule 45 and token EQ resolved as reduce (EQ < '+').
    Conflict between rule 45 and token LEQ resolved as reduce (LEQ < '+').
    Conflict between rule 45 and token GEQ resolved as reduce (GEQ < '+').
    Conflict between rule 45 and token '<' resolved as reduce ('<' < '+').
    Conflict between rule 45 and token '>' resolved as reduce ('>' < '+').
    Conflict between rule 45 and token '*' resolved as reduce ('*' < '+').
    Conflict between rule 45 and token '/' resolved as reduce ('/' < '+').
    Conflict between rule 45 and token MOD resolved as reduce (MOD < '+').
    Conflict between rule 45 and token KW_MOD resolved as reduce (KW_MOD < '+').
    Conflict between rule 45 and token '-' resolved as reduce (%left '-').
    Conflict between rule 45 and token '+' resolved as reduce (%left '+').
    Conflict between rule 45 and token POW resolved as shift ('+' < POW).


State 197

   44 math_expression: expression • POW expression
   44                | expression POW expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ',']
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression

    POW  shift, and go to state 155

    $default  reduce using rule 44 (math_expression)

    Conflict between rule 44 and token KW_AND resolved as reduce (KW_AND < POW).
    Conflict between rule 44 and token KW_OR resolved as reduce (KW_OR < POW).
    Conflict between rule 44 and token LOR resolved as reduce (LOR < POW).
    Conflict between rule 44 and token LAND resolved as reduce (LAND < POW).
    Conflict between rule 44 and token NEQ resolved as reduce (NEQ < POW).
    Conflict between rule 44 and token EQ resolved as reduce (EQ < POW).
    Conflict between rule 44 and token LEQ resolved as reduce (LEQ < POW).
    Conflict between rule 44 and token GEQ resolved as reduce (GEQ < POW).
    Conflict between rule 44 and token '<' resolved as reduce ('<' < POW).
    Conflict between rule 44 and token '>' resolved as reduce ('>' < POW).
    Conflict between rule 44 and token '*' resolved as reduce ('*' < POW).
    Conflict between rule 44 and token '/' resolved as reduce ('/' < POW).
    Conflict between rule 44 and token MOD resolved as reduce (MOD < POW).
    Conflict between rule 44 and token KW_MOD resolved as reduce (KW_MOD < POW).
    Conflict between rule 44 and token '-' resolved as reduce ('-' < POW).
    Conflict between rule 44 and token '+' resolved as reduce ('+' < POW).
    Conflict between rule 44 and token POW resolved as shift (%right POW).


State 198

   96 function_header: TK_IDENTIFIER '(' function_arg ')' '-' • '>' data_type

    '>'  shift, and go to state 209


State 199

   44 math_expression: expression • POW expression
   45                | expression • '+' expression
   46                | expression • '-' expression
   47                | expression • '*' expression
   48                | expression • '/' expression
   49                | expression • MOD expression
   50                | expression • KW_MOD expression
   51 logical_expression: expression • EQ expression
   52                   | expression • LEQ expression
   53                   | expression • GEQ expression
   54                   | expression • NEQ expression
   55                   | expression • '<' expression
   56                   | expression • '>' expression
   57                   | expression • LAND expression
   58                   | expression • KW_AND expression
   59                   | expression • LOR expression
   60                   | expression • KW_OR expression
   95 function_arg: function_arg ',' expression •  [')', ',']

    KW_AND  shift, and go to state 139
    KW_OR   shift, and go to state 140
    LOR     shift, and go to state 141
    LAND    shift, and go to state 142
    NEQ     shift, and go to state 143
    EQ      shift, and go to state 144
    LEQ     shift, and go to state 145
    GEQ     shift, and go to state 146
    '<'     shift, and go to state 147
    '>'     shift, and go to state 148
    '*'     shift, and go to state 149
    '/'     shift, and go to state 150
    MOD     shift, and go to state 151
    KW_MOD  shift, and go to state 152
    '-'     shift, and go to state 153
    '+'     shift, and go to state 154
    POW     shift, and go to state 155

    $default  reduce using rule 95 (function_arg)


State 200

   18 variable_declaration: TK_IDENTIFIER ':' data_type ',' variable_declaration •

    $default  reduce using rule 18 (variable_declaration)


State 201

   92 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR • TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type

    TK_IDENTIFIER  shift, and go to state 210


State 202

   79 command: TK_IDENTIFIER '(' function_arg ')' ';' •

    $default  reduce using rule 79 (command)


State 203

   69 command: TK_IDENTIFIER brackets '=' expression ';' •

    $default  reduce using rule 69 (command)


State 204

   64 brackets: brackets '[' expression ']' •

    $default  reduce using rule 64 (brackets)


State 205

   65 commands: • command commands
   66         | • command
   67 command: • ';'
   68        | • variable_assignement
   69        | • TK_IDENTIFIER brackets '=' expression ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   87 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   87             | KW_IF '(' logical_expression ')' ':' • commands KW_ENDIF
   88             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   88             | KW_IF '(' logical_expression ')' ':' • commands KW_ELSE ':' commands KW_ENDIF
   89 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   90              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   91 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   92 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type
   93 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 35
    KW_IF          shift, and go to state 36
    KW_FOR         shift, and go to state 37
    KW_WHILE       shift, and go to state 38
    KW_BREAK       shift, and go to state 39
    KW_RETURN      shift, and go to state 40
    KW_CONTINUE    shift, and go to state 41
    ';'            shift, and go to state 42

    commands              go to state 211
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51


State 206

   89 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER • ':' TK_NUMBER ']' commands KW_ENDFOR
   90              | KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER • ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR

    ':'  shift, and go to state 212


State 207

   93 while_statement: KW_WHILE '(' logical_expression ')' commands • KW_ENDWHILE

    KW_ENDWHILE  shift, and go to state 213


State 208

   33 expression: TK_IDENTIFIER '(' function_arg ')' •

    $default  reduce using rule 33 (expression)


State 209

   19 data_type: • basic_data_type
   20          | • composite_data_type
   21 basic_data_type: • KW_INTEGER
   22                | • KW_BOOL
   23                | • KW_SCALAR
   24                | • KW_STR
   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   96 function_header: TK_IDENTIFIER '(' function_arg ')' '-' '>' • data_type

    KW_INTEGER  shift, and go to state 107
    KW_SCALAR   shift, and go to state 108
    KW_STR      shift, and go to state 109
    KW_BOOL     shift, and go to state 110
    KW_COMP     shift, and go to state 85

    data_type            go to state 214
    basic_data_type      go to state 112
    composite_data_type  go to state 113


State 210

   92 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER • ':' TK_NUMBER ']' ':' data_type

    ':'  shift, and go to state 215


State 211

   87 if_statement: KW_IF '(' logical_expression ')' ':' commands • KW_ENDIF
   88             | KW_IF '(' logical_expression ')' ':' commands • KW_ELSE ':' commands KW_ENDIF

    KW_ELSE   shift, and go to state 216
    KW_ENDIF  shift, and go to state 217


State 212

   89 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' • TK_NUMBER ']' commands KW_ENDFOR
   90              | KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' • TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR

    TK_NUMBER  shift, and go to state 218


State 213

   93 while_statement: KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE •

    $default  reduce using rule 93 (while_statement)


State 214

   96 function_header: TK_IDENTIFIER '(' function_arg ')' '-' '>' data_type •

    $default  reduce using rule 96 (function_header)


State 215

   92 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' • TK_NUMBER ']' ':' data_type

    TK_NUMBER  shift, and go to state 219


State 216

   88 if_statement: KW_IF '(' logical_expression ')' ':' commands KW_ELSE • ':' commands KW_ENDIF

    ':'  shift, and go to state 220


State 217

   87 if_statement: KW_IF '(' logical_expression ')' ':' commands KW_ENDIF •

    $default  reduce using rule 87 (if_statement)


State 218

   89 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER • ']' commands KW_ENDFOR
   90              | KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER • ':' TK_NUMBER ']' commands KW_ENDFOR

    ']'  shift, and go to state 221
    ':'  shift, and go to state 222


State 219

   92 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER • ']' ':' data_type

    ']'  shift, and go to state 223


State 220

   65 commands: • command commands
   66         | • command
   67 command: • ';'
   68        | • variable_assignement
   69        | • TK_IDENTIFIER brackets '=' expression ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   87 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   88             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   88             | KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' • commands KW_ENDIF
   89 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   90              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   91 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   92 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type
   93 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 35
    KW_IF          shift, and go to state 36
    KW_FOR         shift, and go to state 37
    KW_WHILE       shift, and go to state 38
    KW_BREAK       shift, and go to state 39
    KW_RETURN      shift, and go to state 40
    KW_CONTINUE    shift, and go to state 41
    ';'            shift, and go to state 42

    commands              go to state 224
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51


State 221

   65 commands: • command commands
   66         | • command
   67 command: • ';'
   68        | • variable_assignement
   69        | • TK_IDENTIFIER brackets '=' expression ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   87 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   88             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   89 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   89              | KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' • commands KW_ENDFOR
   90              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   91 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   92 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type
   93 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 35
    KW_IF          shift, and go to state 36
    KW_FOR         shift, and go to state 37
    KW_WHILE       shift, and go to state 38
    KW_BREAK       shift, and go to state 39
    KW_RETURN      shift, and go to state 40
    KW_CONTINUE    shift, and go to state 41
    ';'            shift, and go to state 42

    commands              go to state 225
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51


State 222

   90 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' • TK_NUMBER ']' commands KW_ENDFOR

    TK_NUMBER  shift, and go to state 226


State 223

   92 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' • ':' data_type

    ':'  shift, and go to state 227


State 224

   88 if_statement: KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands • KW_ENDIF

    KW_ENDIF  shift, and go to state 228


State 225

   89 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands • KW_ENDFOR

    KW_ENDFOR  shift, and go to state 229


State 226

   90 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER • ']' commands KW_ENDFOR

    ']'  shift, and go to state 230


State 227

   19 data_type: • basic_data_type
   20          | • composite_data_type
   21 basic_data_type: • KW_INTEGER
   22                | • KW_BOOL
   23                | • KW_SCALAR
   24                | • KW_STR
   25 composite_data_type: • KW_COMP TK_IDENTIFIER
   92 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' • data_type

    KW_INTEGER  shift, and go to state 107
    KW_SCALAR   shift, and go to state 108
    KW_STR      shift, and go to state 109
    KW_BOOL     shift, and go to state 110
    KW_COMP     shift, and go to state 85

    data_type            go to state 231
    basic_data_type      go to state 112
    composite_data_type  go to state 113


State 228

   88 if_statement: KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF •

    $default  reduce using rule 88 (if_statement)


State 229

   89 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR •

    $default  reduce using rule 89 (for_statement)


State 230

   65 commands: • command commands
   66         | • command
   67 command: • ';'
   68        | • variable_assignement
   69        | • TK_IDENTIFIER brackets '=' expression ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   87 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   88             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   89 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   90              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   90              | KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' • commands KW_ENDFOR
   91 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   92 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type
   93 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 35
    KW_IF          shift, and go to state 36
    KW_FOR         shift, and go to state 37
    KW_WHILE       shift, and go to state 38
    KW_BREAK       shift, and go to state 39
    KW_RETURN      shift, and go to state 40
    KW_CONTINUE    shift, and go to state 41
    ';'            shift, and go to state 42

    commands              go to state 232
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51


State 231

   92 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' TK_NUMBER ']' ':' data_type •

    $default  reduce using rule 92 (compound_array_i)


State 232

   90 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands • KW_ENDFOR

    KW_ENDFOR  shift, and go to state 233


State 233

   90 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR •

    $default  reduce using rule 90 (for_statement)
