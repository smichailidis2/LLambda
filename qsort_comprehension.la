-- This is a program that implements and tests the quicksort algorithm
-- to sort an array of integers.

-- Global variable use by the random number generator function.
next_random:integer;

-- A simple random number generator.
-- Change the global variable next_random 
-- to produce a different sequence of pseudorandom numbers.

def next()->integer:
    next_random = (next_random * 1103515245 + 12345) % 2147483648;
    if (next_random<0):
        next_random = -next_random;
    endif;
    return next_random;
enddef;

-- Swap the elements of array a at positions i and j
-- assuming that i and j are valid indices
def swap(a[]:scalar, i:integer, j:integer):
    temp:scalar;
    temp = a[i];
    a[i] = a[j];
    a[j] = temp;
enddef;

-- Impelementation of the quick sort algorithm
def quickFSort(a[]:scalar, low:integer, high:integer):
    pivot, i, j : integer;
    if (low < high):
        pivot = low;
        i = low;
        j = high;
        while (i < j):
            while(a[i] <= a[pivot] and i < high):
                i = i+1;
            endwhile;
            while(a[j] > a[pivot]):
                j = j-1;
            endwhile;
            if (i < j):
                swap(a,i,j);
            endif;
        endwhile;
        swap(a,pivot,j);
        quickFSort(a, low, j - 1);
        quickFSort(a, j + 1, high);
    endif;
enddef;

-- Print contents of an array of integers
def printArray(a[]:integer, size:integer):
    for i in [0:size]:
        writeInteger(a[i]);
        if (i==size-1):
            continue;
        endif;
        writeStr(", ");
    endfor;
    writeStr("\n");
enddef;

-- Print contents of an array of scalars
def printFArray(a[]:scalar, size:integer):
    for i in [0:size]:
        writeScalar(a[i]);
        if (i==size-1):
            continue;
        endif;
        writeStr(", ");
    endfor;
    writeStr("\n");
enddef;

-- Test quickSort
def main():
    const aSize = 100:integer;

    writeStr("Give a seed for the random number generator: ");
    readInteger(next_random);

    -- Create an array of random numbers from 0 to 999 using comprehension
    a := [next()%1000 for i:100]:integer;
    
    -- Create an array for half values of a using comprehension
    f := [x/2.0 for x:integer in a of 100]: scalar;
    
    writeStr("Random array generated: ");
    printFArray(f,aSize);

    quickFSort(f,0,aSize-1);

    writeStr("Sorted array: ");
    printFArray(f,aSize);
enddef;