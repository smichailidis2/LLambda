Terminals unused in grammar

    '.'


Grammar

    0 $accept: input $end

    1 input: PROGRAM_START

    2 PROGRAM_START: pdeclare

    3 pdeclare: code s_main_s code

    4 code: ε
    5     | code constant_declaration ';'
    6     | code function_declaration ';'
    7     | code variable_declaration ';'

    8 s_main_s: KW_DEF KW_MAIN '(' ')' ':' main_body KW_ENDDEF ';'

    9 main_body: commands

   10 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER ':' KW_INTEGER
   11                     | KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL ':' KW_SCALAR
   12                     | KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING ':' KW_STR
   13                     | KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE ':' KW_BOOL
   14                     | KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE ':' KW_BOOL

   15 function_declaration: KW_DEF function_header function_body KW_ENDDEF

   16 variable_declaration: TK_IDENTIFIER ':' data_type
   17                     | array_var ':' data_type
   18                     | TK_IDENTIFIER ',' variable_declaration
   19                     | array_var ',' variable_declaration

   20 array_var: TK_IDENTIFIER brackets

   21 data_type: KW_INTEGER
   22          | KW_BOOL
   23          | KW_SCALAR
   24          | KW_STR

   25 expression: TK_NUMBER
   26           | TK_REAL
   27           | TK_CHAR
   28           | TK_STRING
   29           | TK_DIGIT
   30           | TK_IDENTIFIER
   31           | TK_IDENTIFIER '(' function_arg ')'
   32           | TK_IDENTIFIER '(' ')'
   33           | TK_IDENTIFIER brackets
   34           | KW_TRUE
   35           | KW_FALSE
   36           | '(' expression ')'
   37           | math_expression
   38           | logical_expression
   39           | '+' expression
   40           | '-' expression

   41 math_expression: expression POW expression
   42                | expression '+' expression
   43                | expression '-' expression
   44                | expression '*' expression
   45                | expression '/' expression
   46                | expression MOD expression
   47                | expression KW_MOD expression

   48 logical_expression: expression EQ expression
   49                   | expression LEQ expression
   50                   | expression GEQ expression
   51                   | expression NEQ expression
   52                   | expression '<' expression
   53                   | expression '>' expression
   54                   | expression LAND expression
   55                   | expression KW_AND expression
   56                   | expression LOR expression
   57                   | expression KW_OR expression
   58                   | '!' expression
   59                   | KW_NOT expression

   60 brackets: '[' expression ']'
   61         | brackets '[' expression ']'
   62         | '[' ']'

   63 commands: command commands
   64         | command

   65 command: ';'
   66        | variable_assignement ';'
   67        | variable_declaration ';'
   68        | constant_declaration ';'
   69        | array_assignement ';'
   70        | if_statement ';'
   71        | for_statement ';'
   72        | compound_array_i ';'
   73        | compound_array_a ';'
   74        | while_statement ';'
   75        | KW_BREAK ';'
   76        | KW_CONTINUE ';'
   77        | KW_RETURN ';'
   78        | KW_RETURN expression ';'
   79        | TK_IDENTIFIER '(' function_arg ')' ';'
   80        | TK_IDENTIFIER '(' ')' ';'
   81        | TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'

   86 variable_assignement: TK_IDENTIFIER SIMPLE_ASSIGN expression

   87 array_assignement: TK_IDENTIFIER brackets SIMPLE_ASSIGN expression

   88 if_statement: KW_IF '(' expression ')' ':' commands KW_ENDIF
   89             | KW_IF '(' expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF

   90 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ']' ':' commands KW_ENDFOR
   91              | KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ':' expression ']' commands KW_ENDFOR

   92 compound_array_a: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type

   93 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type

   94 while_statement: KW_WHILE '(' expression ')' ':' commands KW_ENDWHILE

   95 function_arg: expression
   96             | function_arg ',' expression

   97 function_header: TK_IDENTIFIER '(' args ')' '-' '>' data_type ':'
   98                | TK_IDENTIFIER '(' ')' '-' '>' data_type ':'
   99                | TK_IDENTIFIER '(' args ')' '-' '>' KW_VOID ':'
  100                | TK_IDENTIFIER '(' ')' '-' '>' KW_VOID ':'
  101                | TK_IDENTIFIER '(' args ')' ':'
  102                | TK_IDENTIFIER '(' ')' ':'

  103 function_body: commands

  104 args: TK_IDENTIFIER ':' data_type
  105     | TK_IDENTIFIER ':' data_type ',' args
  106     | TK_IDENTIFIER '[' ']' ':' data_type
  107     | TK_IDENTIFIER '[' ']' ':' data_type ',' args


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 58
    '(' (40) 8 31 32 36 79 80 88 89 94 97 98 99 100 101 102
    ')' (41) 8 31 32 36 79 80 88 89 94 97 98 99 100 101 102
    '*' (42) 44
    '+' (43) 39 42
    ',' (44) 18 19 96 105 107
    '-' (45) 40 43 97 98 99 100
    '.' (46)
    '/' (47) 45
    ':' (58) 8 10 11 12 13 14 16 17 88 89 90 91 92 93 94 97 98 99 100 101 102 104 105 106 107
    ';' (59) 5 6 7 8 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85
    '<' (60) 52
    '>' (62) 53 97 98 99 100
    '[' (91) 60 61 62 90 91 92 93 106 107
    ']' (93) 60 61 62 90 91 92 93 106 107
    error (256)
    TK_IDENTIFIER <strng> (258) 10 11 12 13 14 16 18 20 30 31 32 33 79 80 81 82 83 84 85 86 87 90 91 92 93 97 98 99 100 101 102 104 105 106 107
    TK_CHAR <strng> (259) 27
    TK_STRING <strng> (260) 12 28
    TK_REAL <strng> (261) 11 26
    TK_DIGIT <strng> (262) 29
    TK_NUMBER <strng> (263) 10 25
    KW_MAIN (264) 8
    KW_INTEGER <strng> (265) 10 21
    KW_SCALAR <strng> (266) 11 23
    KW_STR <strng> (267) 12 24
    KW_BOOL <strng> (268) 13 14 22
    KW_TRUE <strng> (269) 13 34
    KW_FALSE <strng> (270) 14 35
    KW_CONST (271) 10 11 12 13 14
    KW_IF (272) 88 89
    KW_ELSE (273) 89
    KW_ENDIF (274) 88 89
    KW_FOR (275) 90 91 92 93
    KW_IN (276) 90 91 92
    KW_ENDFOR (277) 90 91
    KW_WHILE (278) 94
    KW_ENDWHILE (279) 94
    KW_BREAK (280) 75
    KW_RETURN (281) 77 78
    KW_CONTINUE (282) 76
    KW_AND (283) 55
    KW_OR (284) 57
    KW_OF (285) 92
    KW_VOID (286) 99 100
    KW_DEF (287) 8 15
    KW_ENDDEF (288) 8 15
    ADD_ASSIGN (289) 81
    SUB_ASSIGN (290) 82
    MULT_ASSIGN (291) 83
    DIV_ASSIGN (292) 84
    MOD_ASSIGN (293) 85
    ASSIGN (294) 92 93
    SIMPLE_ASSIGN (295) 10 11 12 13 14 86 87
    LOR (296) 56
    LAND (297) 54
    KW_NOT (298) 59
    NEQ (299) 51
    EQ (300) 48
    LEQ (301) 49
    GEQ (302) 50
    MOD (303) 46
    KW_MOD (304) 47
    POW (305) 41


Nonterminals, with rules where they appear

    $accept (66)
        on left: 0
    input (67)
        on left: 1
        on right: 0
    PROGRAM_START <strng> (68)
        on left: 2
        on right: 1
    pdeclare <strng> (69)
        on left: 3
        on right: 2
    code <strng> (70)
        on left: 4 5 6 7
        on right: 3 5 6 7
    s_main_s <strng> (71)
        on left: 8
        on right: 3
    main_body <strng> (72)
        on left: 9
        on right: 8
    constant_declaration <strng> (73)
        on left: 10 11 12 13 14
        on right: 5 68
    function_declaration <strng> (74)
        on left: 15
        on right: 6
    variable_declaration <strng> (75)
        on left: 16 17 18 19
        on right: 7 18 19 67
    array_var <strng> (76)
        on left: 20
        on right: 17 19
    data_type <strng> (77)
        on left: 21 22 23 24
        on right: 16 17 92 93 97 98 104 105 106 107
    expression <strng> (78)
        on left: 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
        on right: 36 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 78 86 87 88 89 90 91 92 93 94 95 96
    math_expression <strng> (79)
        on left: 41 42 43 44 45 46 47
        on right: 37
    logical_expression <strng> (80)
        on left: 48 49 50 51 52 53 54 55 56 57 58 59
        on right: 38
    brackets <strng> (81)
        on left: 60 61 62
        on right: 20 33 61 87
    commands <strng> (82)
        on left: 63 64
        on right: 9 63 88 89 90 91 94 103
    command <strng> (83)
        on left: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85
        on right: 63 64
    variable_assignement <strng> (84)
        on left: 86
        on right: 66
    array_assignement <strng> (85)
        on left: 87
        on right: 69
    if_statement <strng> (86)
        on left: 88 89
        on right: 70
    for_statement <strng> (87)
        on left: 90 91
        on right: 71
    compound_array_a <strng> (88)
        on left: 92
        on right: 73
    compound_array_i <strng> (89)
        on left: 93
        on right: 72
    while_statement <strng> (90)
        on left: 94
        on right: 74
    function_arg <strng> (91)
        on left: 95 96
        on right: 31 79 96
    function_header <strng> (92)
        on left: 97 98 99 100 101 102
        on right: 15
    function_body <strng> (93)
        on left: 103
        on right: 15
    args <strng> (94)
        on left: 104 105 106 107
        on right: 97 99 101 105 107


State 0

    0 $accept: • input $end
    1 input: • PROGRAM_START
    2 PROGRAM_START: • pdeclare
    3 pdeclare: • code s_main_s code
    4 code: ε •
    5     | • code constant_declaration ';'
    6     | • code function_declaration ';'
    7     | • code variable_declaration ';'

    $default  reduce using rule 4 (code)

    input          go to state 1
    PROGRAM_START  go to state 2
    pdeclare       go to state 3
    code           go to state 4


State 1

    0 $accept: input • $end

    $end  shift, and go to state 5


State 2

    1 input: PROGRAM_START •

    $default  reduce using rule 1 (input)


State 3

    2 PROGRAM_START: pdeclare •

    $default  reduce using rule 2 (PROGRAM_START)


State 4

    3 pdeclare: code • s_main_s code
    5 code: code • constant_declaration ';'
    6     | code • function_declaration ';'
    7     | code • variable_declaration ';'
    8 s_main_s: • KW_DEF KW_MAIN '(' ')' ':' main_body KW_ENDDEF ';'
   10 constant_declaration: • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER ':' KW_INTEGER
   11                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL ':' KW_SCALAR
   12                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING ':' KW_STR
   13                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE ':' KW_BOOL
   14                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE ':' KW_BOOL
   15 function_declaration: • KW_DEF function_header function_body KW_ENDDEF
   16 variable_declaration: • TK_IDENTIFIER ':' data_type
   17                     | • array_var ':' data_type
   18                     | • TK_IDENTIFIER ',' variable_declaration
   19                     | • array_var ',' variable_declaration
   20 array_var: • TK_IDENTIFIER brackets

    TK_IDENTIFIER  shift, and go to state 6
    KW_CONST       shift, and go to state 7
    KW_DEF         shift, and go to state 8

    s_main_s              go to state 9
    constant_declaration  go to state 10
    function_declaration  go to state 11
    variable_declaration  go to state 12
    array_var             go to state 13


State 5

    0 $accept: input $end •

    $default  accept


State 6

   16 variable_declaration: TK_IDENTIFIER • ':' data_type
   18                     | TK_IDENTIFIER • ',' variable_declaration
   20 array_var: TK_IDENTIFIER • brackets
   60 brackets: • '[' expression ']'
   61         | • brackets '[' expression ']'
   62         | • '[' ']'

    '['  shift, and go to state 14
    ':'  shift, and go to state 15
    ','  shift, and go to state 16

    brackets  go to state 17


State 7

   10 constant_declaration: KW_CONST • TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER ':' KW_INTEGER
   11                     | KW_CONST • TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL ':' KW_SCALAR
   12                     | KW_CONST • TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING ':' KW_STR
   13                     | KW_CONST • TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE ':' KW_BOOL
   14                     | KW_CONST • TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE ':' KW_BOOL

    TK_IDENTIFIER  shift, and go to state 18


State 8

    8 s_main_s: KW_DEF • KW_MAIN '(' ')' ':' main_body KW_ENDDEF ';'
   15 function_declaration: KW_DEF • function_header function_body KW_ENDDEF
   97 function_header: • TK_IDENTIFIER '(' args ')' '-' '>' data_type ':'
   98                | • TK_IDENTIFIER '(' ')' '-' '>' data_type ':'
   99                | • TK_IDENTIFIER '(' args ')' '-' '>' KW_VOID ':'
  100                | • TK_IDENTIFIER '(' ')' '-' '>' KW_VOID ':'
  101                | • TK_IDENTIFIER '(' args ')' ':'
  102                | • TK_IDENTIFIER '(' ')' ':'

    TK_IDENTIFIER  shift, and go to state 19
    KW_MAIN        shift, and go to state 20

    function_header  go to state 21


State 9

    3 pdeclare: code s_main_s • code
    4 code: ε •
    5     | • code constant_declaration ';'
    6     | • code function_declaration ';'
    7     | • code variable_declaration ';'

    $default  reduce using rule 4 (code)

    code  go to state 22


State 10

    5 code: code constant_declaration • ';'

    ';'  shift, and go to state 23


State 11

    6 code: code function_declaration • ';'

    ';'  shift, and go to state 24


State 12

    7 code: code variable_declaration • ';'

    ';'  shift, and go to state 25


State 13

   17 variable_declaration: array_var • ':' data_type
   19                     | array_var • ',' variable_declaration

    ':'  shift, and go to state 26
    ','  shift, and go to state 27


State 14

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   60 brackets: '[' • expression ']'
   62         | '[' • ']'

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40
    ']'            shift, and go to state 41

    expression          go to state 42
    math_expression     go to state 43
    logical_expression  go to state 44


State 15

   16 variable_declaration: TK_IDENTIFIER ':' • data_type
   21 data_type: • KW_INTEGER
   22          | • KW_BOOL
   23          | • KW_SCALAR
   24          | • KW_STR

    KW_INTEGER  shift, and go to state 45
    KW_SCALAR   shift, and go to state 46
    KW_STR      shift, and go to state 47
    KW_BOOL     shift, and go to state 48

    data_type  go to state 49


State 16

   16 variable_declaration: • TK_IDENTIFIER ':' data_type
   17                     | • array_var ':' data_type
   18                     | • TK_IDENTIFIER ',' variable_declaration
   18                     | TK_IDENTIFIER ',' • variable_declaration
   19                     | • array_var ',' variable_declaration
   20 array_var: • TK_IDENTIFIER brackets

    TK_IDENTIFIER  shift, and go to state 6

    variable_declaration  go to state 50
    array_var             go to state 13


State 17

   20 array_var: TK_IDENTIFIER brackets •  [':', ',']
   61 brackets: brackets • '[' expression ']'

    '['  shift, and go to state 51

    $default  reduce using rule 20 (array_var)


State 18

   10 constant_declaration: KW_CONST TK_IDENTIFIER • SIMPLE_ASSIGN TK_NUMBER ':' KW_INTEGER
   11                     | KW_CONST TK_IDENTIFIER • SIMPLE_ASSIGN TK_REAL ':' KW_SCALAR
   12                     | KW_CONST TK_IDENTIFIER • SIMPLE_ASSIGN TK_STRING ':' KW_STR
   13                     | KW_CONST TK_IDENTIFIER • SIMPLE_ASSIGN KW_TRUE ':' KW_BOOL
   14                     | KW_CONST TK_IDENTIFIER • SIMPLE_ASSIGN KW_FALSE ':' KW_BOOL

    SIMPLE_ASSIGN  shift, and go to state 52


State 19

   97 function_header: TK_IDENTIFIER • '(' args ')' '-' '>' data_type ':'
   98                | TK_IDENTIFIER • '(' ')' '-' '>' data_type ':'
   99                | TK_IDENTIFIER • '(' args ')' '-' '>' KW_VOID ':'
  100                | TK_IDENTIFIER • '(' ')' '-' '>' KW_VOID ':'
  101                | TK_IDENTIFIER • '(' args ')' ':'
  102                | TK_IDENTIFIER • '(' ')' ':'

    '('  shift, and go to state 53


State 20

    8 s_main_s: KW_DEF KW_MAIN • '(' ')' ':' main_body KW_ENDDEF ';'

    '('  shift, and go to state 54


State 21

   10 constant_declaration: • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER ':' KW_INTEGER
   11                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL ':' KW_SCALAR
   12                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING ':' KW_STR
   13                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE ':' KW_BOOL
   14                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE ':' KW_BOOL
   15 function_declaration: KW_DEF function_header • function_body KW_ENDDEF
   16 variable_declaration: • TK_IDENTIFIER ':' data_type
   17                     | • array_var ':' data_type
   18                     | • TK_IDENTIFIER ',' variable_declaration
   19                     | • array_var ',' variable_declaration
   20 array_var: • TK_IDENTIFIER brackets
   63 commands: • command commands
   64         | • command
   65 command: • ';'
   66        | • variable_assignement ';'
   67        | • variable_declaration ';'
   68        | • constant_declaration ';'
   69        | • array_assignement ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER SIMPLE_ASSIGN expression
   87 array_assignement: • TK_IDENTIFIER brackets SIMPLE_ASSIGN expression
   88 if_statement: • KW_IF '(' expression ')' ':' commands KW_ENDIF
   89             | • KW_IF '(' expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   90 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ']' ':' commands KW_ENDFOR
   91              | • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ':' expression ']' commands KW_ENDFOR
   92 compound_array_a: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   94 while_statement: • KW_WHILE '(' expression ')' ':' commands KW_ENDWHILE
  103 function_body: • commands

    TK_IDENTIFIER  shift, and go to state 55
    KW_CONST       shift, and go to state 7
    KW_IF          shift, and go to state 56
    KW_FOR         shift, and go to state 57
    KW_WHILE       shift, and go to state 58
    KW_BREAK       shift, and go to state 59
    KW_RETURN      shift, and go to state 60
    KW_CONTINUE    shift, and go to state 61
    ';'            shift, and go to state 62

    constant_declaration  go to state 63
    variable_declaration  go to state 64
    array_var             go to state 13
    commands              go to state 65
    command               go to state 66
    variable_assignement  go to state 67
    array_assignement     go to state 68
    if_statement          go to state 69
    for_statement         go to state 70
    compound_array_a      go to state 71
    compound_array_i      go to state 72
    while_statement       go to state 73
    function_body         go to state 74


State 22

    3 pdeclare: code s_main_s code •  [$end]
    5 code: code • constant_declaration ';'
    6     | code • function_declaration ';'
    7     | code • variable_declaration ';'
   10 constant_declaration: • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER ':' KW_INTEGER
   11                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL ':' KW_SCALAR
   12                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING ':' KW_STR
   13                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE ':' KW_BOOL
   14                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE ':' KW_BOOL
   15 function_declaration: • KW_DEF function_header function_body KW_ENDDEF
   16 variable_declaration: • TK_IDENTIFIER ':' data_type
   17                     | • array_var ':' data_type
   18                     | • TK_IDENTIFIER ',' variable_declaration
   19                     | • array_var ',' variable_declaration
   20 array_var: • TK_IDENTIFIER brackets

    TK_IDENTIFIER  shift, and go to state 6
    KW_CONST       shift, and go to state 7
    KW_DEF         shift, and go to state 75

    $default  reduce using rule 3 (pdeclare)

    constant_declaration  go to state 10
    function_declaration  go to state 11
    variable_declaration  go to state 12
    array_var             go to state 13


State 23

    5 code: code constant_declaration ';' •

    $default  reduce using rule 5 (code)


State 24

    6 code: code function_declaration ';' •

    $default  reduce using rule 6 (code)


State 25

    7 code: code variable_declaration ';' •

    $default  reduce using rule 7 (code)


State 26

   17 variable_declaration: array_var ':' • data_type
   21 data_type: • KW_INTEGER
   22          | • KW_BOOL
   23          | • KW_SCALAR
   24          | • KW_STR

    KW_INTEGER  shift, and go to state 45
    KW_SCALAR   shift, and go to state 46
    KW_STR      shift, and go to state 47
    KW_BOOL     shift, and go to state 48

    data_type  go to state 76


State 27

   16 variable_declaration: • TK_IDENTIFIER ':' data_type
   17                     | • array_var ':' data_type
   18                     | • TK_IDENTIFIER ',' variable_declaration
   19                     | • array_var ',' variable_declaration
   19                     | array_var ',' • variable_declaration
   20 array_var: • TK_IDENTIFIER brackets

    TK_IDENTIFIER  shift, and go to state 6

    variable_declaration  go to state 77
    array_var             go to state 13


State 28

   30 expression: TK_IDENTIFIER •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', POW, ')', ']', ';', ':', ',']
   31           | TK_IDENTIFIER • '(' function_arg ')'
   32           | TK_IDENTIFIER • '(' ')'
   33           | TK_IDENTIFIER • brackets
   60 brackets: • '[' expression ']'
   61         | • brackets '[' expression ']'
   62         | • '[' ']'

    '('  shift, and go to state 78
    '['  shift, and go to state 14

    $default  reduce using rule 30 (expression)

    brackets  go to state 79


State 29

   27 expression: TK_CHAR •

    $default  reduce using rule 27 (expression)


State 30

   28 expression: TK_STRING •

    $default  reduce using rule 28 (expression)


State 31

   26 expression: TK_REAL •

    $default  reduce using rule 26 (expression)


State 32

   29 expression: TK_DIGIT •

    $default  reduce using rule 29 (expression)


State 33

   25 expression: TK_NUMBER •

    $default  reduce using rule 25 (expression)


State 34

   34 expression: KW_TRUE •

    $default  reduce using rule 34 (expression)


State 35

   35 expression: KW_FALSE •

    $default  reduce using rule 35 (expression)


State 36

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   58                   | '!' • expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 80
    math_expression     go to state 43
    logical_expression  go to state 44


State 37

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   59                   | KW_NOT • expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 81
    math_expression     go to state 43
    logical_expression  go to state 44


State 38

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   40           | '-' • expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 82
    math_expression     go to state 43
    logical_expression  go to state 44


State 39

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   39           | '+' • expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 83
    math_expression     go to state 43
    logical_expression  go to state 44


State 40

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   36           | '(' • expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 84
    math_expression     go to state 43
    logical_expression  go to state 44


State 41

   62 brackets: '[' ']' •

    $default  reduce using rule 62 (brackets)


State 42

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   60 brackets: '[' expression • ']'

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101
    ']'     shift, and go to state 102


State 43

   37 expression: math_expression •

    $default  reduce using rule 37 (expression)


State 44

   38 expression: logical_expression •

    $default  reduce using rule 38 (expression)


State 45

   21 data_type: KW_INTEGER •

    $default  reduce using rule 21 (data_type)


State 46

   23 data_type: KW_SCALAR •

    $default  reduce using rule 23 (data_type)


State 47

   24 data_type: KW_STR •

    $default  reduce using rule 24 (data_type)


State 48

   22 data_type: KW_BOOL •

    $default  reduce using rule 22 (data_type)


State 49

   16 variable_declaration: TK_IDENTIFIER ':' data_type •

    $default  reduce using rule 16 (variable_declaration)


State 50

   18 variable_declaration: TK_IDENTIFIER ',' variable_declaration •

    $default  reduce using rule 18 (variable_declaration)


State 51

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   61 brackets: brackets '[' • expression ']'

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 103
    math_expression     go to state 43
    logical_expression  go to state 44


State 52

   10 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN • TK_NUMBER ':' KW_INTEGER
   11                     | KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN • TK_REAL ':' KW_SCALAR
   12                     | KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN • TK_STRING ':' KW_STR
   13                     | KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN • KW_TRUE ':' KW_BOOL
   14                     | KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN • KW_FALSE ':' KW_BOOL

    TK_STRING  shift, and go to state 104
    TK_REAL    shift, and go to state 105
    TK_NUMBER  shift, and go to state 106
    KW_TRUE    shift, and go to state 107
    KW_FALSE   shift, and go to state 108


State 53

   97 function_header: TK_IDENTIFIER '(' • args ')' '-' '>' data_type ':'
   98                | TK_IDENTIFIER '(' • ')' '-' '>' data_type ':'
   99                | TK_IDENTIFIER '(' • args ')' '-' '>' KW_VOID ':'
  100                | TK_IDENTIFIER '(' • ')' '-' '>' KW_VOID ':'
  101                | TK_IDENTIFIER '(' • args ')' ':'
  102                | TK_IDENTIFIER '(' • ')' ':'
  104 args: • TK_IDENTIFIER ':' data_type
  105     | • TK_IDENTIFIER ':' data_type ',' args
  106     | • TK_IDENTIFIER '[' ']' ':' data_type
  107     | • TK_IDENTIFIER '[' ']' ':' data_type ',' args

    TK_IDENTIFIER  shift, and go to state 109
    ')'            shift, and go to state 110

    args  go to state 111


State 54

    8 s_main_s: KW_DEF KW_MAIN '(' • ')' ':' main_body KW_ENDDEF ';'

    ')'  shift, and go to state 112


State 55

   16 variable_declaration: TK_IDENTIFIER • ':' data_type
   18                     | TK_IDENTIFIER • ',' variable_declaration
   20 array_var: TK_IDENTIFIER • brackets
   60 brackets: • '[' expression ']'
   61         | • brackets '[' expression ']'
   62         | • '[' ']'
   79 command: TK_IDENTIFIER • '(' function_arg ')' ';'
   80        | TK_IDENTIFIER • '(' ')' ';'
   81        | TK_IDENTIFIER • ADD_ASSIGN TK_IDENTIFIER ';'
   82        | TK_IDENTIFIER • SUB_ASSIGN TK_IDENTIFIER ';'
   83        | TK_IDENTIFIER • MULT_ASSIGN TK_IDENTIFIER ';'
   84        | TK_IDENTIFIER • DIV_ASSIGN TK_IDENTIFIER ';'
   85        | TK_IDENTIFIER • MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: TK_IDENTIFIER • SIMPLE_ASSIGN expression
   87 array_assignement: TK_IDENTIFIER • brackets SIMPLE_ASSIGN expression
   92 compound_array_a: TK_IDENTIFIER • ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: TK_IDENTIFIER • ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type

    ADD_ASSIGN     shift, and go to state 113
    SUB_ASSIGN     shift, and go to state 114
    MULT_ASSIGN    shift, and go to state 115
    DIV_ASSIGN     shift, and go to state 116
    MOD_ASSIGN     shift, and go to state 117
    ASSIGN         shift, and go to state 118
    SIMPLE_ASSIGN  shift, and go to state 119
    '('            shift, and go to state 120
    '['            shift, and go to state 14
    ':'            shift, and go to state 15
    ','            shift, and go to state 16

    brackets  go to state 121


State 56

   88 if_statement: KW_IF • '(' expression ')' ':' commands KW_ENDIF
   89             | KW_IF • '(' expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF

    '('  shift, and go to state 122


State 57

   90 for_statement: KW_FOR • TK_IDENTIFIER KW_IN '[' expression ':' expression ']' ':' commands KW_ENDFOR
   91              | KW_FOR • TK_IDENTIFIER KW_IN '[' expression ':' expression ':' expression ']' commands KW_ENDFOR

    TK_IDENTIFIER  shift, and go to state 123


State 58

   94 while_statement: KW_WHILE • '(' expression ')' ':' commands KW_ENDWHILE

    '('  shift, and go to state 124


State 59

   75 command: KW_BREAK • ';'

    ';'  shift, and go to state 125


State 60

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   77 command: KW_RETURN • ';'
   78        | KW_RETURN • expression ';'

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40
    ';'            shift, and go to state 126

    expression          go to state 127
    math_expression     go to state 43
    logical_expression  go to state 44


State 61

   76 command: KW_CONTINUE • ';'

    ';'  shift, and go to state 128


State 62

   65 command: ';' •

    $default  reduce using rule 65 (command)


State 63

   68 command: constant_declaration • ';'

    ';'  shift, and go to state 129


State 64

   67 command: variable_declaration • ';'

    ';'  shift, and go to state 130


State 65

  103 function_body: commands •

    $default  reduce using rule 103 (function_body)


State 66

   10 constant_declaration: • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER ':' KW_INTEGER
   11                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL ':' KW_SCALAR
   12                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING ':' KW_STR
   13                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE ':' KW_BOOL
   14                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE ':' KW_BOOL
   16 variable_declaration: • TK_IDENTIFIER ':' data_type
   17                     | • array_var ':' data_type
   18                     | • TK_IDENTIFIER ',' variable_declaration
   19                     | • array_var ',' variable_declaration
   20 array_var: • TK_IDENTIFIER brackets
   63 commands: • command commands
   63         | command • commands
   64         | • command
   64         | command •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE, KW_ENDDEF]
   65 command: • ';'
   66        | • variable_assignement ';'
   67        | • variable_declaration ';'
   68        | • constant_declaration ';'
   69        | • array_assignement ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER SIMPLE_ASSIGN expression
   87 array_assignement: • TK_IDENTIFIER brackets SIMPLE_ASSIGN expression
   88 if_statement: • KW_IF '(' expression ')' ':' commands KW_ENDIF
   89             | • KW_IF '(' expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   90 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ']' ':' commands KW_ENDFOR
   91              | • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ':' expression ']' commands KW_ENDFOR
   92 compound_array_a: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   94 while_statement: • KW_WHILE '(' expression ')' ':' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 55
    KW_CONST       shift, and go to state 7
    KW_IF          shift, and go to state 56
    KW_FOR         shift, and go to state 57
    KW_WHILE       shift, and go to state 58
    KW_BREAK       shift, and go to state 59
    KW_RETURN      shift, and go to state 60
    KW_CONTINUE    shift, and go to state 61
    ';'            shift, and go to state 62

    $default  reduce using rule 64 (commands)

    constant_declaration  go to state 63
    variable_declaration  go to state 64
    array_var             go to state 13
    commands              go to state 131
    command               go to state 66
    variable_assignement  go to state 67
    array_assignement     go to state 68
    if_statement          go to state 69
    for_statement         go to state 70
    compound_array_a      go to state 71
    compound_array_i      go to state 72
    while_statement       go to state 73


State 67

   66 command: variable_assignement • ';'

    ';'  shift, and go to state 132


State 68

   69 command: array_assignement • ';'

    ';'  shift, and go to state 133


State 69

   70 command: if_statement • ';'

    ';'  shift, and go to state 134


State 70

   71 command: for_statement • ';'

    ';'  shift, and go to state 135


State 71

   73 command: compound_array_a • ';'

    ';'  shift, and go to state 136


State 72

   72 command: compound_array_i • ';'

    ';'  shift, and go to state 137


State 73

   74 command: while_statement • ';'

    ';'  shift, and go to state 138


State 74

   15 function_declaration: KW_DEF function_header function_body • KW_ENDDEF

    KW_ENDDEF  shift, and go to state 139


State 75

   15 function_declaration: KW_DEF • function_header function_body KW_ENDDEF
   97 function_header: • TK_IDENTIFIER '(' args ')' '-' '>' data_type ':'
   98                | • TK_IDENTIFIER '(' ')' '-' '>' data_type ':'
   99                | • TK_IDENTIFIER '(' args ')' '-' '>' KW_VOID ':'
  100                | • TK_IDENTIFIER '(' ')' '-' '>' KW_VOID ':'
  101                | • TK_IDENTIFIER '(' args ')' ':'
  102                | • TK_IDENTIFIER '(' ')' ':'

    TK_IDENTIFIER  shift, and go to state 19

    function_header  go to state 21


State 76

   17 variable_declaration: array_var ':' data_type •

    $default  reduce using rule 17 (variable_declaration)


State 77

   19 variable_declaration: array_var ',' variable_declaration •

    $default  reduce using rule 19 (variable_declaration)


State 78

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   31           | TK_IDENTIFIER '(' • function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   32           | TK_IDENTIFIER '(' • ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   95 function_arg: • expression
   96             | • function_arg ',' expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40
    ')'            shift, and go to state 140

    expression          go to state 141
    math_expression     go to state 43
    logical_expression  go to state 44
    function_arg        go to state 142


State 79

   33 expression: TK_IDENTIFIER brackets •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', POW, ')', ']', ';', ':', ',']
   61 brackets: brackets • '[' expression ']'

    '['  shift, and go to state 51

    $default  reduce using rule 33 (expression)


State 80

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   58                   | '!' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, ')', ']', ';', ':', ',']

    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 58 (logical_expression)

    Conflict between rule 58 and token KW_AND resolved as reduce (KW_AND < '!').
    Conflict between rule 58 and token KW_OR resolved as reduce (KW_OR < '!').
    Conflict between rule 58 and token LOR resolved as reduce (LOR < '!').
    Conflict between rule 58 and token LAND resolved as reduce (LAND < '!').
    Conflict between rule 58 and token NEQ resolved as shift ('!' < NEQ).
    Conflict between rule 58 and token EQ resolved as shift ('!' < EQ).
    Conflict between rule 58 and token LEQ resolved as shift ('!' < LEQ).
    Conflict between rule 58 and token GEQ resolved as shift ('!' < GEQ).
    Conflict between rule 58 and token '<' resolved as shift ('!' < '<').
    Conflict between rule 58 and token '>' resolved as shift ('!' < '>').
    Conflict between rule 58 and token '*' resolved as shift ('!' < '*').
    Conflict between rule 58 and token '/' resolved as shift ('!' < '/').
    Conflict between rule 58 and token MOD resolved as shift ('!' < MOD).
    Conflict between rule 58 and token KW_MOD resolved as shift ('!' < KW_MOD).
    Conflict between rule 58 and token '-' resolved as shift ('!' < '-').
    Conflict between rule 58 and token '+' resolved as shift ('!' < '+').
    Conflict between rule 58 and token POW resolved as shift ('!' < POW).


State 81

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   59                   | KW_NOT expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, ')', ']', ';', ':', ',']

    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 59 (logical_expression)

    Conflict between rule 59 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 59 and token KW_OR resolved as reduce (KW_OR < KW_NOT).
    Conflict between rule 59 and token LOR resolved as reduce (LOR < KW_NOT).
    Conflict between rule 59 and token LAND resolved as reduce (LAND < KW_NOT).
    Conflict between rule 59 and token NEQ resolved as shift (KW_NOT < NEQ).
    Conflict between rule 59 and token EQ resolved as shift (KW_NOT < EQ).
    Conflict between rule 59 and token LEQ resolved as shift (KW_NOT < LEQ).
    Conflict between rule 59 and token GEQ resolved as shift (KW_NOT < GEQ).
    Conflict between rule 59 and token '<' resolved as shift (KW_NOT < '<').
    Conflict between rule 59 and token '>' resolved as shift (KW_NOT < '>').
    Conflict between rule 59 and token '*' resolved as shift (KW_NOT < '*').
    Conflict between rule 59 and token '/' resolved as shift (KW_NOT < '/').
    Conflict between rule 59 and token MOD resolved as shift (KW_NOT < MOD).
    Conflict between rule 59 and token KW_MOD resolved as shift (KW_NOT < KW_MOD).
    Conflict between rule 59 and token '-' resolved as shift (KW_NOT < '-').
    Conflict between rule 59 and token '+' resolved as shift (KW_NOT < '+').
    Conflict between rule 59 and token POW resolved as shift (KW_NOT < POW).


State 82

   40 expression: '-' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ':', ',']
   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    POW  shift, and go to state 101

    $default  reduce using rule 40 (expression)

    Conflict between rule 40 and token KW_AND resolved as reduce (KW_AND < '-').
    Conflict between rule 40 and token KW_OR resolved as reduce (KW_OR < '-').
    Conflict between rule 40 and token LOR resolved as reduce (LOR < '-').
    Conflict between rule 40 and token LAND resolved as reduce (LAND < '-').
    Conflict between rule 40 and token NEQ resolved as reduce (NEQ < '-').
    Conflict between rule 40 and token EQ resolved as reduce (EQ < '-').
    Conflict between rule 40 and token LEQ resolved as reduce (LEQ < '-').
    Conflict between rule 40 and token GEQ resolved as reduce (GEQ < '-').
    Conflict between rule 40 and token '<' resolved as reduce ('<' < '-').
    Conflict between rule 40 and token '>' resolved as reduce ('>' < '-').
    Conflict between rule 40 and token '*' resolved as reduce ('*' < '-').
    Conflict between rule 40 and token '/' resolved as reduce ('/' < '-').
    Conflict between rule 40 and token MOD resolved as reduce (MOD < '-').
    Conflict between rule 40 and token KW_MOD resolved as reduce (KW_MOD < '-').
    Conflict between rule 40 and token '-' resolved as reduce (%left '-').
    Conflict between rule 40 and token '+' resolved as reduce (%left '+').
    Conflict between rule 40 and token POW resolved as shift ('-' < POW).


State 83

   39 expression: '+' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ':', ',']
   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    POW  shift, and go to state 101

    $default  reduce using rule 39 (expression)

    Conflict between rule 39 and token KW_AND resolved as reduce (KW_AND < '+').
    Conflict between rule 39 and token KW_OR resolved as reduce (KW_OR < '+').
    Conflict between rule 39 and token LOR resolved as reduce (LOR < '+').
    Conflict between rule 39 and token LAND resolved as reduce (LAND < '+').
    Conflict between rule 39 and token NEQ resolved as reduce (NEQ < '+').
    Conflict between rule 39 and token EQ resolved as reduce (EQ < '+').
    Conflict between rule 39 and token LEQ resolved as reduce (LEQ < '+').
    Conflict between rule 39 and token GEQ resolved as reduce (GEQ < '+').
    Conflict between rule 39 and token '<' resolved as reduce ('<' < '+').
    Conflict between rule 39 and token '>' resolved as reduce ('>' < '+').
    Conflict between rule 39 and token '*' resolved as reduce ('*' < '+').
    Conflict between rule 39 and token '/' resolved as reduce ('/' < '+').
    Conflict between rule 39 and token MOD resolved as reduce (MOD < '+').
    Conflict between rule 39 and token KW_MOD resolved as reduce (KW_MOD < '+').
    Conflict between rule 39 and token '-' resolved as reduce (%left '-').
    Conflict between rule 39 and token '+' resolved as reduce (%left '+').
    Conflict between rule 39 and token POW resolved as shift ('+' < POW).


State 84

   36 expression: '(' expression • ')'
   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101
    ')'     shift, and go to state 143


State 85

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   55                   | expression KW_AND • expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 144
    math_expression     go to state 43
    logical_expression  go to state 44


State 86

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   57                   | expression KW_OR • expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 145
    math_expression     go to state 43
    logical_expression  go to state 44


State 87

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   56                   | expression LOR • expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 146
    math_expression     go to state 43
    logical_expression  go to state 44


State 88

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   54                   | expression LAND • expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 147
    math_expression     go to state 43
    logical_expression  go to state 44


State 89

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   51                   | expression NEQ • expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 148
    math_expression     go to state 43
    logical_expression  go to state 44


State 90

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   48                   | expression EQ • expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 149
    math_expression     go to state 43
    logical_expression  go to state 44


State 91

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   49                   | expression LEQ • expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 150
    math_expression     go to state 43
    logical_expression  go to state 44


State 92

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   50                   | expression GEQ • expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 151
    math_expression     go to state 43
    logical_expression  go to state 44


State 93

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   52                   | expression '<' • expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 152
    math_expression     go to state 43
    logical_expression  go to state 44


State 94

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   53                   | expression '>' • expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 153
    math_expression     go to state 43
    logical_expression  go to state 44


State 95

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   44                | expression '*' • expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 154
    math_expression     go to state 43
    logical_expression  go to state 44


State 96

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   45                | expression '/' • expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 155
    math_expression     go to state 43
    logical_expression  go to state 44


State 97

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   46                | expression MOD • expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 156
    math_expression     go to state 43
    logical_expression  go to state 44


State 98

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   47                | expression KW_MOD • expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 157
    math_expression     go to state 43
    logical_expression  go to state 44


State 99

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   43                | expression '-' • expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 158
    math_expression     go to state 43
    logical_expression  go to state 44


State 100

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   42                | expression '+' • expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 159
    math_expression     go to state 43
    logical_expression  go to state 44


State 101

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   41                | expression POW • expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 160
    math_expression     go to state 43
    logical_expression  go to state 44


State 102

   60 brackets: '[' expression ']' •

    $default  reduce using rule 60 (brackets)


State 103

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   61 brackets: brackets '[' expression • ']'

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101
    ']'     shift, and go to state 161


State 104

   12 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING • ':' KW_STR

    ':'  shift, and go to state 162


State 105

   11 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL • ':' KW_SCALAR

    ':'  shift, and go to state 163


State 106

   10 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER • ':' KW_INTEGER

    ':'  shift, and go to state 164


State 107

   13 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE • ':' KW_BOOL

    ':'  shift, and go to state 165


State 108

   14 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE • ':' KW_BOOL

    ':'  shift, and go to state 166


State 109

  104 args: TK_IDENTIFIER • ':' data_type
  105     | TK_IDENTIFIER • ':' data_type ',' args
  106     | TK_IDENTIFIER • '[' ']' ':' data_type
  107     | TK_IDENTIFIER • '[' ']' ':' data_type ',' args

    '['  shift, and go to state 167
    ':'  shift, and go to state 168


State 110

   98 function_header: TK_IDENTIFIER '(' ')' • '-' '>' data_type ':'
  100                | TK_IDENTIFIER '(' ')' • '-' '>' KW_VOID ':'
  102                | TK_IDENTIFIER '(' ')' • ':'

    '-'  shift, and go to state 169
    ':'  shift, and go to state 170


State 111

   97 function_header: TK_IDENTIFIER '(' args • ')' '-' '>' data_type ':'
   99                | TK_IDENTIFIER '(' args • ')' '-' '>' KW_VOID ':'
  101                | TK_IDENTIFIER '(' args • ')' ':'

    ')'  shift, and go to state 171


State 112

    8 s_main_s: KW_DEF KW_MAIN '(' ')' • ':' main_body KW_ENDDEF ';'

    ':'  shift, and go to state 172


State 113

   81 command: TK_IDENTIFIER ADD_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 173


State 114

   82 command: TK_IDENTIFIER SUB_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 174


State 115

   83 command: TK_IDENTIFIER MULT_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 175


State 116

   84 command: TK_IDENTIFIER DIV_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 176


State 117

   85 command: TK_IDENTIFIER MOD_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 177


State 118

   92 compound_array_a: TK_IDENTIFIER ASSIGN • '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: TK_IDENTIFIER ASSIGN • '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type

    '['  shift, and go to state 178


State 119

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   86 variable_assignement: TK_IDENTIFIER SIMPLE_ASSIGN • expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 179
    math_expression     go to state 43
    logical_expression  go to state 44


State 120

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   79 command: TK_IDENTIFIER '(' • function_arg ')' ';'
   80        | TK_IDENTIFIER '(' • ')' ';'
   95 function_arg: • expression
   96             | • function_arg ',' expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40
    ')'            shift, and go to state 180

    expression          go to state 141
    math_expression     go to state 43
    logical_expression  go to state 44
    function_arg        go to state 181


State 121

   20 array_var: TK_IDENTIFIER brackets •  [':', ',']
   61 brackets: brackets • '[' expression ']'
   87 array_assignement: TK_IDENTIFIER brackets • SIMPLE_ASSIGN expression

    SIMPLE_ASSIGN  shift, and go to state 182
    '['            shift, and go to state 51

    $default  reduce using rule 20 (array_var)


State 122

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   88 if_statement: KW_IF '(' • expression ')' ':' commands KW_ENDIF
   89             | KW_IF '(' • expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 183
    math_expression     go to state 43
    logical_expression  go to state 44


State 123

   90 for_statement: KW_FOR TK_IDENTIFIER • KW_IN '[' expression ':' expression ']' ':' commands KW_ENDFOR
   91              | KW_FOR TK_IDENTIFIER • KW_IN '[' expression ':' expression ':' expression ']' commands KW_ENDFOR

    KW_IN  shift, and go to state 184


State 124

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   94 while_statement: KW_WHILE '(' • expression ')' ':' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 185
    math_expression     go to state 43
    logical_expression  go to state 44


State 125

   75 command: KW_BREAK ';' •

    $default  reduce using rule 75 (command)


State 126

   77 command: KW_RETURN ';' •

    $default  reduce using rule 77 (command)


State 127

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   78 command: KW_RETURN expression • ';'

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101
    ';'     shift, and go to state 186


State 128

   76 command: KW_CONTINUE ';' •

    $default  reduce using rule 76 (command)


State 129

   68 command: constant_declaration ';' •

    $default  reduce using rule 68 (command)


State 130

   67 command: variable_declaration ';' •

    $default  reduce using rule 67 (command)


State 131

   63 commands: command commands •

    $default  reduce using rule 63 (commands)


State 132

   66 command: variable_assignement ';' •

    $default  reduce using rule 66 (command)


State 133

   69 command: array_assignement ';' •

    $default  reduce using rule 69 (command)


State 134

   70 command: if_statement ';' •

    $default  reduce using rule 70 (command)


State 135

   71 command: for_statement ';' •

    $default  reduce using rule 71 (command)


State 136

   73 command: compound_array_a ';' •

    $default  reduce using rule 73 (command)


State 137

   72 command: compound_array_i ';' •

    $default  reduce using rule 72 (command)


State 138

   74 command: while_statement ';' •

    $default  reduce using rule 74 (command)


State 139

   15 function_declaration: KW_DEF function_header function_body KW_ENDDEF •

    $default  reduce using rule 15 (function_declaration)


State 140

   32 expression: TK_IDENTIFIER '(' ')' •

    $default  reduce using rule 32 (expression)


State 141

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   95 function_arg: expression •  [')', ',']

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 95 (function_arg)


State 142

   31 expression: TK_IDENTIFIER '(' function_arg • ')'
   96 function_arg: function_arg • ',' expression

    ')'  shift, and go to state 187
    ','  shift, and go to state 188


State 143

   36 expression: '(' expression ')' •

    $default  reduce using rule 36 (expression)


State 144

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   55                   | expression KW_AND expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, ')', ']', ';', ':', ',']
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 55 (logical_expression)

    Conflict between rule 55 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 55 and token KW_OR resolved as reduce (KW_OR < KW_AND).
    Conflict between rule 55 and token LOR resolved as reduce (LOR < KW_AND).
    Conflict between rule 55 and token LAND resolved as reduce (%left LAND).
    Conflict between rule 55 and token NEQ resolved as shift (KW_AND < NEQ).
    Conflict between rule 55 and token EQ resolved as shift (KW_AND < EQ).
    Conflict between rule 55 and token LEQ resolved as shift (KW_AND < LEQ).
    Conflict between rule 55 and token GEQ resolved as shift (KW_AND < GEQ).
    Conflict between rule 55 and token '<' resolved as shift (KW_AND < '<').
    Conflict between rule 55 and token '>' resolved as shift (KW_AND < '>').
    Conflict between rule 55 and token '*' resolved as shift (KW_AND < '*').
    Conflict between rule 55 and token '/' resolved as shift (KW_AND < '/').
    Conflict between rule 55 and token MOD resolved as shift (KW_AND < MOD).
    Conflict between rule 55 and token KW_MOD resolved as shift (KW_AND < KW_MOD).
    Conflict between rule 55 and token '-' resolved as shift (KW_AND < '-').
    Conflict between rule 55 and token '+' resolved as shift (KW_AND < '+').
    Conflict between rule 55 and token POW resolved as shift (KW_AND < POW).


State 145

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   57                   | expression KW_OR expression •  [KW_FOR, KW_OR, LOR, ')', ']', ';', ':', ',']

    KW_AND  shift, and go to state 85
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 57 (logical_expression)

    Conflict between rule 57 and token KW_AND resolved as shift (KW_OR < KW_AND).
    Conflict between rule 57 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 57 and token LOR resolved as reduce (%left LOR).
    Conflict between rule 57 and token LAND resolved as shift (KW_OR < LAND).
    Conflict between rule 57 and token NEQ resolved as shift (KW_OR < NEQ).
    Conflict between rule 57 and token EQ resolved as shift (KW_OR < EQ).
    Conflict between rule 57 and token LEQ resolved as shift (KW_OR < LEQ).
    Conflict between rule 57 and token GEQ resolved as shift (KW_OR < GEQ).
    Conflict between rule 57 and token '<' resolved as shift (KW_OR < '<').
    Conflict between rule 57 and token '>' resolved as shift (KW_OR < '>').
    Conflict between rule 57 and token '*' resolved as shift (KW_OR < '*').
    Conflict between rule 57 and token '/' resolved as shift (KW_OR < '/').
    Conflict between rule 57 and token MOD resolved as shift (KW_OR < MOD).
    Conflict between rule 57 and token KW_MOD resolved as shift (KW_OR < KW_MOD).
    Conflict between rule 57 and token '-' resolved as shift (KW_OR < '-').
    Conflict between rule 57 and token '+' resolved as shift (KW_OR < '+').
    Conflict between rule 57 and token POW resolved as shift (KW_OR < POW).


State 146

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   56                   | expression LOR expression •  [KW_FOR, KW_OR, LOR, ')', ']', ';', ':', ',']
   57                   | expression • KW_OR expression

    KW_AND  shift, and go to state 85
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 56 (logical_expression)

    Conflict between rule 56 and token KW_AND resolved as shift (LOR < KW_AND).
    Conflict between rule 56 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 56 and token LOR resolved as reduce (%left LOR).
    Conflict between rule 56 and token LAND resolved as shift (LOR < LAND).
    Conflict between rule 56 and token NEQ resolved as shift (LOR < NEQ).
    Conflict between rule 56 and token EQ resolved as shift (LOR < EQ).
    Conflict between rule 56 and token LEQ resolved as shift (LOR < LEQ).
    Conflict between rule 56 and token GEQ resolved as shift (LOR < GEQ).
    Conflict between rule 56 and token '<' resolved as shift (LOR < '<').
    Conflict between rule 56 and token '>' resolved as shift (LOR < '>').
    Conflict between rule 56 and token '*' resolved as shift (LOR < '*').
    Conflict between rule 56 and token '/' resolved as shift (LOR < '/').
    Conflict between rule 56 and token MOD resolved as shift (LOR < MOD).
    Conflict between rule 56 and token KW_MOD resolved as shift (LOR < KW_MOD).
    Conflict between rule 56 and token '-' resolved as shift (LOR < '-').
    Conflict between rule 56 and token '+' resolved as shift (LOR < '+').
    Conflict between rule 56 and token POW resolved as shift (LOR < POW).


State 147

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   54                   | expression LAND expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, ')', ']', ';', ':', ',']
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 54 (logical_expression)

    Conflict between rule 54 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 54 and token KW_OR resolved as reduce (KW_OR < LAND).
    Conflict between rule 54 and token LOR resolved as reduce (LOR < LAND).
    Conflict between rule 54 and token LAND resolved as reduce (%left LAND).
    Conflict between rule 54 and token NEQ resolved as shift (LAND < NEQ).
    Conflict between rule 54 and token EQ resolved as shift (LAND < EQ).
    Conflict between rule 54 and token LEQ resolved as shift (LAND < LEQ).
    Conflict between rule 54 and token GEQ resolved as shift (LAND < GEQ).
    Conflict between rule 54 and token '<' resolved as shift (LAND < '<').
    Conflict between rule 54 and token '>' resolved as shift (LAND < '>').
    Conflict between rule 54 and token '*' resolved as shift (LAND < '*').
    Conflict between rule 54 and token '/' resolved as shift (LAND < '/').
    Conflict between rule 54 and token MOD resolved as shift (LAND < MOD).
    Conflict between rule 54 and token KW_MOD resolved as shift (LAND < KW_MOD).
    Conflict between rule 54 and token '-' resolved as shift (LAND < '-').
    Conflict between rule 54 and token '+' resolved as shift (LAND < '+').
    Conflict between rule 54 and token POW resolved as shift (LAND < POW).


State 148

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   51                   | expression NEQ expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, ')', ']', ';', ':', ',']
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 51 (logical_expression)

    Conflict between rule 51 and token KW_AND resolved as reduce (KW_AND < NEQ).
    Conflict between rule 51 and token KW_OR resolved as reduce (KW_OR < NEQ).
    Conflict between rule 51 and token LOR resolved as reduce (LOR < NEQ).
    Conflict between rule 51 and token LAND resolved as reduce (LAND < NEQ).
    Conflict between rule 51 and token NEQ resolved as reduce (%left NEQ).
    Conflict between rule 51 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 51 and token LEQ resolved as shift (NEQ < LEQ).
    Conflict between rule 51 and token GEQ resolved as shift (NEQ < GEQ).
    Conflict between rule 51 and token '<' resolved as shift (NEQ < '<').
    Conflict between rule 51 and token '>' resolved as shift (NEQ < '>').
    Conflict between rule 51 and token '*' resolved as shift (NEQ < '*').
    Conflict between rule 51 and token '/' resolved as shift (NEQ < '/').
    Conflict between rule 51 and token MOD resolved as shift (NEQ < MOD).
    Conflict between rule 51 and token KW_MOD resolved as shift (NEQ < KW_MOD).
    Conflict between rule 51 and token '-' resolved as shift (NEQ < '-').
    Conflict between rule 51 and token '+' resolved as shift (NEQ < '+').
    Conflict between rule 51 and token POW resolved as shift (NEQ < POW).


State 149

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   48                   | expression EQ expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, ')', ']', ';', ':', ',']
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 48 (logical_expression)

    Conflict between rule 48 and token KW_AND resolved as reduce (KW_AND < EQ).
    Conflict between rule 48 and token KW_OR resolved as reduce (KW_OR < EQ).
    Conflict between rule 48 and token LOR resolved as reduce (LOR < EQ).
    Conflict between rule 48 and token LAND resolved as reduce (LAND < EQ).
    Conflict between rule 48 and token NEQ resolved as reduce (%left NEQ).
    Conflict between rule 48 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 48 and token LEQ resolved as shift (EQ < LEQ).
    Conflict between rule 48 and token GEQ resolved as shift (EQ < GEQ).
    Conflict between rule 48 and token '<' resolved as shift (EQ < '<').
    Conflict between rule 48 and token '>' resolved as shift (EQ < '>').
    Conflict between rule 48 and token '*' resolved as shift (EQ < '*').
    Conflict between rule 48 and token '/' resolved as shift (EQ < '/').
    Conflict between rule 48 and token MOD resolved as shift (EQ < MOD).
    Conflict between rule 48 and token KW_MOD resolved as shift (EQ < KW_MOD).
    Conflict between rule 48 and token '-' resolved as shift (EQ < '-').
    Conflict between rule 48 and token '+' resolved as shift (EQ < '+').
    Conflict between rule 48 and token POW resolved as shift (EQ < POW).


State 150

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   49                   | expression LEQ expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', ')', ']', ';', ':', ',']
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 49 (logical_expression)

    Conflict between rule 49 and token KW_AND resolved as reduce (KW_AND < LEQ).
    Conflict between rule 49 and token KW_OR resolved as reduce (KW_OR < LEQ).
    Conflict between rule 49 and token LOR resolved as reduce (LOR < LEQ).
    Conflict between rule 49 and token LAND resolved as reduce (LAND < LEQ).
    Conflict between rule 49 and token NEQ resolved as reduce (NEQ < LEQ).
    Conflict between rule 49 and token EQ resolved as reduce (EQ < LEQ).
    Conflict between rule 49 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 49 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 49 and token '<' resolved as reduce (%left '<').
    Conflict between rule 49 and token '>' resolved as reduce (%left '>').
    Conflict between rule 49 and token '*' resolved as shift (LEQ < '*').
    Conflict between rule 49 and token '/' resolved as shift (LEQ < '/').
    Conflict between rule 49 and token MOD resolved as shift (LEQ < MOD).
    Conflict between rule 49 and token KW_MOD resolved as shift (LEQ < KW_MOD).
    Conflict between rule 49 and token '-' resolved as shift (LEQ < '-').
    Conflict between rule 49 and token '+' resolved as shift (LEQ < '+').
    Conflict between rule 49 and token POW resolved as shift (LEQ < POW).


State 151

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   50                   | expression GEQ expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', ')', ']', ';', ':', ',']
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 50 (logical_expression)

    Conflict between rule 50 and token KW_AND resolved as reduce (KW_AND < GEQ).
    Conflict between rule 50 and token KW_OR resolved as reduce (KW_OR < GEQ).
    Conflict between rule 50 and token LOR resolved as reduce (LOR < GEQ).
    Conflict between rule 50 and token LAND resolved as reduce (LAND < GEQ).
    Conflict between rule 50 and token NEQ resolved as reduce (NEQ < GEQ).
    Conflict between rule 50 and token EQ resolved as reduce (EQ < GEQ).
    Conflict between rule 50 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 50 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 50 and token '<' resolved as reduce (%left '<').
    Conflict between rule 50 and token '>' resolved as reduce (%left '>').
    Conflict between rule 50 and token '*' resolved as shift (GEQ < '*').
    Conflict between rule 50 and token '/' resolved as shift (GEQ < '/').
    Conflict between rule 50 and token MOD resolved as shift (GEQ < MOD).
    Conflict between rule 50 and token KW_MOD resolved as shift (GEQ < KW_MOD).
    Conflict between rule 50 and token '-' resolved as shift (GEQ < '-').
    Conflict between rule 50 and token '+' resolved as shift (GEQ < '+').
    Conflict between rule 50 and token POW resolved as shift (GEQ < POW).


State 152

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   52                   | expression '<' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', ')', ']', ';', ':', ',']
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 52 (logical_expression)

    Conflict between rule 52 and token KW_AND resolved as reduce (KW_AND < '<').
    Conflict between rule 52 and token KW_OR resolved as reduce (KW_OR < '<').
    Conflict between rule 52 and token LOR resolved as reduce (LOR < '<').
    Conflict between rule 52 and token LAND resolved as reduce (LAND < '<').
    Conflict between rule 52 and token NEQ resolved as reduce (NEQ < '<').
    Conflict between rule 52 and token EQ resolved as reduce (EQ < '<').
    Conflict between rule 52 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 52 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 52 and token '<' resolved as reduce (%left '<').
    Conflict between rule 52 and token '>' resolved as reduce (%left '>').
    Conflict between rule 52 and token '*' resolved as shift ('<' < '*').
    Conflict between rule 52 and token '/' resolved as shift ('<' < '/').
    Conflict between rule 52 and token MOD resolved as shift ('<' < MOD).
    Conflict between rule 52 and token KW_MOD resolved as shift ('<' < KW_MOD).
    Conflict between rule 52 and token '-' resolved as shift ('<' < '-').
    Conflict between rule 52 and token '+' resolved as shift ('<' < '+').
    Conflict between rule 52 and token POW resolved as shift ('<' < POW).


State 153

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   53                   | expression '>' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', ')', ']', ';', ':', ',']
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 53 (logical_expression)

    Conflict between rule 53 and token KW_AND resolved as reduce (KW_AND < '>').
    Conflict between rule 53 and token KW_OR resolved as reduce (KW_OR < '>').
    Conflict between rule 53 and token LOR resolved as reduce (LOR < '>').
    Conflict between rule 53 and token LAND resolved as reduce (LAND < '>').
    Conflict between rule 53 and token NEQ resolved as reduce (NEQ < '>').
    Conflict between rule 53 and token EQ resolved as reduce (EQ < '>').
    Conflict between rule 53 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 53 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 53 and token '<' resolved as reduce (%left '<').
    Conflict between rule 53 and token '>' resolved as reduce (%left '>').
    Conflict between rule 53 and token '*' resolved as shift ('>' < '*').
    Conflict between rule 53 and token '/' resolved as shift ('>' < '/').
    Conflict between rule 53 and token MOD resolved as shift ('>' < MOD).
    Conflict between rule 53 and token KW_MOD resolved as shift ('>' < KW_MOD).
    Conflict between rule 53 and token '-' resolved as shift ('>' < '-').
    Conflict between rule 53 and token '+' resolved as shift ('>' < '+').
    Conflict between rule 53 and token POW resolved as shift ('>' < POW).


State 154

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   44                | expression '*' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, ')', ']', ';', ':', ',']
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '-'  shift, and go to state 99
    '+'  shift, and go to state 100
    POW  shift, and go to state 101

    $default  reduce using rule 44 (math_expression)

    Conflict between rule 44 and token KW_AND resolved as reduce (KW_AND < '*').
    Conflict between rule 44 and token KW_OR resolved as reduce (KW_OR < '*').
    Conflict between rule 44 and token LOR resolved as reduce (LOR < '*').
    Conflict between rule 44 and token LAND resolved as reduce (LAND < '*').
    Conflict between rule 44 and token NEQ resolved as reduce (NEQ < '*').
    Conflict between rule 44 and token EQ resolved as reduce (EQ < '*').
    Conflict between rule 44 and token LEQ resolved as reduce (LEQ < '*').
    Conflict between rule 44 and token GEQ resolved as reduce (GEQ < '*').
    Conflict between rule 44 and token '<' resolved as reduce ('<' < '*').
    Conflict between rule 44 and token '>' resolved as reduce ('>' < '*').
    Conflict between rule 44 and token '*' resolved as reduce (%left '*').
    Conflict between rule 44 and token '/' resolved as reduce (%left '/').
    Conflict between rule 44 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 44 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 44 and token '-' resolved as shift ('*' < '-').
    Conflict between rule 44 and token '+' resolved as shift ('*' < '+').
    Conflict between rule 44 and token POW resolved as shift ('*' < POW).


State 155

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   45                | expression '/' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, ')', ']', ';', ':', ',']
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '-'  shift, and go to state 99
    '+'  shift, and go to state 100
    POW  shift, and go to state 101

    $default  reduce using rule 45 (math_expression)

    Conflict between rule 45 and token KW_AND resolved as reduce (KW_AND < '/').
    Conflict between rule 45 and token KW_OR resolved as reduce (KW_OR < '/').
    Conflict between rule 45 and token LOR resolved as reduce (LOR < '/').
    Conflict between rule 45 and token LAND resolved as reduce (LAND < '/').
    Conflict between rule 45 and token NEQ resolved as reduce (NEQ < '/').
    Conflict between rule 45 and token EQ resolved as reduce (EQ < '/').
    Conflict between rule 45 and token LEQ resolved as reduce (LEQ < '/').
    Conflict between rule 45 and token GEQ resolved as reduce (GEQ < '/').
    Conflict between rule 45 and token '<' resolved as reduce ('<' < '/').
    Conflict between rule 45 and token '>' resolved as reduce ('>' < '/').
    Conflict between rule 45 and token '*' resolved as reduce (%left '*').
    Conflict between rule 45 and token '/' resolved as reduce (%left '/').
    Conflict between rule 45 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 45 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 45 and token '-' resolved as shift ('/' < '-').
    Conflict between rule 45 and token '+' resolved as shift ('/' < '+').
    Conflict between rule 45 and token POW resolved as shift ('/' < POW).


State 156

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   46                | expression MOD expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, ')', ']', ';', ':', ',']
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '-'  shift, and go to state 99
    '+'  shift, and go to state 100
    POW  shift, and go to state 101

    $default  reduce using rule 46 (math_expression)

    Conflict between rule 46 and token KW_AND resolved as reduce (KW_AND < MOD).
    Conflict between rule 46 and token KW_OR resolved as reduce (KW_OR < MOD).
    Conflict between rule 46 and token LOR resolved as reduce (LOR < MOD).
    Conflict between rule 46 and token LAND resolved as reduce (LAND < MOD).
    Conflict between rule 46 and token NEQ resolved as reduce (NEQ < MOD).
    Conflict between rule 46 and token EQ resolved as reduce (EQ < MOD).
    Conflict between rule 46 and token LEQ resolved as reduce (LEQ < MOD).
    Conflict between rule 46 and token GEQ resolved as reduce (GEQ < MOD).
    Conflict between rule 46 and token '<' resolved as reduce ('<' < MOD).
    Conflict between rule 46 and token '>' resolved as reduce ('>' < MOD).
    Conflict between rule 46 and token '*' resolved as reduce (%left '*').
    Conflict between rule 46 and token '/' resolved as reduce (%left '/').
    Conflict between rule 46 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 46 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 46 and token '-' resolved as shift (MOD < '-').
    Conflict between rule 46 and token '+' resolved as shift (MOD < '+').
    Conflict between rule 46 and token POW resolved as shift (MOD < POW).


State 157

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   47                | expression KW_MOD expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, ')', ']', ';', ':', ',']
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '-'  shift, and go to state 99
    '+'  shift, and go to state 100
    POW  shift, and go to state 101

    $default  reduce using rule 47 (math_expression)

    Conflict between rule 47 and token KW_AND resolved as reduce (KW_AND < KW_MOD).
    Conflict between rule 47 and token KW_OR resolved as reduce (KW_OR < KW_MOD).
    Conflict between rule 47 and token LOR resolved as reduce (LOR < KW_MOD).
    Conflict between rule 47 and token LAND resolved as reduce (LAND < KW_MOD).
    Conflict between rule 47 and token NEQ resolved as reduce (NEQ < KW_MOD).
    Conflict between rule 47 and token EQ resolved as reduce (EQ < KW_MOD).
    Conflict between rule 47 and token LEQ resolved as reduce (LEQ < KW_MOD).
    Conflict between rule 47 and token GEQ resolved as reduce (GEQ < KW_MOD).
    Conflict between rule 47 and token '<' resolved as reduce ('<' < KW_MOD).
    Conflict between rule 47 and token '>' resolved as reduce ('>' < KW_MOD).
    Conflict between rule 47 and token '*' resolved as reduce (%left '*').
    Conflict between rule 47 and token '/' resolved as reduce (%left '/').
    Conflict between rule 47 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 47 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 47 and token '-' resolved as shift (KW_MOD < '-').
    Conflict between rule 47 and token '+' resolved as shift (KW_MOD < '+').
    Conflict between rule 47 and token POW resolved as shift (KW_MOD < POW).


State 158

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   43                | expression '-' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ':', ',']
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    POW  shift, and go to state 101

    $default  reduce using rule 43 (math_expression)

    Conflict between rule 43 and token KW_AND resolved as reduce (KW_AND < '-').
    Conflict between rule 43 and token KW_OR resolved as reduce (KW_OR < '-').
    Conflict between rule 43 and token LOR resolved as reduce (LOR < '-').
    Conflict between rule 43 and token LAND resolved as reduce (LAND < '-').
    Conflict between rule 43 and token NEQ resolved as reduce (NEQ < '-').
    Conflict between rule 43 and token EQ resolved as reduce (EQ < '-').
    Conflict between rule 43 and token LEQ resolved as reduce (LEQ < '-').
    Conflict between rule 43 and token GEQ resolved as reduce (GEQ < '-').
    Conflict between rule 43 and token '<' resolved as reduce ('<' < '-').
    Conflict between rule 43 and token '>' resolved as reduce ('>' < '-').
    Conflict between rule 43 and token '*' resolved as reduce ('*' < '-').
    Conflict between rule 43 and token '/' resolved as reduce ('/' < '-').
    Conflict between rule 43 and token MOD resolved as reduce (MOD < '-').
    Conflict between rule 43 and token KW_MOD resolved as reduce (KW_MOD < '-').
    Conflict between rule 43 and token '-' resolved as reduce (%left '-').
    Conflict between rule 43 and token '+' resolved as reduce (%left '+').
    Conflict between rule 43 and token POW resolved as shift ('-' < POW).


State 159

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   42                | expression '+' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ':', ',']
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    POW  shift, and go to state 101

    $default  reduce using rule 42 (math_expression)

    Conflict between rule 42 and token KW_AND resolved as reduce (KW_AND < '+').
    Conflict between rule 42 and token KW_OR resolved as reduce (KW_OR < '+').
    Conflict between rule 42 and token LOR resolved as reduce (LOR < '+').
    Conflict between rule 42 and token LAND resolved as reduce (LAND < '+').
    Conflict between rule 42 and token NEQ resolved as reduce (NEQ < '+').
    Conflict between rule 42 and token EQ resolved as reduce (EQ < '+').
    Conflict between rule 42 and token LEQ resolved as reduce (LEQ < '+').
    Conflict between rule 42 and token GEQ resolved as reduce (GEQ < '+').
    Conflict between rule 42 and token '<' resolved as reduce ('<' < '+').
    Conflict between rule 42 and token '>' resolved as reduce ('>' < '+').
    Conflict between rule 42 and token '*' resolved as reduce ('*' < '+').
    Conflict between rule 42 and token '/' resolved as reduce ('/' < '+').
    Conflict between rule 42 and token MOD resolved as reduce (MOD < '+').
    Conflict between rule 42 and token KW_MOD resolved as reduce (KW_MOD < '+').
    Conflict between rule 42 and token '-' resolved as reduce (%left '-').
    Conflict between rule 42 and token '+' resolved as reduce (%left '+').
    Conflict between rule 42 and token POW resolved as shift ('+' < POW).


State 160

   41 math_expression: expression • POW expression
   41                | expression POW expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ':', ',']
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    POW  shift, and go to state 101

    $default  reduce using rule 41 (math_expression)

    Conflict between rule 41 and token KW_AND resolved as reduce (KW_AND < POW).
    Conflict between rule 41 and token KW_OR resolved as reduce (KW_OR < POW).
    Conflict between rule 41 and token LOR resolved as reduce (LOR < POW).
    Conflict between rule 41 and token LAND resolved as reduce (LAND < POW).
    Conflict between rule 41 and token NEQ resolved as reduce (NEQ < POW).
    Conflict between rule 41 and token EQ resolved as reduce (EQ < POW).
    Conflict between rule 41 and token LEQ resolved as reduce (LEQ < POW).
    Conflict between rule 41 and token GEQ resolved as reduce (GEQ < POW).
    Conflict between rule 41 and token '<' resolved as reduce ('<' < POW).
    Conflict between rule 41 and token '>' resolved as reduce ('>' < POW).
    Conflict between rule 41 and token '*' resolved as reduce ('*' < POW).
    Conflict between rule 41 and token '/' resolved as reduce ('/' < POW).
    Conflict between rule 41 and token MOD resolved as reduce (MOD < POW).
    Conflict between rule 41 and token KW_MOD resolved as reduce (KW_MOD < POW).
    Conflict between rule 41 and token '-' resolved as reduce ('-' < POW).
    Conflict between rule 41 and token '+' resolved as reduce ('+' < POW).
    Conflict between rule 41 and token POW resolved as shift (%right POW).


State 161

   61 brackets: brackets '[' expression ']' •

    $default  reduce using rule 61 (brackets)


State 162

   12 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING ':' • KW_STR

    KW_STR  shift, and go to state 189


State 163

   11 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL ':' • KW_SCALAR

    KW_SCALAR  shift, and go to state 190


State 164

   10 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER ':' • KW_INTEGER

    KW_INTEGER  shift, and go to state 191


State 165

   13 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE ':' • KW_BOOL

    KW_BOOL  shift, and go to state 192


State 166

   14 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE ':' • KW_BOOL

    KW_BOOL  shift, and go to state 193


State 167

  106 args: TK_IDENTIFIER '[' • ']' ':' data_type
  107     | TK_IDENTIFIER '[' • ']' ':' data_type ',' args

    ']'  shift, and go to state 194


State 168

   21 data_type: • KW_INTEGER
   22          | • KW_BOOL
   23          | • KW_SCALAR
   24          | • KW_STR
  104 args: TK_IDENTIFIER ':' • data_type
  105     | TK_IDENTIFIER ':' • data_type ',' args

    KW_INTEGER  shift, and go to state 45
    KW_SCALAR   shift, and go to state 46
    KW_STR      shift, and go to state 47
    KW_BOOL     shift, and go to state 48

    data_type  go to state 195


State 169

   98 function_header: TK_IDENTIFIER '(' ')' '-' • '>' data_type ':'
  100                | TK_IDENTIFIER '(' ')' '-' • '>' KW_VOID ':'

    '>'  shift, and go to state 196


State 170

  102 function_header: TK_IDENTIFIER '(' ')' ':' •

    $default  reduce using rule 102 (function_header)


State 171

   97 function_header: TK_IDENTIFIER '(' args ')' • '-' '>' data_type ':'
   99                | TK_IDENTIFIER '(' args ')' • '-' '>' KW_VOID ':'
  101                | TK_IDENTIFIER '(' args ')' • ':'

    '-'  shift, and go to state 197
    ':'  shift, and go to state 198


State 172

    8 s_main_s: KW_DEF KW_MAIN '(' ')' ':' • main_body KW_ENDDEF ';'
    9 main_body: • commands
   10 constant_declaration: • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER ':' KW_INTEGER
   11                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL ':' KW_SCALAR
   12                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING ':' KW_STR
   13                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE ':' KW_BOOL
   14                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE ':' KW_BOOL
   16 variable_declaration: • TK_IDENTIFIER ':' data_type
   17                     | • array_var ':' data_type
   18                     | • TK_IDENTIFIER ',' variable_declaration
   19                     | • array_var ',' variable_declaration
   20 array_var: • TK_IDENTIFIER brackets
   63 commands: • command commands
   64         | • command
   65 command: • ';'
   66        | • variable_assignement ';'
   67        | • variable_declaration ';'
   68        | • constant_declaration ';'
   69        | • array_assignement ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER SIMPLE_ASSIGN expression
   87 array_assignement: • TK_IDENTIFIER brackets SIMPLE_ASSIGN expression
   88 if_statement: • KW_IF '(' expression ')' ':' commands KW_ENDIF
   89             | • KW_IF '(' expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   90 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ']' ':' commands KW_ENDFOR
   91              | • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ':' expression ']' commands KW_ENDFOR
   92 compound_array_a: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   94 while_statement: • KW_WHILE '(' expression ')' ':' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 55
    KW_CONST       shift, and go to state 7
    KW_IF          shift, and go to state 56
    KW_FOR         shift, and go to state 57
    KW_WHILE       shift, and go to state 58
    KW_BREAK       shift, and go to state 59
    KW_RETURN      shift, and go to state 60
    KW_CONTINUE    shift, and go to state 61
    ';'            shift, and go to state 62

    main_body             go to state 199
    constant_declaration  go to state 63
    variable_declaration  go to state 64
    array_var             go to state 13
    commands              go to state 200
    command               go to state 66
    variable_assignement  go to state 67
    array_assignement     go to state 68
    if_statement          go to state 69
    for_statement         go to state 70
    compound_array_a      go to state 71
    compound_array_i      go to state 72
    while_statement       go to state 73


State 173

   81 command: TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 201


State 174

   82 command: TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 202


State 175

   83 command: TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 203


State 176

   84 command: TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 204


State 177

   85 command: TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 205


State 178

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   92 compound_array_a: TK_IDENTIFIER ASSIGN '[' • expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: TK_IDENTIFIER ASSIGN '[' • expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 206
    math_expression     go to state 43
    logical_expression  go to state 44


State 179

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   86 variable_assignement: TK_IDENTIFIER SIMPLE_ASSIGN expression •  [';']

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 86 (variable_assignement)


State 180

   80 command: TK_IDENTIFIER '(' ')' • ';'

    ';'  shift, and go to state 207


State 181

   79 command: TK_IDENTIFIER '(' function_arg • ')' ';'
   96 function_arg: function_arg • ',' expression

    ')'  shift, and go to state 208
    ','  shift, and go to state 188


State 182

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   87 array_assignement: TK_IDENTIFIER brackets SIMPLE_ASSIGN • expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 209
    math_expression     go to state 43
    logical_expression  go to state 44


State 183

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   88 if_statement: KW_IF '(' expression • ')' ':' commands KW_ENDIF
   89             | KW_IF '(' expression • ')' ':' commands KW_ELSE ':' commands KW_ENDIF

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101
    ')'     shift, and go to state 210


State 184

   90 for_statement: KW_FOR TK_IDENTIFIER KW_IN • '[' expression ':' expression ']' ':' commands KW_ENDFOR
   91              | KW_FOR TK_IDENTIFIER KW_IN • '[' expression ':' expression ':' expression ']' commands KW_ENDFOR

    '['  shift, and go to state 211


State 185

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   94 while_statement: KW_WHILE '(' expression • ')' ':' commands KW_ENDWHILE

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101
    ')'     shift, and go to state 212


State 186

   78 command: KW_RETURN expression ';' •

    $default  reduce using rule 78 (command)


State 187

   31 expression: TK_IDENTIFIER '(' function_arg ')' •

    $default  reduce using rule 31 (expression)


State 188

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   96 function_arg: function_arg ',' • expression

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 213
    math_expression     go to state 43
    logical_expression  go to state 44


State 189

   12 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING ':' KW_STR •

    $default  reduce using rule 12 (constant_declaration)


State 190

   11 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL ':' KW_SCALAR •

    $default  reduce using rule 11 (constant_declaration)


State 191

   10 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER ':' KW_INTEGER •

    $default  reduce using rule 10 (constant_declaration)


State 192

   13 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE ':' KW_BOOL •

    $default  reduce using rule 13 (constant_declaration)


State 193

   14 constant_declaration: KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE ':' KW_BOOL •

    $default  reduce using rule 14 (constant_declaration)


State 194

  106 args: TK_IDENTIFIER '[' ']' • ':' data_type
  107     | TK_IDENTIFIER '[' ']' • ':' data_type ',' args

    ':'  shift, and go to state 214


State 195

  104 args: TK_IDENTIFIER ':' data_type •  [')']
  105     | TK_IDENTIFIER ':' data_type • ',' args

    ','  shift, and go to state 215

    $default  reduce using rule 104 (args)


State 196

   21 data_type: • KW_INTEGER
   22          | • KW_BOOL
   23          | • KW_SCALAR
   24          | • KW_STR
   98 function_header: TK_IDENTIFIER '(' ')' '-' '>' • data_type ':'
  100                | TK_IDENTIFIER '(' ')' '-' '>' • KW_VOID ':'

    KW_INTEGER  shift, and go to state 45
    KW_SCALAR   shift, and go to state 46
    KW_STR      shift, and go to state 47
    KW_BOOL     shift, and go to state 48
    KW_VOID     shift, and go to state 216

    data_type  go to state 217


State 197

   97 function_header: TK_IDENTIFIER '(' args ')' '-' • '>' data_type ':'
   99                | TK_IDENTIFIER '(' args ')' '-' • '>' KW_VOID ':'

    '>'  shift, and go to state 218


State 198

  101 function_header: TK_IDENTIFIER '(' args ')' ':' •

    $default  reduce using rule 101 (function_header)


State 199

    8 s_main_s: KW_DEF KW_MAIN '(' ')' ':' main_body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 219


State 200

    9 main_body: commands •

    $default  reduce using rule 9 (main_body)


State 201

   81 command: TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 81 (command)


State 202

   82 command: TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 82 (command)


State 203

   83 command: TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 83 (command)


State 204

   84 command: TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 84 (command)


State 205

   85 command: TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 85 (command)


State 206

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   92 compound_array_a: TK_IDENTIFIER ASSIGN '[' expression • KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression • KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type

    KW_FOR  shift, and go to state 220
    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101


State 207

   80 command: TK_IDENTIFIER '(' ')' ';' •

    $default  reduce using rule 80 (command)


State 208

   79 command: TK_IDENTIFIER '(' function_arg ')' • ';'

    ';'  shift, and go to state 221


State 209

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   87 array_assignement: TK_IDENTIFIER brackets SIMPLE_ASSIGN expression •  [';']

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 87 (array_assignement)


State 210

   88 if_statement: KW_IF '(' expression ')' • ':' commands KW_ENDIF
   89             | KW_IF '(' expression ')' • ':' commands KW_ELSE ':' commands KW_ENDIF

    ':'  shift, and go to state 222


State 211

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   90 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' • expression ':' expression ']' ':' commands KW_ENDFOR
   91              | KW_FOR TK_IDENTIFIER KW_IN '[' • expression ':' expression ':' expression ']' commands KW_ENDFOR

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 223
    math_expression     go to state 43
    logical_expression  go to state 44


State 212

   94 while_statement: KW_WHILE '(' expression ')' • ':' commands KW_ENDWHILE

    ':'  shift, and go to state 224


State 213

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   96 function_arg: function_arg ',' expression •  [')', ',']

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101

    $default  reduce using rule 96 (function_arg)


State 214

   21 data_type: • KW_INTEGER
   22          | • KW_BOOL
   23          | • KW_SCALAR
   24          | • KW_STR
  106 args: TK_IDENTIFIER '[' ']' ':' • data_type
  107     | TK_IDENTIFIER '[' ']' ':' • data_type ',' args

    KW_INTEGER  shift, and go to state 45
    KW_SCALAR   shift, and go to state 46
    KW_STR      shift, and go to state 47
    KW_BOOL     shift, and go to state 48

    data_type  go to state 225


State 215

  104 args: • TK_IDENTIFIER ':' data_type
  105     | • TK_IDENTIFIER ':' data_type ',' args
  105     | TK_IDENTIFIER ':' data_type ',' • args
  106     | • TK_IDENTIFIER '[' ']' ':' data_type
  107     | • TK_IDENTIFIER '[' ']' ':' data_type ',' args

    TK_IDENTIFIER  shift, and go to state 109

    args  go to state 226


State 216

  100 function_header: TK_IDENTIFIER '(' ')' '-' '>' KW_VOID • ':'

    ':'  shift, and go to state 227


State 217

   98 function_header: TK_IDENTIFIER '(' ')' '-' '>' data_type • ':'

    ':'  shift, and go to state 228


State 218

   21 data_type: • KW_INTEGER
   22          | • KW_BOOL
   23          | • KW_SCALAR
   24          | • KW_STR
   97 function_header: TK_IDENTIFIER '(' args ')' '-' '>' • data_type ':'
   99                | TK_IDENTIFIER '(' args ')' '-' '>' • KW_VOID ':'

    KW_INTEGER  shift, and go to state 45
    KW_SCALAR   shift, and go to state 46
    KW_STR      shift, and go to state 47
    KW_BOOL     shift, and go to state 48
    KW_VOID     shift, and go to state 229

    data_type  go to state 230


State 219

    8 s_main_s: KW_DEF KW_MAIN '(' ')' ':' main_body KW_ENDDEF • ';'

    ';'  shift, and go to state 231


State 220

   92 compound_array_a: TK_IDENTIFIER ASSIGN '[' expression KW_FOR • TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR • TK_IDENTIFIER ':' expression ']' ':' data_type

    TK_IDENTIFIER  shift, and go to state 232


State 221

   79 command: TK_IDENTIFIER '(' function_arg ')' ';' •

    $default  reduce using rule 79 (command)


State 222

   10 constant_declaration: • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER ':' KW_INTEGER
   11                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL ':' KW_SCALAR
   12                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING ':' KW_STR
   13                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE ':' KW_BOOL
   14                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE ':' KW_BOOL
   16 variable_declaration: • TK_IDENTIFIER ':' data_type
   17                     | • array_var ':' data_type
   18                     | • TK_IDENTIFIER ',' variable_declaration
   19                     | • array_var ',' variable_declaration
   20 array_var: • TK_IDENTIFIER brackets
   63 commands: • command commands
   64         | • command
   65 command: • ';'
   66        | • variable_assignement ';'
   67        | • variable_declaration ';'
   68        | • constant_declaration ';'
   69        | • array_assignement ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER SIMPLE_ASSIGN expression
   87 array_assignement: • TK_IDENTIFIER brackets SIMPLE_ASSIGN expression
   88 if_statement: • KW_IF '(' expression ')' ':' commands KW_ENDIF
   88             | KW_IF '(' expression ')' ':' • commands KW_ENDIF
   89             | • KW_IF '(' expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   89             | KW_IF '(' expression ')' ':' • commands KW_ELSE ':' commands KW_ENDIF
   90 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ']' ':' commands KW_ENDFOR
   91              | • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ':' expression ']' commands KW_ENDFOR
   92 compound_array_a: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   94 while_statement: • KW_WHILE '(' expression ')' ':' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 55
    KW_CONST       shift, and go to state 7
    KW_IF          shift, and go to state 56
    KW_FOR         shift, and go to state 57
    KW_WHILE       shift, and go to state 58
    KW_BREAK       shift, and go to state 59
    KW_RETURN      shift, and go to state 60
    KW_CONTINUE    shift, and go to state 61
    ';'            shift, and go to state 62

    constant_declaration  go to state 63
    variable_declaration  go to state 64
    array_var             go to state 13
    commands              go to state 233
    command               go to state 66
    variable_assignement  go to state 67
    array_assignement     go to state 68
    if_statement          go to state 69
    for_statement         go to state 70
    compound_array_a      go to state 71
    compound_array_i      go to state 72
    while_statement       go to state 73


State 223

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   90 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' expression • ':' expression ']' ':' commands KW_ENDFOR
   91              | KW_FOR TK_IDENTIFIER KW_IN '[' expression • ':' expression ':' expression ']' commands KW_ENDFOR

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101
    ':'     shift, and go to state 234


State 224

   10 constant_declaration: • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER ':' KW_INTEGER
   11                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL ':' KW_SCALAR
   12                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING ':' KW_STR
   13                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE ':' KW_BOOL
   14                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE ':' KW_BOOL
   16 variable_declaration: • TK_IDENTIFIER ':' data_type
   17                     | • array_var ':' data_type
   18                     | • TK_IDENTIFIER ',' variable_declaration
   19                     | • array_var ',' variable_declaration
   20 array_var: • TK_IDENTIFIER brackets
   63 commands: • command commands
   64         | • command
   65 command: • ';'
   66        | • variable_assignement ';'
   67        | • variable_declaration ';'
   68        | • constant_declaration ';'
   69        | • array_assignement ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER SIMPLE_ASSIGN expression
   87 array_assignement: • TK_IDENTIFIER brackets SIMPLE_ASSIGN expression
   88 if_statement: • KW_IF '(' expression ')' ':' commands KW_ENDIF
   89             | • KW_IF '(' expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   90 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ']' ':' commands KW_ENDFOR
   91              | • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ':' expression ']' commands KW_ENDFOR
   92 compound_array_a: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   94 while_statement: • KW_WHILE '(' expression ')' ':' commands KW_ENDWHILE
   94                | KW_WHILE '(' expression ')' ':' • commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 55
    KW_CONST       shift, and go to state 7
    KW_IF          shift, and go to state 56
    KW_FOR         shift, and go to state 57
    KW_WHILE       shift, and go to state 58
    KW_BREAK       shift, and go to state 59
    KW_RETURN      shift, and go to state 60
    KW_CONTINUE    shift, and go to state 61
    ';'            shift, and go to state 62

    constant_declaration  go to state 63
    variable_declaration  go to state 64
    array_var             go to state 13
    commands              go to state 235
    command               go to state 66
    variable_assignement  go to state 67
    array_assignement     go to state 68
    if_statement          go to state 69
    for_statement         go to state 70
    compound_array_a      go to state 71
    compound_array_i      go to state 72
    while_statement       go to state 73


State 225

  106 args: TK_IDENTIFIER '[' ']' ':' data_type •  [')']
  107     | TK_IDENTIFIER '[' ']' ':' data_type • ',' args

    ','  shift, and go to state 236

    $default  reduce using rule 106 (args)


State 226

  105 args: TK_IDENTIFIER ':' data_type ',' args •

    $default  reduce using rule 105 (args)


State 227

  100 function_header: TK_IDENTIFIER '(' ')' '-' '>' KW_VOID ':' •

    $default  reduce using rule 100 (function_header)


State 228

   98 function_header: TK_IDENTIFIER '(' ')' '-' '>' data_type ':' •

    $default  reduce using rule 98 (function_header)


State 229

   99 function_header: TK_IDENTIFIER '(' args ')' '-' '>' KW_VOID • ':'

    ':'  shift, and go to state 237


State 230

   97 function_header: TK_IDENTIFIER '(' args ')' '-' '>' data_type • ':'

    ':'  shift, and go to state 238


State 231

    8 s_main_s: KW_DEF KW_MAIN '(' ')' ':' main_body KW_ENDDEF ';' •

    $default  reduce using rule 8 (s_main_s)


State 232

   92 compound_array_a: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER • ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER • ':' expression ']' ':' data_type

    ':'  shift, and go to state 239


State 233

   88 if_statement: KW_IF '(' expression ')' ':' commands • KW_ENDIF
   89             | KW_IF '(' expression ')' ':' commands • KW_ELSE ':' commands KW_ENDIF

    KW_ELSE   shift, and go to state 240
    KW_ENDIF  shift, and go to state 241


State 234

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   90 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' • expression ']' ':' commands KW_ENDFOR
   91              | KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' • expression ':' expression ']' commands KW_ENDFOR

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 242
    math_expression     go to state 43
    logical_expression  go to state 44


State 235

   94 while_statement: KW_WHILE '(' expression ')' ':' commands • KW_ENDWHILE

    KW_ENDWHILE  shift, and go to state 243


State 236

  104 args: • TK_IDENTIFIER ':' data_type
  105     | • TK_IDENTIFIER ':' data_type ',' args
  106     | • TK_IDENTIFIER '[' ']' ':' data_type
  107     | • TK_IDENTIFIER '[' ']' ':' data_type ',' args
  107     | TK_IDENTIFIER '[' ']' ':' data_type ',' • args

    TK_IDENTIFIER  shift, and go to state 109

    args  go to state 244


State 237

   99 function_header: TK_IDENTIFIER '(' args ')' '-' '>' KW_VOID ':' •

    $default  reduce using rule 99 (function_header)


State 238

   97 function_header: TK_IDENTIFIER '(' args ')' '-' '>' data_type ':' •

    $default  reduce using rule 97 (function_header)


State 239

   21 data_type: • KW_INTEGER
   22          | • KW_BOOL
   23          | • KW_SCALAR
   24          | • KW_STR
   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   92 compound_array_a: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' • data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' • expression ']' ':' data_type

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_INTEGER     shift, and go to state 45
    KW_SCALAR      shift, and go to state 46
    KW_STR         shift, and go to state 47
    KW_BOOL        shift, and go to state 48
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    data_type           go to state 245
    expression          go to state 246
    math_expression     go to state 43
    logical_expression  go to state 44


State 240

   89 if_statement: KW_IF '(' expression ')' ':' commands KW_ELSE • ':' commands KW_ENDIF

    ':'  shift, and go to state 247


State 241

   88 if_statement: KW_IF '(' expression ')' ':' commands KW_ENDIF •

    $default  reduce using rule 88 (if_statement)


State 242

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   90 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression • ']' ':' commands KW_ENDFOR
   91              | KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression • ':' expression ']' commands KW_ENDFOR

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101
    ']'     shift, and go to state 248
    ':'     shift, and go to state 249


State 243

   94 while_statement: KW_WHILE '(' expression ')' ':' commands KW_ENDWHILE •

    $default  reduce using rule 94 (while_statement)


State 244

  107 args: TK_IDENTIFIER '[' ']' ':' data_type ',' args •

    $default  reduce using rule 107 (args)


State 245

   92 compound_array_a: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type • KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type

    KW_IN  shift, and go to state 250


State 246

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   93 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression • ']' ':' data_type

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101
    ']'     shift, and go to state 251


State 247

   10 constant_declaration: • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER ':' KW_INTEGER
   11                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL ':' KW_SCALAR
   12                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING ':' KW_STR
   13                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE ':' KW_BOOL
   14                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE ':' KW_BOOL
   16 variable_declaration: • TK_IDENTIFIER ':' data_type
   17                     | • array_var ':' data_type
   18                     | • TK_IDENTIFIER ',' variable_declaration
   19                     | • array_var ',' variable_declaration
   20 array_var: • TK_IDENTIFIER brackets
   63 commands: • command commands
   64         | • command
   65 command: • ';'
   66        | • variable_assignement ';'
   67        | • variable_declaration ';'
   68        | • constant_declaration ';'
   69        | • array_assignement ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER SIMPLE_ASSIGN expression
   87 array_assignement: • TK_IDENTIFIER brackets SIMPLE_ASSIGN expression
   88 if_statement: • KW_IF '(' expression ')' ':' commands KW_ENDIF
   89             | • KW_IF '(' expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   89             | KW_IF '(' expression ')' ':' commands KW_ELSE ':' • commands KW_ENDIF
   90 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ']' ':' commands KW_ENDFOR
   91              | • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ':' expression ']' commands KW_ENDFOR
   92 compound_array_a: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   94 while_statement: • KW_WHILE '(' expression ')' ':' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 55
    KW_CONST       shift, and go to state 7
    KW_IF          shift, and go to state 56
    KW_FOR         shift, and go to state 57
    KW_WHILE       shift, and go to state 58
    KW_BREAK       shift, and go to state 59
    KW_RETURN      shift, and go to state 60
    KW_CONTINUE    shift, and go to state 61
    ';'            shift, and go to state 62

    constant_declaration  go to state 63
    variable_declaration  go to state 64
    array_var             go to state 13
    commands              go to state 252
    command               go to state 66
    variable_assignement  go to state 67
    array_assignement     go to state 68
    if_statement          go to state 69
    for_statement         go to state 70
    compound_array_a      go to state 71
    compound_array_i      go to state 72
    while_statement       go to state 73


State 248

   90 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ']' • ':' commands KW_ENDFOR

    ':'  shift, and go to state 253


State 249

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   91 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ':' • expression ']' commands KW_ENDFOR

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 254
    math_expression     go to state 43
    logical_expression  go to state 44


State 250

   92 compound_array_a: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN • TK_IDENTIFIER KW_OF expression ']' ':' data_type

    TK_IDENTIFIER  shift, and go to state 255


State 251

   93 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' • ':' data_type

    ':'  shift, and go to state 256


State 252

   89 if_statement: KW_IF '(' expression ')' ':' commands KW_ELSE ':' commands • KW_ENDIF

    KW_ENDIF  shift, and go to state 257


State 253

   10 constant_declaration: • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER ':' KW_INTEGER
   11                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL ':' KW_SCALAR
   12                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING ':' KW_STR
   13                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE ':' KW_BOOL
   14                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE ':' KW_BOOL
   16 variable_declaration: • TK_IDENTIFIER ':' data_type
   17                     | • array_var ':' data_type
   18                     | • TK_IDENTIFIER ',' variable_declaration
   19                     | • array_var ',' variable_declaration
   20 array_var: • TK_IDENTIFIER brackets
   63 commands: • command commands
   64         | • command
   65 command: • ';'
   66        | • variable_assignement ';'
   67        | • variable_declaration ';'
   68        | • constant_declaration ';'
   69        | • array_assignement ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER SIMPLE_ASSIGN expression
   87 array_assignement: • TK_IDENTIFIER brackets SIMPLE_ASSIGN expression
   88 if_statement: • KW_IF '(' expression ')' ':' commands KW_ENDIF
   89             | • KW_IF '(' expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   90 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ']' ':' commands KW_ENDFOR
   90              | KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ']' ':' • commands KW_ENDFOR
   91              | • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ':' expression ']' commands KW_ENDFOR
   92 compound_array_a: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   94 while_statement: • KW_WHILE '(' expression ')' ':' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 55
    KW_CONST       shift, and go to state 7
    KW_IF          shift, and go to state 56
    KW_FOR         shift, and go to state 57
    KW_WHILE       shift, and go to state 58
    KW_BREAK       shift, and go to state 59
    KW_RETURN      shift, and go to state 60
    KW_CONTINUE    shift, and go to state 61
    ';'            shift, and go to state 62

    constant_declaration  go to state 63
    variable_declaration  go to state 64
    array_var             go to state 13
    commands              go to state 258
    command               go to state 66
    variable_assignement  go to state 67
    array_assignement     go to state 68
    if_statement          go to state 69
    for_statement         go to state 70
    compound_array_a      go to state 71
    compound_array_i      go to state 72
    while_statement       go to state 73


State 254

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   91 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ':' expression • ']' commands KW_ENDFOR

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101
    ']'     shift, and go to state 259


State 255

   92 compound_array_a: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER • KW_OF expression ']' ':' data_type

    KW_OF  shift, and go to state 260


State 256

   21 data_type: • KW_INTEGER
   22          | • KW_BOOL
   23          | • KW_SCALAR
   24          | • KW_STR
   93 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' • data_type

    KW_INTEGER  shift, and go to state 45
    KW_SCALAR   shift, and go to state 46
    KW_STR      shift, and go to state 47
    KW_BOOL     shift, and go to state 48

    data_type  go to state 261


State 257

   89 if_statement: KW_IF '(' expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF •

    $default  reduce using rule 89 (if_statement)


State 258

   90 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ']' ':' commands • KW_ENDFOR

    KW_ENDFOR  shift, and go to state 262


State 259

   10 constant_declaration: • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_NUMBER ':' KW_INTEGER
   11                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_REAL ':' KW_SCALAR
   12                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN TK_STRING ':' KW_STR
   13                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_TRUE ':' KW_BOOL
   14                     | • KW_CONST TK_IDENTIFIER SIMPLE_ASSIGN KW_FALSE ':' KW_BOOL
   16 variable_declaration: • TK_IDENTIFIER ':' data_type
   17                     | • array_var ':' data_type
   18                     | • TK_IDENTIFIER ',' variable_declaration
   19                     | • array_var ',' variable_declaration
   20 array_var: • TK_IDENTIFIER brackets
   63 commands: • command commands
   64         | • command
   65 command: • ';'
   66        | • variable_assignement ';'
   67        | • variable_declaration ';'
   68        | • constant_declaration ';'
   69        | • array_assignement ';'
   70        | • if_statement ';'
   71        | • for_statement ';'
   72        | • compound_array_i ';'
   73        | • compound_array_a ';'
   74        | • while_statement ';'
   75        | • KW_BREAK ';'
   76        | • KW_CONTINUE ';'
   77        | • KW_RETURN ';'
   78        | • KW_RETURN expression ';'
   79        | • TK_IDENTIFIER '(' function_arg ')' ';'
   80        | • TK_IDENTIFIER '(' ')' ';'
   81        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   84        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   85        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   86 variable_assignement: • TK_IDENTIFIER SIMPLE_ASSIGN expression
   87 array_assignement: • TK_IDENTIFIER brackets SIMPLE_ASSIGN expression
   88 if_statement: • KW_IF '(' expression ')' ':' commands KW_ENDIF
   89             | • KW_IF '(' expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   90 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ']' ':' commands KW_ENDFOR
   91              | • KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ':' expression ']' commands KW_ENDFOR
   91              | KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ':' expression ']' • commands KW_ENDFOR
   92 compound_array_a: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type
   93 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   94 while_statement: • KW_WHILE '(' expression ')' ':' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 55
    KW_CONST       shift, and go to state 7
    KW_IF          shift, and go to state 56
    KW_FOR         shift, and go to state 57
    KW_WHILE       shift, and go to state 58
    KW_BREAK       shift, and go to state 59
    KW_RETURN      shift, and go to state 60
    KW_CONTINUE    shift, and go to state 61
    ';'            shift, and go to state 62

    constant_declaration  go to state 63
    variable_declaration  go to state 64
    array_var             go to state 13
    commands              go to state 263
    command               go to state 66
    variable_assignement  go to state 67
    array_assignement     go to state 68
    if_statement          go to state 69
    for_statement         go to state 70
    compound_array_a      go to state 71
    compound_array_i      go to state 72
    while_statement       go to state 73


State 260

   25 expression: • TK_NUMBER
   26           | • TK_REAL
   27           | • TK_CHAR
   28           | • TK_STRING
   29           | • TK_DIGIT
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   92 compound_array_a: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF • expression ']' ':' data_type

    TK_IDENTIFIER  shift, and go to state 28
    TK_CHAR        shift, and go to state 29
    TK_STRING      shift, and go to state 30
    TK_REAL        shift, and go to state 31
    TK_DIGIT       shift, and go to state 32
    TK_NUMBER      shift, and go to state 33
    KW_TRUE        shift, and go to state 34
    KW_FALSE       shift, and go to state 35
    '!'            shift, and go to state 36
    KW_NOT         shift, and go to state 37
    '-'            shift, and go to state 38
    '+'            shift, and go to state 39
    '('            shift, and go to state 40

    expression          go to state 264
    math_expression     go to state 43
    logical_expression  go to state 44


State 261

   93 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type •

    $default  reduce using rule 93 (compound_array_i)


State 262

   90 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ']' ':' commands KW_ENDFOR •

    $default  reduce using rule 90 (for_statement)


State 263

   91 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ':' expression ']' commands • KW_ENDFOR

    KW_ENDFOR  shift, and go to state 265


State 264

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   92 compound_array_a: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression • ']' ':' data_type

    KW_AND  shift, and go to state 85
    KW_OR   shift, and go to state 86
    LOR     shift, and go to state 87
    LAND    shift, and go to state 88
    NEQ     shift, and go to state 89
    EQ      shift, and go to state 90
    LEQ     shift, and go to state 91
    GEQ     shift, and go to state 92
    '<'     shift, and go to state 93
    '>'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    MOD     shift, and go to state 97
    KW_MOD  shift, and go to state 98
    '-'     shift, and go to state 99
    '+'     shift, and go to state 100
    POW     shift, and go to state 101
    ']'     shift, and go to state 266


State 265

   91 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' expression ':' expression ':' expression ']' commands KW_ENDFOR •

    $default  reduce using rule 91 (for_statement)


State 266

   92 compound_array_a: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' • ':' data_type

    ':'  shift, and go to state 267


State 267

   21 data_type: • KW_INTEGER
   22          | • KW_BOOL
   23          | • KW_SCALAR
   24          | • KW_STR
   92 compound_array_a: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' • data_type

    KW_INTEGER  shift, and go to state 45
    KW_SCALAR   shift, and go to state 46
    KW_STR      shift, and go to state 47
    KW_BOOL     shift, and go to state 48

    data_type  go to state 268


State 268

   92 compound_array_a: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' data_type KW_IN TK_IDENTIFIER KW_OF expression ']' ':' data_type •

    $default  reduce using rule 92 (compound_array_a)
