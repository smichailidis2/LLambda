Terminals unused in grammar

    KW_OF
    '.'


Grammar

    0 $accept: input $end

    1 input: PROGRAM_START

    2 PROGRAM_START: pdeclare

    3 pdeclare: code s_main_s code

    4 code: ε
    5     | code constant_declaration
    6     | code function_declaration
    7     | code variable_declaration

    8 s_main_s: KW_DEF KW_MAIN '(' ')' ':' main_body KW_ENDDEF

    9 main_body: commands

   10 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_NUMBER ':' KW_INTEGER
   11                     | KW_CONST TK_IDENTIFIER '=' TK_DECIMAL ':' KW_SCALAR
   12                     | KW_CONST TK_IDENTIFIER '=' TK_STRING ':' KW_STR
   13                     | KW_CONST TK_IDENTIFIER '=' KW_TRUE ':' KW_BOOL
   14                     | KW_CONST TK_IDENTIFIER '=' KW_FALSE ':' KW_BOOL

   15 function_declaration: KW_DEF function_header function_body KW_ENDDEF

   16 variable_declaration: TK_IDENTIFIER ':' data_type ';'
   17                     | TK_IDENTIFIER ',' variable_declaration
   18                     | array_var

   19 array_var: TK_IDENTIFIER brackets ':' data_type ';'

   20 data_type: KW_INTEGER
   21          | KW_BOOL
   22          | KW_SCALAR
   23          | KW_STR

   24 expression: TK_NUMBER
   25           | TK_REAL
   26           | TK_CHAR
   27           | TK_STRING
   28           | TK_DIGIT
   29           | TK_DECIMAL
   30           | TK_IDENTIFIER
   31           | TK_IDENTIFIER '(' function_arg ')'
   32           | TK_IDENTIFIER '(' ')'
   33           | TK_IDENTIFIER brackets
   34           | KW_TRUE
   35           | KW_FALSE
   36           | '(' expression ')'
   37           | math_expression
   38           | logical_expression
   39           | '+' expression
   40           | '-' expression

   41 math_expression: expression POW expression
   42                | expression '+' expression
   43                | expression '-' expression
   44                | expression '*' expression
   45                | expression '/' expression
   46                | expression MOD expression
   47                | expression KW_MOD expression

   48 logical_expression: expression EQ expression
   49                   | expression LEQ expression
   50                   | expression GEQ expression
   51                   | expression NEQ expression
   52                   | expression '<' expression
   53                   | expression '>' expression
   54                   | expression LAND expression
   55                   | expression KW_AND expression
   56                   | expression LOR expression
   57                   | expression KW_OR expression
   58                   | '!' expression
   59                   | KW_NOT expression

   60 brackets: '[' TK_NUMBER ']'
   61         | brackets '[' TK_NUMBER ']'
   62         | '[' ']'

   63 commands: command commands
   64         | command

   65 command: ';'
   66        | variable_assignement
   67        | TK_IDENTIFIER brackets '=' expression ';'
   68        | if_statement ';'
   69        | for_statement ';'
   70        | compound_array_i ';'
   71        | compound_array_a ';'
   72        | while_statement ';'
   73        | KW_BREAK ';'
   74        | KW_CONTINUE ';'
   75        | KW_RETURN ';'
   76        | KW_RETURN expression ';'
   77        | TK_IDENTIFIER '(' function_arg ')' ';'
   78        | TK_IDENTIFIER '(' ')' ';'
   79        | TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   80        | TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   81        | TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   82        | TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   83        | TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'

   84 variable_assignement: TK_IDENTIFIER '=' expression ';'

   85 if_statement: KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   86             | KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF

   87 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   88              | KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR

   89 compound_array_a: TK_IDENTIFIER ASSIGN '[' ']'

   90 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type

   91 while_statement: KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE

   92 function_arg: expression
   93             | function_arg ',' expression

   94 function_header: TK_IDENTIFIER '(' function_arg ')' '-' '>' data_type

   95 function_body: commands


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 58
    '(' (40) 8 31 32 36 77 78 85 86 91 94
    ')' (41) 8 31 32 36 77 78 85 86 91 94
    '*' (42) 44
    '+' (43) 39 42
    ',' (44) 17 93
    '-' (45) 40 43 94
    '.' (46)
    '/' (47) 45
    ':' (58) 8 10 11 12 13 14 16 19 85 86 87 88 90
    ';' (59) 16 19 65 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84
    '<' (60) 52
    '=' (61) 10 11 12 13 14 67 84
    '>' (62) 53 94
    '[' (91) 60 61 62 87 88 89 90
    ']' (93) 60 61 62 87 88 89 90
    error (256)
    TK_IDENTIFIER <strng> (258) 10 11 12 13 14 16 17 19 30 31 32 33 67 77 78 79 80 81 82 83 84 87 88 89 90 94
    TK_CHAR <strng> (259) 26
    TK_STRING <strng> (260) 12 27
    TK_REAL <strng> (261) 25
    TK_DIGIT <strng> (262) 28
    TK_NUMBER <strng> (263) 10 24 60 61 87 88
    TK_DECIMAL <strng> (264) 11 29
    KW_MAIN (265) 8
    KW_INTEGER <strng> (266) 10 20
    KW_SCALAR <strng> (267) 11 22
    KW_STR <strng> (268) 12 23
    KW_BOOL <strng> (269) 13 14 21
    KW_TRUE <strng> (270) 13 34
    KW_FALSE <strng> (271) 14 35
    KW_CONST (272) 10 11 12 13 14
    KW_IF (273) 85 86
    KW_ELSE (274) 86
    KW_ENDIF (275) 85 86
    KW_FOR (276) 87 88 90
    KW_IN (277) 87 88
    KW_ENDFOR (278) 87 88
    KW_WHILE (279) 91
    KW_ENDWHILE (280) 91
    KW_BREAK (281) 73
    KW_RETURN (282) 75 76
    KW_CONTINUE (283) 74
    KW_AND (284) 55
    KW_OR (285) 57
    KW_OF (286)
    KW_DEF (287) 8 15
    KW_ENDDEF (288) 8 15
    ADD_ASSIGN (289) 79
    SUB_ASSIGN (290) 80
    MULT_ASSIGN (291) 81
    DIV_ASSIGN (292) 82
    MOD_ASSIGN (293) 83
    ASSIGN (294) 89 90
    LOR (295) 56
    LAND (296) 54
    KW_NOT (297) 59
    NEQ (298) 51
    EQ (299) 48
    LEQ (300) 49
    GEQ (301) 50
    MOD (302) 46
    KW_MOD (303) 47
    POW (304) 41


Nonterminals, with rules where they appear

    $accept (66)
        on left: 0
    input (67)
        on left: 1
        on right: 0
    PROGRAM_START <strng> (68)
        on left: 2
        on right: 1
    pdeclare <strng> (69)
        on left: 3
        on right: 2
    code <strng> (70)
        on left: 4 5 6 7
        on right: 3 5 6 7
    s_main_s <strng> (71)
        on left: 8
        on right: 3
    main_body <strng> (72)
        on left: 9
        on right: 8
    constant_declaration <strng> (73)
        on left: 10 11 12 13 14
        on right: 5
    function_declaration <strng> (74)
        on left: 15
        on right: 6
    variable_declaration <strng> (75)
        on left: 16 17 18
        on right: 7 17
    array_var <strng> (76)
        on left: 19
        on right: 18
    data_type <strng> (77)
        on left: 20 21 22 23
        on right: 16 19 90 94
    expression <strng> (78)
        on left: 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
        on right: 36 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 67 76 84 90 92 93
    math_expression <strng> (79)
        on left: 41 42 43 44 45 46 47
        on right: 37
    logical_expression <strng> (80)
        on left: 48 49 50 51 52 53 54 55 56 57 58 59
        on right: 38 85 86 91
    brackets <strng> (81)
        on left: 60 61 62
        on right: 19 33 61 67
    commands <strng> (82)
        on left: 63 64
        on right: 9 63 85 86 87 88 91 95
    command <strng> (83)
        on left: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83
        on right: 63 64
    variable_assignement <strng> (84)
        on left: 84
        on right: 66
    if_statement <strng> (85)
        on left: 85 86
        on right: 68
    for_statement <strng> (86)
        on left: 87 88
        on right: 69
    compound_array_a <strng> (87)
        on left: 89
        on right: 71
    compound_array_i <strng> (88)
        on left: 90
        on right: 70
    while_statement <strng> (89)
        on left: 91
        on right: 72
    function_arg <strng> (90)
        on left: 92 93
        on right: 31 77 93 94
    function_header <strng> (91)
        on left: 94
        on right: 15
    function_body <strng> (92)
        on left: 95
        on right: 15


State 0

    0 $accept: • input $end
    1 input: • PROGRAM_START
    2 PROGRAM_START: • pdeclare
    3 pdeclare: • code s_main_s code
    4 code: ε •
    5     | • code constant_declaration
    6     | • code function_declaration
    7     | • code variable_declaration

    $default  reduce using rule 4 (code)

    input          go to state 1
    PROGRAM_START  go to state 2
    pdeclare       go to state 3
    code           go to state 4


State 1

    0 $accept: input • $end

    $end  shift, and go to state 5


State 2

    1 input: PROGRAM_START •

    $default  reduce using rule 1 (input)


State 3

    2 PROGRAM_START: pdeclare •

    $default  reduce using rule 2 (PROGRAM_START)


State 4

    3 pdeclare: code • s_main_s code
    5 code: code • constant_declaration
    6     | code • function_declaration
    7     | code • variable_declaration
    8 s_main_s: • KW_DEF KW_MAIN '(' ')' ':' main_body KW_ENDDEF
   10 constant_declaration: • KW_CONST TK_IDENTIFIER '=' TK_NUMBER ':' KW_INTEGER
   11                     | • KW_CONST TK_IDENTIFIER '=' TK_DECIMAL ':' KW_SCALAR
   12                     | • KW_CONST TK_IDENTIFIER '=' TK_STRING ':' KW_STR
   13                     | • KW_CONST TK_IDENTIFIER '=' KW_TRUE ':' KW_BOOL
   14                     | • KW_CONST TK_IDENTIFIER '=' KW_FALSE ':' KW_BOOL
   15 function_declaration: • KW_DEF function_header function_body KW_ENDDEF
   16 variable_declaration: • TK_IDENTIFIER ':' data_type ';'
   17                     | • TK_IDENTIFIER ',' variable_declaration
   18                     | • array_var
   19 array_var: • TK_IDENTIFIER brackets ':' data_type ';'

    TK_IDENTIFIER  shift, and go to state 6
    KW_CONST       shift, and go to state 7
    KW_DEF         shift, and go to state 8

    s_main_s              go to state 9
    constant_declaration  go to state 10
    function_declaration  go to state 11
    variable_declaration  go to state 12
    array_var             go to state 13


State 5

    0 $accept: input $end •

    $default  accept


State 6

   16 variable_declaration: TK_IDENTIFIER • ':' data_type ';'
   17                     | TK_IDENTIFIER • ',' variable_declaration
   19 array_var: TK_IDENTIFIER • brackets ':' data_type ';'
   60 brackets: • '[' TK_NUMBER ']'
   61         | • brackets '[' TK_NUMBER ']'
   62         | • '[' ']'

    '['  shift, and go to state 14
    ':'  shift, and go to state 15
    ','  shift, and go to state 16

    brackets  go to state 17


State 7

   10 constant_declaration: KW_CONST • TK_IDENTIFIER '=' TK_NUMBER ':' KW_INTEGER
   11                     | KW_CONST • TK_IDENTIFIER '=' TK_DECIMAL ':' KW_SCALAR
   12                     | KW_CONST • TK_IDENTIFIER '=' TK_STRING ':' KW_STR
   13                     | KW_CONST • TK_IDENTIFIER '=' KW_TRUE ':' KW_BOOL
   14                     | KW_CONST • TK_IDENTIFIER '=' KW_FALSE ':' KW_BOOL

    TK_IDENTIFIER  shift, and go to state 18


State 8

    8 s_main_s: KW_DEF • KW_MAIN '(' ')' ':' main_body KW_ENDDEF
   15 function_declaration: KW_DEF • function_header function_body KW_ENDDEF
   94 function_header: • TK_IDENTIFIER '(' function_arg ')' '-' '>' data_type

    TK_IDENTIFIER  shift, and go to state 19
    KW_MAIN        shift, and go to state 20

    function_header  go to state 21


State 9

    3 pdeclare: code s_main_s • code
    4 code: ε •
    5     | • code constant_declaration
    6     | • code function_declaration
    7     | • code variable_declaration

    $default  reduce using rule 4 (code)

    code  go to state 22


State 10

    5 code: code constant_declaration •

    $default  reduce using rule 5 (code)


State 11

    6 code: code function_declaration •

    $default  reduce using rule 6 (code)


State 12

    7 code: code variable_declaration •

    $default  reduce using rule 7 (code)


State 13

   18 variable_declaration: array_var •

    $default  reduce using rule 18 (variable_declaration)


State 14

   60 brackets: '[' • TK_NUMBER ']'
   62         | '[' • ']'

    TK_NUMBER  shift, and go to state 23
    ']'        shift, and go to state 24


State 15

   16 variable_declaration: TK_IDENTIFIER ':' • data_type ';'
   20 data_type: • KW_INTEGER
   21          | • KW_BOOL
   22          | • KW_SCALAR
   23          | • KW_STR

    KW_INTEGER  shift, and go to state 25
    KW_SCALAR   shift, and go to state 26
    KW_STR      shift, and go to state 27
    KW_BOOL     shift, and go to state 28

    data_type  go to state 29


State 16

   16 variable_declaration: • TK_IDENTIFIER ':' data_type ';'
   17                     | • TK_IDENTIFIER ',' variable_declaration
   17                     | TK_IDENTIFIER ',' • variable_declaration
   18                     | • array_var
   19 array_var: • TK_IDENTIFIER brackets ':' data_type ';'

    TK_IDENTIFIER  shift, and go to state 6

    variable_declaration  go to state 30
    array_var             go to state 13


State 17

   19 array_var: TK_IDENTIFIER brackets • ':' data_type ';'
   61 brackets: brackets • '[' TK_NUMBER ']'

    '['  shift, and go to state 31
    ':'  shift, and go to state 32


State 18

   10 constant_declaration: KW_CONST TK_IDENTIFIER • '=' TK_NUMBER ':' KW_INTEGER
   11                     | KW_CONST TK_IDENTIFIER • '=' TK_DECIMAL ':' KW_SCALAR
   12                     | KW_CONST TK_IDENTIFIER • '=' TK_STRING ':' KW_STR
   13                     | KW_CONST TK_IDENTIFIER • '=' KW_TRUE ':' KW_BOOL
   14                     | KW_CONST TK_IDENTIFIER • '=' KW_FALSE ':' KW_BOOL

    '='  shift, and go to state 33


State 19

   94 function_header: TK_IDENTIFIER • '(' function_arg ')' '-' '>' data_type

    '('  shift, and go to state 34


State 20

    8 s_main_s: KW_DEF KW_MAIN • '(' ')' ':' main_body KW_ENDDEF

    '('  shift, and go to state 35


State 21

   15 function_declaration: KW_DEF function_header • function_body KW_ENDDEF
   63 commands: • command commands
   64         | • command
   65 command: • ';'
   66        | • variable_assignement
   67        | • TK_IDENTIFIER brackets '=' expression ';'
   68        | • if_statement ';'
   69        | • for_statement ';'
   70        | • compound_array_i ';'
   71        | • compound_array_a ';'
   72        | • while_statement ';'
   73        | • KW_BREAK ';'
   74        | • KW_CONTINUE ';'
   75        | • KW_RETURN ';'
   76        | • KW_RETURN expression ';'
   77        | • TK_IDENTIFIER '(' function_arg ')' ';'
   78        | • TK_IDENTIFIER '(' ')' ';'
   79        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   80        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   81        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   84 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   85 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   86             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   87 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   88              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   89 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   90 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   91 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE
   95 function_body: • commands

    TK_IDENTIFIER  shift, and go to state 36
    KW_IF          shift, and go to state 37
    KW_FOR         shift, and go to state 38
    KW_WHILE       shift, and go to state 39
    KW_BREAK       shift, and go to state 40
    KW_RETURN      shift, and go to state 41
    KW_CONTINUE    shift, and go to state 42
    ';'            shift, and go to state 43

    commands              go to state 44
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51
    function_body         go to state 52


State 22

    3 pdeclare: code s_main_s code •  [$end]
    5 code: code • constant_declaration
    6     | code • function_declaration
    7     | code • variable_declaration
   10 constant_declaration: • KW_CONST TK_IDENTIFIER '=' TK_NUMBER ':' KW_INTEGER
   11                     | • KW_CONST TK_IDENTIFIER '=' TK_DECIMAL ':' KW_SCALAR
   12                     | • KW_CONST TK_IDENTIFIER '=' TK_STRING ':' KW_STR
   13                     | • KW_CONST TK_IDENTIFIER '=' KW_TRUE ':' KW_BOOL
   14                     | • KW_CONST TK_IDENTIFIER '=' KW_FALSE ':' KW_BOOL
   15 function_declaration: • KW_DEF function_header function_body KW_ENDDEF
   16 variable_declaration: • TK_IDENTIFIER ':' data_type ';'
   17                     | • TK_IDENTIFIER ',' variable_declaration
   18                     | • array_var
   19 array_var: • TK_IDENTIFIER brackets ':' data_type ';'

    TK_IDENTIFIER  shift, and go to state 6
    KW_CONST       shift, and go to state 7
    KW_DEF         shift, and go to state 53

    $default  reduce using rule 3 (pdeclare)

    constant_declaration  go to state 10
    function_declaration  go to state 11
    variable_declaration  go to state 12
    array_var             go to state 13


State 23

   60 brackets: '[' TK_NUMBER • ']'

    ']'  shift, and go to state 54


State 24

   62 brackets: '[' ']' •

    $default  reduce using rule 62 (brackets)


State 25

   20 data_type: KW_INTEGER •

    $default  reduce using rule 20 (data_type)


State 26

   22 data_type: KW_SCALAR •

    $default  reduce using rule 22 (data_type)


State 27

   23 data_type: KW_STR •

    $default  reduce using rule 23 (data_type)


State 28

   21 data_type: KW_BOOL •

    $default  reduce using rule 21 (data_type)


State 29

   16 variable_declaration: TK_IDENTIFIER ':' data_type • ';'

    ';'  shift, and go to state 55


State 30

   17 variable_declaration: TK_IDENTIFIER ',' variable_declaration •

    $default  reduce using rule 17 (variable_declaration)


State 31

   61 brackets: brackets '[' • TK_NUMBER ']'

    TK_NUMBER  shift, and go to state 56


State 32

   19 array_var: TK_IDENTIFIER brackets ':' • data_type ';'
   20 data_type: • KW_INTEGER
   21          | • KW_BOOL
   22          | • KW_SCALAR
   23          | • KW_STR

    KW_INTEGER  shift, and go to state 25
    KW_SCALAR   shift, and go to state 26
    KW_STR      shift, and go to state 27
    KW_BOOL     shift, and go to state 28

    data_type  go to state 57


State 33

   10 constant_declaration: KW_CONST TK_IDENTIFIER '=' • TK_NUMBER ':' KW_INTEGER
   11                     | KW_CONST TK_IDENTIFIER '=' • TK_DECIMAL ':' KW_SCALAR
   12                     | KW_CONST TK_IDENTIFIER '=' • TK_STRING ':' KW_STR
   13                     | KW_CONST TK_IDENTIFIER '=' • KW_TRUE ':' KW_BOOL
   14                     | KW_CONST TK_IDENTIFIER '=' • KW_FALSE ':' KW_BOOL

    TK_STRING   shift, and go to state 58
    TK_NUMBER   shift, and go to state 59
    TK_DECIMAL  shift, and go to state 60
    KW_TRUE     shift, and go to state 61
    KW_FALSE    shift, and go to state 62


State 34

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   92 function_arg: • expression
   93             | • function_arg ',' expression
   94 function_header: TK_IDENTIFIER '(' • function_arg ')' '-' '>' data_type

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 77
    math_expression     go to state 78
    logical_expression  go to state 79
    function_arg        go to state 80


State 35

    8 s_main_s: KW_DEF KW_MAIN '(' • ')' ':' main_body KW_ENDDEF

    ')'  shift, and go to state 81


State 36

   60 brackets: • '[' TK_NUMBER ']'
   61         | • brackets '[' TK_NUMBER ']'
   62         | • '[' ']'
   67 command: TK_IDENTIFIER • brackets '=' expression ';'
   77        | TK_IDENTIFIER • '(' function_arg ')' ';'
   78        | TK_IDENTIFIER • '(' ')' ';'
   79        | TK_IDENTIFIER • ADD_ASSIGN TK_IDENTIFIER ';'
   80        | TK_IDENTIFIER • SUB_ASSIGN TK_IDENTIFIER ';'
   81        | TK_IDENTIFIER • MULT_ASSIGN TK_IDENTIFIER ';'
   82        | TK_IDENTIFIER • DIV_ASSIGN TK_IDENTIFIER ';'
   83        | TK_IDENTIFIER • MOD_ASSIGN TK_IDENTIFIER ';'
   84 variable_assignement: TK_IDENTIFIER • '=' expression ';'
   89 compound_array_a: TK_IDENTIFIER • ASSIGN '[' ']'
   90 compound_array_i: TK_IDENTIFIER • ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type

    ADD_ASSIGN   shift, and go to state 82
    SUB_ASSIGN   shift, and go to state 83
    MULT_ASSIGN  shift, and go to state 84
    DIV_ASSIGN   shift, and go to state 85
    MOD_ASSIGN   shift, and go to state 86
    ASSIGN       shift, and go to state 87
    '='          shift, and go to state 88
    '('          shift, and go to state 89
    '['          shift, and go to state 14

    brackets  go to state 90


State 37

   85 if_statement: KW_IF • '(' logical_expression ')' ':' commands KW_ENDIF
   86             | KW_IF • '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF

    '('  shift, and go to state 91


State 38

   87 for_statement: KW_FOR • TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   88              | KW_FOR • TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR

    TK_IDENTIFIER  shift, and go to state 92


State 39

   91 while_statement: KW_WHILE • '(' logical_expression ')' commands KW_ENDWHILE

    '('  shift, and go to state 93


State 40

   73 command: KW_BREAK • ';'

    ';'  shift, and go to state 94


State 41

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   75 command: KW_RETURN • ';'
   76        | KW_RETURN • expression ';'

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76
    ';'            shift, and go to state 95

    expression          go to state 96
    math_expression     go to state 78
    logical_expression  go to state 79


State 42

   74 command: KW_CONTINUE • ';'

    ';'  shift, and go to state 97


State 43

   65 command: ';' •

    $default  reduce using rule 65 (command)


State 44

   95 function_body: commands •

    $default  reduce using rule 95 (function_body)


State 45

   63 commands: • command commands
   63         | command • commands
   64         | • command
   64         | command •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE, KW_ENDDEF]
   65 command: • ';'
   66        | • variable_assignement
   67        | • TK_IDENTIFIER brackets '=' expression ';'
   68        | • if_statement ';'
   69        | • for_statement ';'
   70        | • compound_array_i ';'
   71        | • compound_array_a ';'
   72        | • while_statement ';'
   73        | • KW_BREAK ';'
   74        | • KW_CONTINUE ';'
   75        | • KW_RETURN ';'
   76        | • KW_RETURN expression ';'
   77        | • TK_IDENTIFIER '(' function_arg ')' ';'
   78        | • TK_IDENTIFIER '(' ')' ';'
   79        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   80        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   81        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   84 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   85 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   86             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   87 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   88              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   89 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   90 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   91 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 36
    KW_IF          shift, and go to state 37
    KW_FOR         shift, and go to state 38
    KW_WHILE       shift, and go to state 39
    KW_BREAK       shift, and go to state 40
    KW_RETURN      shift, and go to state 41
    KW_CONTINUE    shift, and go to state 42
    ';'            shift, and go to state 43

    $default  reduce using rule 64 (commands)

    commands              go to state 98
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51


State 46

   66 command: variable_assignement •

    $default  reduce using rule 66 (command)


State 47

   68 command: if_statement • ';'

    ';'  shift, and go to state 99


State 48

   69 command: for_statement • ';'

    ';'  shift, and go to state 100


State 49

   71 command: compound_array_a • ';'

    ';'  shift, and go to state 101


State 50

   70 command: compound_array_i • ';'

    ';'  shift, and go to state 102


State 51

   72 command: while_statement • ';'

    ';'  shift, and go to state 103


State 52

   15 function_declaration: KW_DEF function_header function_body • KW_ENDDEF

    KW_ENDDEF  shift, and go to state 104


State 53

   15 function_declaration: KW_DEF • function_header function_body KW_ENDDEF
   94 function_header: • TK_IDENTIFIER '(' function_arg ')' '-' '>' data_type

    TK_IDENTIFIER  shift, and go to state 19

    function_header  go to state 21


State 54

   60 brackets: '[' TK_NUMBER ']' •

    $default  reduce using rule 60 (brackets)


State 55

   16 variable_declaration: TK_IDENTIFIER ':' data_type ';' •

    $default  reduce using rule 16 (variable_declaration)


State 56

   61 brackets: brackets '[' TK_NUMBER • ']'

    ']'  shift, and go to state 105


State 57

   19 array_var: TK_IDENTIFIER brackets ':' data_type • ';'

    ';'  shift, and go to state 106


State 58

   12 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_STRING • ':' KW_STR

    ':'  shift, and go to state 107


State 59

   10 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_NUMBER • ':' KW_INTEGER

    ':'  shift, and go to state 108


State 60

   11 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_DECIMAL • ':' KW_SCALAR

    ':'  shift, and go to state 109


State 61

   13 constant_declaration: KW_CONST TK_IDENTIFIER '=' KW_TRUE • ':' KW_BOOL

    ':'  shift, and go to state 110


State 62

   14 constant_declaration: KW_CONST TK_IDENTIFIER '=' KW_FALSE • ':' KW_BOOL

    ':'  shift, and go to state 111


State 63

   30 expression: TK_IDENTIFIER •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', POW, ')', ']', ';', ',']
   31           | TK_IDENTIFIER • '(' function_arg ')'
   32           | TK_IDENTIFIER • '(' ')'
   33           | TK_IDENTIFIER • brackets
   60 brackets: • '[' TK_NUMBER ']'
   61         | • brackets '[' TK_NUMBER ']'
   62         | • '[' ']'

    '('  shift, and go to state 112
    '['  shift, and go to state 14

    $default  reduce using rule 30 (expression)

    brackets  go to state 113


State 64

   26 expression: TK_CHAR •

    $default  reduce using rule 26 (expression)


State 65

   27 expression: TK_STRING •

    $default  reduce using rule 27 (expression)


State 66

   25 expression: TK_REAL •

    $default  reduce using rule 25 (expression)


State 67

   28 expression: TK_DIGIT •

    $default  reduce using rule 28 (expression)


State 68

   24 expression: TK_NUMBER •

    $default  reduce using rule 24 (expression)


State 69

   29 expression: TK_DECIMAL •

    $default  reduce using rule 29 (expression)


State 70

   34 expression: KW_TRUE •

    $default  reduce using rule 34 (expression)


State 71

   35 expression: KW_FALSE •

    $default  reduce using rule 35 (expression)


State 72

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   58                   | '!' • expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 114
    math_expression     go to state 78
    logical_expression  go to state 79


State 73

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   59                   | KW_NOT • expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 115
    math_expression     go to state 78
    logical_expression  go to state 79


State 74

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   40           | '-' • expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 116
    math_expression     go to state 78
    logical_expression  go to state 79


State 75

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   39           | '+' • expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 117
    math_expression     go to state 78
    logical_expression  go to state 79


State 76

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   36           | '(' • expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 118
    math_expression     go to state 78
    logical_expression  go to state 79


State 77

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   92 function_arg: expression •  [')', ',']

    KW_AND  shift, and go to state 119
    KW_OR   shift, and go to state 120
    LOR     shift, and go to state 121
    LAND    shift, and go to state 122
    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135

    $default  reduce using rule 92 (function_arg)


State 78

   37 expression: math_expression •

    $default  reduce using rule 37 (expression)


State 79

   38 expression: logical_expression •

    $default  reduce using rule 38 (expression)


State 80

   93 function_arg: function_arg • ',' expression
   94 function_header: TK_IDENTIFIER '(' function_arg • ')' '-' '>' data_type

    ')'  shift, and go to state 136
    ','  shift, and go to state 137


State 81

    8 s_main_s: KW_DEF KW_MAIN '(' ')' • ':' main_body KW_ENDDEF

    ':'  shift, and go to state 138


State 82

   79 command: TK_IDENTIFIER ADD_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 139


State 83

   80 command: TK_IDENTIFIER SUB_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 140


State 84

   81 command: TK_IDENTIFIER MULT_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 141


State 85

   82 command: TK_IDENTIFIER DIV_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 142


State 86

   83 command: TK_IDENTIFIER MOD_ASSIGN • TK_IDENTIFIER ';'

    TK_IDENTIFIER  shift, and go to state 143


State 87

   89 compound_array_a: TK_IDENTIFIER ASSIGN • '[' ']'
   90 compound_array_i: TK_IDENTIFIER ASSIGN • '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type

    '['  shift, and go to state 144


State 88

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   84 variable_assignement: TK_IDENTIFIER '=' • expression ';'

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 145
    math_expression     go to state 78
    logical_expression  go to state 79


State 89

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   77 command: TK_IDENTIFIER '(' • function_arg ')' ';'
   78        | TK_IDENTIFIER '(' • ')' ';'
   92 function_arg: • expression
   93             | • function_arg ',' expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76
    ')'            shift, and go to state 146

    expression          go to state 77
    math_expression     go to state 78
    logical_expression  go to state 79
    function_arg        go to state 147


State 90

   61 brackets: brackets • '[' TK_NUMBER ']'
   67 command: TK_IDENTIFIER brackets • '=' expression ';'

    '='  shift, and go to state 148
    '['  shift, and go to state 31


State 91

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   85 if_statement: KW_IF '(' • logical_expression ')' ':' commands KW_ENDIF
   86             | KW_IF '(' • logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 149
    math_expression     go to state 78
    logical_expression  go to state 150


State 92

   87 for_statement: KW_FOR TK_IDENTIFIER • KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   88              | KW_FOR TK_IDENTIFIER • KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR

    KW_IN  shift, and go to state 151


State 93

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   91 while_statement: KW_WHILE '(' • logical_expression ')' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 149
    math_expression     go to state 78
    logical_expression  go to state 152


State 94

   73 command: KW_BREAK ';' •

    $default  reduce using rule 73 (command)


State 95

   75 command: KW_RETURN ';' •

    $default  reduce using rule 75 (command)


State 96

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   76 command: KW_RETURN expression • ';'

    KW_AND  shift, and go to state 119
    KW_OR   shift, and go to state 120
    LOR     shift, and go to state 121
    LAND    shift, and go to state 122
    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135
    ';'     shift, and go to state 153


State 97

   74 command: KW_CONTINUE ';' •

    $default  reduce using rule 74 (command)


State 98

   63 commands: command commands •

    $default  reduce using rule 63 (commands)


State 99

   68 command: if_statement ';' •

    $default  reduce using rule 68 (command)


State 100

   69 command: for_statement ';' •

    $default  reduce using rule 69 (command)


State 101

   71 command: compound_array_a ';' •

    $default  reduce using rule 71 (command)


State 102

   70 command: compound_array_i ';' •

    $default  reduce using rule 70 (command)


State 103

   72 command: while_statement ';' •

    $default  reduce using rule 72 (command)


State 104

   15 function_declaration: KW_DEF function_header function_body KW_ENDDEF •

    $default  reduce using rule 15 (function_declaration)


State 105

   61 brackets: brackets '[' TK_NUMBER ']' •

    $default  reduce using rule 61 (brackets)


State 106

   19 array_var: TK_IDENTIFIER brackets ':' data_type ';' •

    $default  reduce using rule 19 (array_var)


State 107

   12 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_STRING ':' • KW_STR

    KW_STR  shift, and go to state 154


State 108

   10 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_NUMBER ':' • KW_INTEGER

    KW_INTEGER  shift, and go to state 155


State 109

   11 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_DECIMAL ':' • KW_SCALAR

    KW_SCALAR  shift, and go to state 156


State 110

   13 constant_declaration: KW_CONST TK_IDENTIFIER '=' KW_TRUE ':' • KW_BOOL

    KW_BOOL  shift, and go to state 157


State 111

   14 constant_declaration: KW_CONST TK_IDENTIFIER '=' KW_FALSE ':' • KW_BOOL

    KW_BOOL  shift, and go to state 158


State 112

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   31           | TK_IDENTIFIER '(' • function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   32           | TK_IDENTIFIER '(' • ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   92 function_arg: • expression
   93             | • function_arg ',' expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76
    ')'            shift, and go to state 159

    expression          go to state 77
    math_expression     go to state 78
    logical_expression  go to state 79
    function_arg        go to state 160


State 113

   33 expression: TK_IDENTIFIER brackets •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', POW, ')', ']', ';', ',']
   61 brackets: brackets • '[' TK_NUMBER ']'

    '['  shift, and go to state 31

    $default  reduce using rule 33 (expression)


State 114

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   58                   | '!' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, ')', ']', ';', ',']

    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135

    $default  reduce using rule 58 (logical_expression)

    Conflict between rule 58 and token KW_AND resolved as reduce (KW_AND < '!').
    Conflict between rule 58 and token KW_OR resolved as reduce (KW_OR < '!').
    Conflict between rule 58 and token LOR resolved as reduce (LOR < '!').
    Conflict between rule 58 and token LAND resolved as reduce (LAND < '!').
    Conflict between rule 58 and token NEQ resolved as shift ('!' < NEQ).
    Conflict between rule 58 and token EQ resolved as shift ('!' < EQ).
    Conflict between rule 58 and token LEQ resolved as shift ('!' < LEQ).
    Conflict between rule 58 and token GEQ resolved as shift ('!' < GEQ).
    Conflict between rule 58 and token '<' resolved as shift ('!' < '<').
    Conflict between rule 58 and token '>' resolved as shift ('!' < '>').
    Conflict between rule 58 and token '*' resolved as shift ('!' < '*').
    Conflict between rule 58 and token '/' resolved as shift ('!' < '/').
    Conflict between rule 58 and token MOD resolved as shift ('!' < MOD).
    Conflict between rule 58 and token KW_MOD resolved as shift ('!' < KW_MOD).
    Conflict between rule 58 and token '-' resolved as shift ('!' < '-').
    Conflict between rule 58 and token '+' resolved as shift ('!' < '+').
    Conflict between rule 58 and token POW resolved as shift ('!' < POW).


State 115

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   59                   | KW_NOT expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, ')', ']', ';', ',']

    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135

    $default  reduce using rule 59 (logical_expression)

    Conflict between rule 59 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 59 and token KW_OR resolved as reduce (KW_OR < KW_NOT).
    Conflict between rule 59 and token LOR resolved as reduce (LOR < KW_NOT).
    Conflict between rule 59 and token LAND resolved as reduce (LAND < KW_NOT).
    Conflict between rule 59 and token NEQ resolved as shift (KW_NOT < NEQ).
    Conflict between rule 59 and token EQ resolved as shift (KW_NOT < EQ).
    Conflict between rule 59 and token LEQ resolved as shift (KW_NOT < LEQ).
    Conflict between rule 59 and token GEQ resolved as shift (KW_NOT < GEQ).
    Conflict between rule 59 and token '<' resolved as shift (KW_NOT < '<').
    Conflict between rule 59 and token '>' resolved as shift (KW_NOT < '>').
    Conflict between rule 59 and token '*' resolved as shift (KW_NOT < '*').
    Conflict between rule 59 and token '/' resolved as shift (KW_NOT < '/').
    Conflict between rule 59 and token MOD resolved as shift (KW_NOT < MOD).
    Conflict between rule 59 and token KW_MOD resolved as shift (KW_NOT < KW_MOD).
    Conflict between rule 59 and token '-' resolved as shift (KW_NOT < '-').
    Conflict between rule 59 and token '+' resolved as shift (KW_NOT < '+').
    Conflict between rule 59 and token POW resolved as shift (KW_NOT < POW).


State 116

   40 expression: '-' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ',']
   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    POW  shift, and go to state 135

    $default  reduce using rule 40 (expression)

    Conflict between rule 40 and token KW_AND resolved as reduce (KW_AND < '-').
    Conflict between rule 40 and token KW_OR resolved as reduce (KW_OR < '-').
    Conflict between rule 40 and token LOR resolved as reduce (LOR < '-').
    Conflict between rule 40 and token LAND resolved as reduce (LAND < '-').
    Conflict between rule 40 and token NEQ resolved as reduce (NEQ < '-').
    Conflict between rule 40 and token EQ resolved as reduce (EQ < '-').
    Conflict between rule 40 and token LEQ resolved as reduce (LEQ < '-').
    Conflict between rule 40 and token GEQ resolved as reduce (GEQ < '-').
    Conflict between rule 40 and token '<' resolved as reduce ('<' < '-').
    Conflict between rule 40 and token '>' resolved as reduce ('>' < '-').
    Conflict between rule 40 and token '*' resolved as reduce ('*' < '-').
    Conflict between rule 40 and token '/' resolved as reduce ('/' < '-').
    Conflict between rule 40 and token MOD resolved as reduce (MOD < '-').
    Conflict between rule 40 and token KW_MOD resolved as reduce (KW_MOD < '-').
    Conflict between rule 40 and token '-' resolved as reduce (%left '-').
    Conflict between rule 40 and token '+' resolved as reduce (%left '+').
    Conflict between rule 40 and token POW resolved as shift ('-' < POW).


State 117

   39 expression: '+' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ',']
   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    POW  shift, and go to state 135

    $default  reduce using rule 39 (expression)

    Conflict between rule 39 and token KW_AND resolved as reduce (KW_AND < '+').
    Conflict between rule 39 and token KW_OR resolved as reduce (KW_OR < '+').
    Conflict between rule 39 and token LOR resolved as reduce (LOR < '+').
    Conflict between rule 39 and token LAND resolved as reduce (LAND < '+').
    Conflict between rule 39 and token NEQ resolved as reduce (NEQ < '+').
    Conflict between rule 39 and token EQ resolved as reduce (EQ < '+').
    Conflict between rule 39 and token LEQ resolved as reduce (LEQ < '+').
    Conflict between rule 39 and token GEQ resolved as reduce (GEQ < '+').
    Conflict between rule 39 and token '<' resolved as reduce ('<' < '+').
    Conflict between rule 39 and token '>' resolved as reduce ('>' < '+').
    Conflict between rule 39 and token '*' resolved as reduce ('*' < '+').
    Conflict between rule 39 and token '/' resolved as reduce ('/' < '+').
    Conflict between rule 39 and token MOD resolved as reduce (MOD < '+').
    Conflict between rule 39 and token KW_MOD resolved as reduce (KW_MOD < '+').
    Conflict between rule 39 and token '-' resolved as reduce (%left '-').
    Conflict between rule 39 and token '+' resolved as reduce (%left '+').
    Conflict between rule 39 and token POW resolved as shift ('+' < POW).


State 118

   36 expression: '(' expression • ')'
   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    KW_AND  shift, and go to state 119
    KW_OR   shift, and go to state 120
    LOR     shift, and go to state 121
    LAND    shift, and go to state 122
    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135
    ')'     shift, and go to state 161


State 119

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   55                   | expression KW_AND • expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 162
    math_expression     go to state 78
    logical_expression  go to state 79


State 120

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   57                   | expression KW_OR • expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 163
    math_expression     go to state 78
    logical_expression  go to state 79


State 121

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   56                   | expression LOR • expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 164
    math_expression     go to state 78
    logical_expression  go to state 79


State 122

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   54                   | expression LAND • expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 165
    math_expression     go to state 78
    logical_expression  go to state 79


State 123

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   51                   | expression NEQ • expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 166
    math_expression     go to state 78
    logical_expression  go to state 79


State 124

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   48                   | expression EQ • expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 167
    math_expression     go to state 78
    logical_expression  go to state 79


State 125

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   49                   | expression LEQ • expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 168
    math_expression     go to state 78
    logical_expression  go to state 79


State 126

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   50                   | expression GEQ • expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 169
    math_expression     go to state 78
    logical_expression  go to state 79


State 127

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   52                   | expression '<' • expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 170
    math_expression     go to state 78
    logical_expression  go to state 79


State 128

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   53                   | expression '>' • expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 171
    math_expression     go to state 78
    logical_expression  go to state 79


State 129

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   44                | expression '*' • expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 172
    math_expression     go to state 78
    logical_expression  go to state 79


State 130

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   45                | expression '/' • expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 173
    math_expression     go to state 78
    logical_expression  go to state 79


State 131

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   46                | expression MOD • expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 174
    math_expression     go to state 78
    logical_expression  go to state 79


State 132

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   47                | expression KW_MOD • expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 175
    math_expression     go to state 78
    logical_expression  go to state 79


State 133

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   43                | expression '-' • expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 176
    math_expression     go to state 78
    logical_expression  go to state 79


State 134

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   42                | expression '+' • expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 177
    math_expression     go to state 78
    logical_expression  go to state 79


State 135

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   41                | expression POW • expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 178
    math_expression     go to state 78
    logical_expression  go to state 79


State 136

   94 function_header: TK_IDENTIFIER '(' function_arg ')' • '-' '>' data_type

    '-'  shift, and go to state 179


State 137

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   93 function_arg: function_arg ',' • expression

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 180
    math_expression     go to state 78
    logical_expression  go to state 79


State 138

    8 s_main_s: KW_DEF KW_MAIN '(' ')' ':' • main_body KW_ENDDEF
    9 main_body: • commands
   63 commands: • command commands
   64         | • command
   65 command: • ';'
   66        | • variable_assignement
   67        | • TK_IDENTIFIER brackets '=' expression ';'
   68        | • if_statement ';'
   69        | • for_statement ';'
   70        | • compound_array_i ';'
   71        | • compound_array_a ';'
   72        | • while_statement ';'
   73        | • KW_BREAK ';'
   74        | • KW_CONTINUE ';'
   75        | • KW_RETURN ';'
   76        | • KW_RETURN expression ';'
   77        | • TK_IDENTIFIER '(' function_arg ')' ';'
   78        | • TK_IDENTIFIER '(' ')' ';'
   79        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   80        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   81        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   84 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   85 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   86             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   87 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   88              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   89 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   90 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   91 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 36
    KW_IF          shift, and go to state 37
    KW_FOR         shift, and go to state 38
    KW_WHILE       shift, and go to state 39
    KW_BREAK       shift, and go to state 40
    KW_RETURN      shift, and go to state 41
    KW_CONTINUE    shift, and go to state 42
    ';'            shift, and go to state 43

    main_body             go to state 181
    commands              go to state 182
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51


State 139

   79 command: TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 183


State 140

   80 command: TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 184


State 141

   81 command: TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 185


State 142

   82 command: TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 186


State 143

   83 command: TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER • ';'

    ';'  shift, and go to state 187


State 144

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   89 compound_array_a: TK_IDENTIFIER ASSIGN '[' • ']'
   90 compound_array_i: TK_IDENTIFIER ASSIGN '[' • expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76
    ']'            shift, and go to state 188

    expression          go to state 189
    math_expression     go to state 78
    logical_expression  go to state 79


State 145

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   84 variable_assignement: TK_IDENTIFIER '=' expression • ';'

    KW_AND  shift, and go to state 119
    KW_OR   shift, and go to state 120
    LOR     shift, and go to state 121
    LAND    shift, and go to state 122
    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135
    ';'     shift, and go to state 190


State 146

   78 command: TK_IDENTIFIER '(' ')' • ';'

    ';'  shift, and go to state 191


State 147

   77 command: TK_IDENTIFIER '(' function_arg • ')' ';'
   93 function_arg: function_arg • ',' expression

    ')'  shift, and go to state 192
    ','  shift, and go to state 137


State 148

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   67 command: TK_IDENTIFIER brackets '=' • expression ';'

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 193
    math_expression     go to state 78
    logical_expression  go to state 79


State 149

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    KW_AND  shift, and go to state 119
    KW_OR   shift, and go to state 120
    LOR     shift, and go to state 121
    LAND    shift, and go to state 122
    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135


State 150

   38 expression: logical_expression •  [KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', POW]
   85 if_statement: KW_IF '(' logical_expression • ')' ':' commands KW_ENDIF
   86             | KW_IF '(' logical_expression • ')' ':' commands KW_ELSE ':' commands KW_ENDIF

    ')'  shift, and go to state 194

    $default  reduce using rule 38 (expression)


State 151

   87 for_statement: KW_FOR TK_IDENTIFIER KW_IN • '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   88              | KW_FOR TK_IDENTIFIER KW_IN • '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR

    '['  shift, and go to state 195


State 152

   38 expression: logical_expression •  [KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', POW]
   91 while_statement: KW_WHILE '(' logical_expression • ')' commands KW_ENDWHILE

    ')'  shift, and go to state 196

    $default  reduce using rule 38 (expression)


State 153

   76 command: KW_RETURN expression ';' •

    $default  reduce using rule 76 (command)


State 154

   12 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_STRING ':' KW_STR •

    $default  reduce using rule 12 (constant_declaration)


State 155

   10 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_NUMBER ':' KW_INTEGER •

    $default  reduce using rule 10 (constant_declaration)


State 156

   11 constant_declaration: KW_CONST TK_IDENTIFIER '=' TK_DECIMAL ':' KW_SCALAR •

    $default  reduce using rule 11 (constant_declaration)


State 157

   13 constant_declaration: KW_CONST TK_IDENTIFIER '=' KW_TRUE ':' KW_BOOL •

    $default  reduce using rule 13 (constant_declaration)


State 158

   14 constant_declaration: KW_CONST TK_IDENTIFIER '=' KW_FALSE ':' KW_BOOL •

    $default  reduce using rule 14 (constant_declaration)


State 159

   32 expression: TK_IDENTIFIER '(' ')' •

    $default  reduce using rule 32 (expression)


State 160

   31 expression: TK_IDENTIFIER '(' function_arg • ')'
   93 function_arg: function_arg • ',' expression

    ')'  shift, and go to state 197
    ','  shift, and go to state 137


State 161

   36 expression: '(' expression ')' •

    $default  reduce using rule 36 (expression)


State 162

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   55                   | expression KW_AND expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, ')', ']', ';', ',']
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135

    $default  reduce using rule 55 (logical_expression)

    Conflict between rule 55 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 55 and token KW_OR resolved as reduce (KW_OR < KW_AND).
    Conflict between rule 55 and token LOR resolved as reduce (LOR < KW_AND).
    Conflict between rule 55 and token LAND resolved as reduce (%left LAND).
    Conflict between rule 55 and token NEQ resolved as shift (KW_AND < NEQ).
    Conflict between rule 55 and token EQ resolved as shift (KW_AND < EQ).
    Conflict between rule 55 and token LEQ resolved as shift (KW_AND < LEQ).
    Conflict between rule 55 and token GEQ resolved as shift (KW_AND < GEQ).
    Conflict between rule 55 and token '<' resolved as shift (KW_AND < '<').
    Conflict between rule 55 and token '>' resolved as shift (KW_AND < '>').
    Conflict between rule 55 and token '*' resolved as shift (KW_AND < '*').
    Conflict between rule 55 and token '/' resolved as shift (KW_AND < '/').
    Conflict between rule 55 and token MOD resolved as shift (KW_AND < MOD).
    Conflict between rule 55 and token KW_MOD resolved as shift (KW_AND < KW_MOD).
    Conflict between rule 55 and token '-' resolved as shift (KW_AND < '-').
    Conflict between rule 55 and token '+' resolved as shift (KW_AND < '+').
    Conflict between rule 55 and token POW resolved as shift (KW_AND < POW).


State 163

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   57                   | expression KW_OR expression •  [KW_FOR, KW_OR, LOR, ')', ']', ';', ',']

    KW_AND  shift, and go to state 119
    LAND    shift, and go to state 122
    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135

    $default  reduce using rule 57 (logical_expression)

    Conflict between rule 57 and token KW_AND resolved as shift (KW_OR < KW_AND).
    Conflict between rule 57 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 57 and token LOR resolved as reduce (%left LOR).
    Conflict between rule 57 and token LAND resolved as shift (KW_OR < LAND).
    Conflict between rule 57 and token NEQ resolved as shift (KW_OR < NEQ).
    Conflict between rule 57 and token EQ resolved as shift (KW_OR < EQ).
    Conflict between rule 57 and token LEQ resolved as shift (KW_OR < LEQ).
    Conflict between rule 57 and token GEQ resolved as shift (KW_OR < GEQ).
    Conflict between rule 57 and token '<' resolved as shift (KW_OR < '<').
    Conflict between rule 57 and token '>' resolved as shift (KW_OR < '>').
    Conflict between rule 57 and token '*' resolved as shift (KW_OR < '*').
    Conflict between rule 57 and token '/' resolved as shift (KW_OR < '/').
    Conflict between rule 57 and token MOD resolved as shift (KW_OR < MOD).
    Conflict between rule 57 and token KW_MOD resolved as shift (KW_OR < KW_MOD).
    Conflict between rule 57 and token '-' resolved as shift (KW_OR < '-').
    Conflict between rule 57 and token '+' resolved as shift (KW_OR < '+').
    Conflict between rule 57 and token POW resolved as shift (KW_OR < POW).


State 164

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   56                   | expression LOR expression •  [KW_FOR, KW_OR, LOR, ')', ']', ';', ',']
   57                   | expression • KW_OR expression

    KW_AND  shift, and go to state 119
    LAND    shift, and go to state 122
    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135

    $default  reduce using rule 56 (logical_expression)

    Conflict between rule 56 and token KW_AND resolved as shift (LOR < KW_AND).
    Conflict between rule 56 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 56 and token LOR resolved as reduce (%left LOR).
    Conflict between rule 56 and token LAND resolved as shift (LOR < LAND).
    Conflict between rule 56 and token NEQ resolved as shift (LOR < NEQ).
    Conflict between rule 56 and token EQ resolved as shift (LOR < EQ).
    Conflict between rule 56 and token LEQ resolved as shift (LOR < LEQ).
    Conflict between rule 56 and token GEQ resolved as shift (LOR < GEQ).
    Conflict between rule 56 and token '<' resolved as shift (LOR < '<').
    Conflict between rule 56 and token '>' resolved as shift (LOR < '>').
    Conflict between rule 56 and token '*' resolved as shift (LOR < '*').
    Conflict between rule 56 and token '/' resolved as shift (LOR < '/').
    Conflict between rule 56 and token MOD resolved as shift (LOR < MOD).
    Conflict between rule 56 and token KW_MOD resolved as shift (LOR < KW_MOD).
    Conflict between rule 56 and token '-' resolved as shift (LOR < '-').
    Conflict between rule 56 and token '+' resolved as shift (LOR < '+').
    Conflict between rule 56 and token POW resolved as shift (LOR < POW).


State 165

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   54                   | expression LAND expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, ')', ']', ';', ',']
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135

    $default  reduce using rule 54 (logical_expression)

    Conflict between rule 54 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 54 and token KW_OR resolved as reduce (KW_OR < LAND).
    Conflict between rule 54 and token LOR resolved as reduce (LOR < LAND).
    Conflict between rule 54 and token LAND resolved as reduce (%left LAND).
    Conflict between rule 54 and token NEQ resolved as shift (LAND < NEQ).
    Conflict between rule 54 and token EQ resolved as shift (LAND < EQ).
    Conflict between rule 54 and token LEQ resolved as shift (LAND < LEQ).
    Conflict between rule 54 and token GEQ resolved as shift (LAND < GEQ).
    Conflict between rule 54 and token '<' resolved as shift (LAND < '<').
    Conflict between rule 54 and token '>' resolved as shift (LAND < '>').
    Conflict between rule 54 and token '*' resolved as shift (LAND < '*').
    Conflict between rule 54 and token '/' resolved as shift (LAND < '/').
    Conflict between rule 54 and token MOD resolved as shift (LAND < MOD).
    Conflict between rule 54 and token KW_MOD resolved as shift (LAND < KW_MOD).
    Conflict between rule 54 and token '-' resolved as shift (LAND < '-').
    Conflict between rule 54 and token '+' resolved as shift (LAND < '+').
    Conflict between rule 54 and token POW resolved as shift (LAND < POW).


State 166

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   51                   | expression NEQ expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, ')', ']', ';', ',']
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135

    $default  reduce using rule 51 (logical_expression)

    Conflict between rule 51 and token KW_AND resolved as reduce (KW_AND < NEQ).
    Conflict between rule 51 and token KW_OR resolved as reduce (KW_OR < NEQ).
    Conflict between rule 51 and token LOR resolved as reduce (LOR < NEQ).
    Conflict between rule 51 and token LAND resolved as reduce (LAND < NEQ).
    Conflict between rule 51 and token NEQ resolved as reduce (%left NEQ).
    Conflict between rule 51 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 51 and token LEQ resolved as shift (NEQ < LEQ).
    Conflict between rule 51 and token GEQ resolved as shift (NEQ < GEQ).
    Conflict between rule 51 and token '<' resolved as shift (NEQ < '<').
    Conflict between rule 51 and token '>' resolved as shift (NEQ < '>').
    Conflict between rule 51 and token '*' resolved as shift (NEQ < '*').
    Conflict between rule 51 and token '/' resolved as shift (NEQ < '/').
    Conflict between rule 51 and token MOD resolved as shift (NEQ < MOD).
    Conflict between rule 51 and token KW_MOD resolved as shift (NEQ < KW_MOD).
    Conflict between rule 51 and token '-' resolved as shift (NEQ < '-').
    Conflict between rule 51 and token '+' resolved as shift (NEQ < '+').
    Conflict between rule 51 and token POW resolved as shift (NEQ < POW).


State 167

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   48                   | expression EQ expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, ')', ']', ';', ',']
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135

    $default  reduce using rule 48 (logical_expression)

    Conflict between rule 48 and token KW_AND resolved as reduce (KW_AND < EQ).
    Conflict between rule 48 and token KW_OR resolved as reduce (KW_OR < EQ).
    Conflict between rule 48 and token LOR resolved as reduce (LOR < EQ).
    Conflict between rule 48 and token LAND resolved as reduce (LAND < EQ).
    Conflict between rule 48 and token NEQ resolved as reduce (%left NEQ).
    Conflict between rule 48 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 48 and token LEQ resolved as shift (EQ < LEQ).
    Conflict between rule 48 and token GEQ resolved as shift (EQ < GEQ).
    Conflict between rule 48 and token '<' resolved as shift (EQ < '<').
    Conflict between rule 48 and token '>' resolved as shift (EQ < '>').
    Conflict between rule 48 and token '*' resolved as shift (EQ < '*').
    Conflict between rule 48 and token '/' resolved as shift (EQ < '/').
    Conflict between rule 48 and token MOD resolved as shift (EQ < MOD).
    Conflict between rule 48 and token KW_MOD resolved as shift (EQ < KW_MOD).
    Conflict between rule 48 and token '-' resolved as shift (EQ < '-').
    Conflict between rule 48 and token '+' resolved as shift (EQ < '+').
    Conflict between rule 48 and token POW resolved as shift (EQ < POW).


State 168

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   49                   | expression LEQ expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', ')', ']', ';', ',']
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135

    $default  reduce using rule 49 (logical_expression)

    Conflict between rule 49 and token KW_AND resolved as reduce (KW_AND < LEQ).
    Conflict between rule 49 and token KW_OR resolved as reduce (KW_OR < LEQ).
    Conflict between rule 49 and token LOR resolved as reduce (LOR < LEQ).
    Conflict between rule 49 and token LAND resolved as reduce (LAND < LEQ).
    Conflict between rule 49 and token NEQ resolved as reduce (NEQ < LEQ).
    Conflict between rule 49 and token EQ resolved as reduce (EQ < LEQ).
    Conflict between rule 49 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 49 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 49 and token '<' resolved as reduce (%left '<').
    Conflict between rule 49 and token '>' resolved as reduce (%left '>').
    Conflict between rule 49 and token '*' resolved as shift (LEQ < '*').
    Conflict between rule 49 and token '/' resolved as shift (LEQ < '/').
    Conflict between rule 49 and token MOD resolved as shift (LEQ < MOD).
    Conflict between rule 49 and token KW_MOD resolved as shift (LEQ < KW_MOD).
    Conflict between rule 49 and token '-' resolved as shift (LEQ < '-').
    Conflict between rule 49 and token '+' resolved as shift (LEQ < '+').
    Conflict between rule 49 and token POW resolved as shift (LEQ < POW).


State 169

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   50                   | expression GEQ expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', ')', ']', ';', ',']
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135

    $default  reduce using rule 50 (logical_expression)

    Conflict between rule 50 and token KW_AND resolved as reduce (KW_AND < GEQ).
    Conflict between rule 50 and token KW_OR resolved as reduce (KW_OR < GEQ).
    Conflict between rule 50 and token LOR resolved as reduce (LOR < GEQ).
    Conflict between rule 50 and token LAND resolved as reduce (LAND < GEQ).
    Conflict between rule 50 and token NEQ resolved as reduce (NEQ < GEQ).
    Conflict between rule 50 and token EQ resolved as reduce (EQ < GEQ).
    Conflict between rule 50 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 50 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 50 and token '<' resolved as reduce (%left '<').
    Conflict between rule 50 and token '>' resolved as reduce (%left '>').
    Conflict between rule 50 and token '*' resolved as shift (GEQ < '*').
    Conflict between rule 50 and token '/' resolved as shift (GEQ < '/').
    Conflict between rule 50 and token MOD resolved as shift (GEQ < MOD).
    Conflict between rule 50 and token KW_MOD resolved as shift (GEQ < KW_MOD).
    Conflict between rule 50 and token '-' resolved as shift (GEQ < '-').
    Conflict between rule 50 and token '+' resolved as shift (GEQ < '+').
    Conflict between rule 50 and token POW resolved as shift (GEQ < POW).


State 170

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   52                   | expression '<' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', ')', ']', ';', ',']
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135

    $default  reduce using rule 52 (logical_expression)

    Conflict between rule 52 and token KW_AND resolved as reduce (KW_AND < '<').
    Conflict between rule 52 and token KW_OR resolved as reduce (KW_OR < '<').
    Conflict between rule 52 and token LOR resolved as reduce (LOR < '<').
    Conflict between rule 52 and token LAND resolved as reduce (LAND < '<').
    Conflict between rule 52 and token NEQ resolved as reduce (NEQ < '<').
    Conflict between rule 52 and token EQ resolved as reduce (EQ < '<').
    Conflict between rule 52 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 52 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 52 and token '<' resolved as reduce (%left '<').
    Conflict between rule 52 and token '>' resolved as reduce (%left '>').
    Conflict between rule 52 and token '*' resolved as shift ('<' < '*').
    Conflict between rule 52 and token '/' resolved as shift ('<' < '/').
    Conflict between rule 52 and token MOD resolved as shift ('<' < MOD).
    Conflict between rule 52 and token KW_MOD resolved as shift ('<' < KW_MOD).
    Conflict between rule 52 and token '-' resolved as shift ('<' < '-').
    Conflict between rule 52 and token '+' resolved as shift ('<' < '+').
    Conflict between rule 52 and token POW resolved as shift ('<' < POW).


State 171

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   53                   | expression '>' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', ')', ']', ';', ',']
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135

    $default  reduce using rule 53 (logical_expression)

    Conflict between rule 53 and token KW_AND resolved as reduce (KW_AND < '>').
    Conflict between rule 53 and token KW_OR resolved as reduce (KW_OR < '>').
    Conflict between rule 53 and token LOR resolved as reduce (LOR < '>').
    Conflict between rule 53 and token LAND resolved as reduce (LAND < '>').
    Conflict between rule 53 and token NEQ resolved as reduce (NEQ < '>').
    Conflict between rule 53 and token EQ resolved as reduce (EQ < '>').
    Conflict between rule 53 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 53 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 53 and token '<' resolved as reduce (%left '<').
    Conflict between rule 53 and token '>' resolved as reduce (%left '>').
    Conflict between rule 53 and token '*' resolved as shift ('>' < '*').
    Conflict between rule 53 and token '/' resolved as shift ('>' < '/').
    Conflict between rule 53 and token MOD resolved as shift ('>' < MOD).
    Conflict between rule 53 and token KW_MOD resolved as shift ('>' < KW_MOD).
    Conflict between rule 53 and token '-' resolved as shift ('>' < '-').
    Conflict between rule 53 and token '+' resolved as shift ('>' < '+').
    Conflict between rule 53 and token POW resolved as shift ('>' < POW).


State 172

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   44                | expression '*' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, ')', ']', ';', ',']
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '-'  shift, and go to state 133
    '+'  shift, and go to state 134
    POW  shift, and go to state 135

    $default  reduce using rule 44 (math_expression)

    Conflict between rule 44 and token KW_AND resolved as reduce (KW_AND < '*').
    Conflict between rule 44 and token KW_OR resolved as reduce (KW_OR < '*').
    Conflict between rule 44 and token LOR resolved as reduce (LOR < '*').
    Conflict between rule 44 and token LAND resolved as reduce (LAND < '*').
    Conflict between rule 44 and token NEQ resolved as reduce (NEQ < '*').
    Conflict between rule 44 and token EQ resolved as reduce (EQ < '*').
    Conflict between rule 44 and token LEQ resolved as reduce (LEQ < '*').
    Conflict between rule 44 and token GEQ resolved as reduce (GEQ < '*').
    Conflict between rule 44 and token '<' resolved as reduce ('<' < '*').
    Conflict between rule 44 and token '>' resolved as reduce ('>' < '*').
    Conflict between rule 44 and token '*' resolved as reduce (%left '*').
    Conflict between rule 44 and token '/' resolved as reduce (%left '/').
    Conflict between rule 44 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 44 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 44 and token '-' resolved as shift ('*' < '-').
    Conflict between rule 44 and token '+' resolved as shift ('*' < '+').
    Conflict between rule 44 and token POW resolved as shift ('*' < POW).


State 173

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   45                | expression '/' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, ')', ']', ';', ',']
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '-'  shift, and go to state 133
    '+'  shift, and go to state 134
    POW  shift, and go to state 135

    $default  reduce using rule 45 (math_expression)

    Conflict between rule 45 and token KW_AND resolved as reduce (KW_AND < '/').
    Conflict between rule 45 and token KW_OR resolved as reduce (KW_OR < '/').
    Conflict between rule 45 and token LOR resolved as reduce (LOR < '/').
    Conflict between rule 45 and token LAND resolved as reduce (LAND < '/').
    Conflict between rule 45 and token NEQ resolved as reduce (NEQ < '/').
    Conflict between rule 45 and token EQ resolved as reduce (EQ < '/').
    Conflict between rule 45 and token LEQ resolved as reduce (LEQ < '/').
    Conflict between rule 45 and token GEQ resolved as reduce (GEQ < '/').
    Conflict between rule 45 and token '<' resolved as reduce ('<' < '/').
    Conflict between rule 45 and token '>' resolved as reduce ('>' < '/').
    Conflict between rule 45 and token '*' resolved as reduce (%left '*').
    Conflict between rule 45 and token '/' resolved as reduce (%left '/').
    Conflict between rule 45 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 45 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 45 and token '-' resolved as shift ('/' < '-').
    Conflict between rule 45 and token '+' resolved as shift ('/' < '+').
    Conflict between rule 45 and token POW resolved as shift ('/' < POW).


State 174

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   46                | expression MOD expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, ')', ']', ';', ',']
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '-'  shift, and go to state 133
    '+'  shift, and go to state 134
    POW  shift, and go to state 135

    $default  reduce using rule 46 (math_expression)

    Conflict between rule 46 and token KW_AND resolved as reduce (KW_AND < MOD).
    Conflict between rule 46 and token KW_OR resolved as reduce (KW_OR < MOD).
    Conflict between rule 46 and token LOR resolved as reduce (LOR < MOD).
    Conflict between rule 46 and token LAND resolved as reduce (LAND < MOD).
    Conflict between rule 46 and token NEQ resolved as reduce (NEQ < MOD).
    Conflict between rule 46 and token EQ resolved as reduce (EQ < MOD).
    Conflict between rule 46 and token LEQ resolved as reduce (LEQ < MOD).
    Conflict between rule 46 and token GEQ resolved as reduce (GEQ < MOD).
    Conflict between rule 46 and token '<' resolved as reduce ('<' < MOD).
    Conflict between rule 46 and token '>' resolved as reduce ('>' < MOD).
    Conflict between rule 46 and token '*' resolved as reduce (%left '*').
    Conflict between rule 46 and token '/' resolved as reduce (%left '/').
    Conflict between rule 46 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 46 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 46 and token '-' resolved as shift (MOD < '-').
    Conflict between rule 46 and token '+' resolved as shift (MOD < '+').
    Conflict between rule 46 and token POW resolved as shift (MOD < POW).


State 175

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   47                | expression KW_MOD expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, ')', ']', ';', ',']
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    '-'  shift, and go to state 133
    '+'  shift, and go to state 134
    POW  shift, and go to state 135

    $default  reduce using rule 47 (math_expression)

    Conflict between rule 47 and token KW_AND resolved as reduce (KW_AND < KW_MOD).
    Conflict between rule 47 and token KW_OR resolved as reduce (KW_OR < KW_MOD).
    Conflict between rule 47 and token LOR resolved as reduce (LOR < KW_MOD).
    Conflict between rule 47 and token LAND resolved as reduce (LAND < KW_MOD).
    Conflict between rule 47 and token NEQ resolved as reduce (NEQ < KW_MOD).
    Conflict between rule 47 and token EQ resolved as reduce (EQ < KW_MOD).
    Conflict between rule 47 and token LEQ resolved as reduce (LEQ < KW_MOD).
    Conflict between rule 47 and token GEQ resolved as reduce (GEQ < KW_MOD).
    Conflict between rule 47 and token '<' resolved as reduce ('<' < KW_MOD).
    Conflict between rule 47 and token '>' resolved as reduce ('>' < KW_MOD).
    Conflict between rule 47 and token '*' resolved as reduce (%left '*').
    Conflict between rule 47 and token '/' resolved as reduce (%left '/').
    Conflict between rule 47 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 47 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 47 and token '-' resolved as shift (KW_MOD < '-').
    Conflict between rule 47 and token '+' resolved as shift (KW_MOD < '+').
    Conflict between rule 47 and token POW resolved as shift (KW_MOD < POW).


State 176

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   43                | expression '-' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ',']
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    POW  shift, and go to state 135

    $default  reduce using rule 43 (math_expression)

    Conflict between rule 43 and token KW_AND resolved as reduce (KW_AND < '-').
    Conflict between rule 43 and token KW_OR resolved as reduce (KW_OR < '-').
    Conflict between rule 43 and token LOR resolved as reduce (LOR < '-').
    Conflict between rule 43 and token LAND resolved as reduce (LAND < '-').
    Conflict between rule 43 and token NEQ resolved as reduce (NEQ < '-').
    Conflict between rule 43 and token EQ resolved as reduce (EQ < '-').
    Conflict between rule 43 and token LEQ resolved as reduce (LEQ < '-').
    Conflict between rule 43 and token GEQ resolved as reduce (GEQ < '-').
    Conflict between rule 43 and token '<' resolved as reduce ('<' < '-').
    Conflict between rule 43 and token '>' resolved as reduce ('>' < '-').
    Conflict between rule 43 and token '*' resolved as reduce ('*' < '-').
    Conflict between rule 43 and token '/' resolved as reduce ('/' < '-').
    Conflict between rule 43 and token MOD resolved as reduce (MOD < '-').
    Conflict between rule 43 and token KW_MOD resolved as reduce (KW_MOD < '-').
    Conflict between rule 43 and token '-' resolved as reduce (%left '-').
    Conflict between rule 43 and token '+' resolved as reduce (%left '+').
    Conflict between rule 43 and token POW resolved as shift ('-' < POW).


State 177

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   42                | expression '+' expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ',']
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    POW  shift, and go to state 135

    $default  reduce using rule 42 (math_expression)

    Conflict between rule 42 and token KW_AND resolved as reduce (KW_AND < '+').
    Conflict between rule 42 and token KW_OR resolved as reduce (KW_OR < '+').
    Conflict between rule 42 and token LOR resolved as reduce (LOR < '+').
    Conflict between rule 42 and token LAND resolved as reduce (LAND < '+').
    Conflict between rule 42 and token NEQ resolved as reduce (NEQ < '+').
    Conflict between rule 42 and token EQ resolved as reduce (EQ < '+').
    Conflict between rule 42 and token LEQ resolved as reduce (LEQ < '+').
    Conflict between rule 42 and token GEQ resolved as reduce (GEQ < '+').
    Conflict between rule 42 and token '<' resolved as reduce ('<' < '+').
    Conflict between rule 42 and token '>' resolved as reduce ('>' < '+').
    Conflict between rule 42 and token '*' resolved as reduce ('*' < '+').
    Conflict between rule 42 and token '/' resolved as reduce ('/' < '+').
    Conflict between rule 42 and token MOD resolved as reduce (MOD < '+').
    Conflict between rule 42 and token KW_MOD resolved as reduce (KW_MOD < '+').
    Conflict between rule 42 and token '-' resolved as reduce (%left '-').
    Conflict between rule 42 and token '+' resolved as reduce (%left '+').
    Conflict between rule 42 and token POW resolved as shift ('+' < POW).


State 178

   41 math_expression: expression • POW expression
   41                | expression POW expression •  [KW_FOR, KW_AND, KW_OR, LOR, LAND, NEQ, EQ, LEQ, GEQ, '<', '>', '*', '/', MOD, KW_MOD, '-', '+', ')', ']', ';', ',']
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression

    POW  shift, and go to state 135

    $default  reduce using rule 41 (math_expression)

    Conflict between rule 41 and token KW_AND resolved as reduce (KW_AND < POW).
    Conflict between rule 41 and token KW_OR resolved as reduce (KW_OR < POW).
    Conflict between rule 41 and token LOR resolved as reduce (LOR < POW).
    Conflict between rule 41 and token LAND resolved as reduce (LAND < POW).
    Conflict between rule 41 and token NEQ resolved as reduce (NEQ < POW).
    Conflict between rule 41 and token EQ resolved as reduce (EQ < POW).
    Conflict between rule 41 and token LEQ resolved as reduce (LEQ < POW).
    Conflict between rule 41 and token GEQ resolved as reduce (GEQ < POW).
    Conflict between rule 41 and token '<' resolved as reduce ('<' < POW).
    Conflict between rule 41 and token '>' resolved as reduce ('>' < POW).
    Conflict between rule 41 and token '*' resolved as reduce ('*' < POW).
    Conflict between rule 41 and token '/' resolved as reduce ('/' < POW).
    Conflict between rule 41 and token MOD resolved as reduce (MOD < POW).
    Conflict between rule 41 and token KW_MOD resolved as reduce (KW_MOD < POW).
    Conflict between rule 41 and token '-' resolved as reduce ('-' < POW).
    Conflict between rule 41 and token '+' resolved as reduce ('+' < POW).
    Conflict between rule 41 and token POW resolved as shift (%right POW).


State 179

   94 function_header: TK_IDENTIFIER '(' function_arg ')' '-' • '>' data_type

    '>'  shift, and go to state 198


State 180

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   93 function_arg: function_arg ',' expression •  [')', ',']

    KW_AND  shift, and go to state 119
    KW_OR   shift, and go to state 120
    LOR     shift, and go to state 121
    LAND    shift, and go to state 122
    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135

    $default  reduce using rule 93 (function_arg)


State 181

    8 s_main_s: KW_DEF KW_MAIN '(' ')' ':' main_body • KW_ENDDEF

    KW_ENDDEF  shift, and go to state 199


State 182

    9 main_body: commands •

    $default  reduce using rule 9 (main_body)


State 183

   79 command: TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 79 (command)


State 184

   80 command: TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 80 (command)


State 185

   81 command: TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 81 (command)


State 186

   82 command: TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 82 (command)


State 187

   83 command: TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';' •

    $default  reduce using rule 83 (command)


State 188

   89 compound_array_a: TK_IDENTIFIER ASSIGN '[' ']' •

    $default  reduce using rule 89 (compound_array_a)


State 189

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   90 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression • KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type

    KW_FOR  shift, and go to state 200
    KW_AND  shift, and go to state 119
    KW_OR   shift, and go to state 120
    LOR     shift, and go to state 121
    LAND    shift, and go to state 122
    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135


State 190

   84 variable_assignement: TK_IDENTIFIER '=' expression ';' •

    $default  reduce using rule 84 (variable_assignement)


State 191

   78 command: TK_IDENTIFIER '(' ')' ';' •

    $default  reduce using rule 78 (command)


State 192

   77 command: TK_IDENTIFIER '(' function_arg ')' • ';'

    ';'  shift, and go to state 201


State 193

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   67 command: TK_IDENTIFIER brackets '=' expression • ';'

    KW_AND  shift, and go to state 119
    KW_OR   shift, and go to state 120
    LOR     shift, and go to state 121
    LAND    shift, and go to state 122
    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135
    ';'     shift, and go to state 202


State 194

   85 if_statement: KW_IF '(' logical_expression ')' • ':' commands KW_ENDIF
   86             | KW_IF '(' logical_expression ')' • ':' commands KW_ELSE ':' commands KW_ENDIF

    ':'  shift, and go to state 203


State 195

   87 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' • TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   88              | KW_FOR TK_IDENTIFIER KW_IN '[' • TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR

    TK_NUMBER  shift, and go to state 204


State 196

   63 commands: • command commands
   64         | • command
   65 command: • ';'
   66        | • variable_assignement
   67        | • TK_IDENTIFIER brackets '=' expression ';'
   68        | • if_statement ';'
   69        | • for_statement ';'
   70        | • compound_array_i ';'
   71        | • compound_array_a ';'
   72        | • while_statement ';'
   73        | • KW_BREAK ';'
   74        | • KW_CONTINUE ';'
   75        | • KW_RETURN ';'
   76        | • KW_RETURN expression ';'
   77        | • TK_IDENTIFIER '(' function_arg ')' ';'
   78        | • TK_IDENTIFIER '(' ')' ';'
   79        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   80        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   81        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   84 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   85 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   86             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   87 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   88              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   89 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   90 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   91 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE
   91                | KW_WHILE '(' logical_expression ')' • commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 36
    KW_IF          shift, and go to state 37
    KW_FOR         shift, and go to state 38
    KW_WHILE       shift, and go to state 39
    KW_BREAK       shift, and go to state 40
    KW_RETURN      shift, and go to state 41
    KW_CONTINUE    shift, and go to state 42
    ';'            shift, and go to state 43

    commands              go to state 205
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51


State 197

   31 expression: TK_IDENTIFIER '(' function_arg ')' •

    $default  reduce using rule 31 (expression)


State 198

   20 data_type: • KW_INTEGER
   21          | • KW_BOOL
   22          | • KW_SCALAR
   23          | • KW_STR
   94 function_header: TK_IDENTIFIER '(' function_arg ')' '-' '>' • data_type

    KW_INTEGER  shift, and go to state 25
    KW_SCALAR   shift, and go to state 26
    KW_STR      shift, and go to state 27
    KW_BOOL     shift, and go to state 28

    data_type  go to state 206


State 199

    8 s_main_s: KW_DEF KW_MAIN '(' ')' ':' main_body KW_ENDDEF •

    $default  reduce using rule 8 (s_main_s)


State 200

   90 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR • TK_IDENTIFIER ':' expression ']' ':' data_type

    TK_IDENTIFIER  shift, and go to state 207


State 201

   77 command: TK_IDENTIFIER '(' function_arg ')' ';' •

    $default  reduce using rule 77 (command)


State 202

   67 command: TK_IDENTIFIER brackets '=' expression ';' •

    $default  reduce using rule 67 (command)


State 203

   63 commands: • command commands
   64         | • command
   65 command: • ';'
   66        | • variable_assignement
   67        | • TK_IDENTIFIER brackets '=' expression ';'
   68        | • if_statement ';'
   69        | • for_statement ';'
   70        | • compound_array_i ';'
   71        | • compound_array_a ';'
   72        | • while_statement ';'
   73        | • KW_BREAK ';'
   74        | • KW_CONTINUE ';'
   75        | • KW_RETURN ';'
   76        | • KW_RETURN expression ';'
   77        | • TK_IDENTIFIER '(' function_arg ')' ';'
   78        | • TK_IDENTIFIER '(' ')' ';'
   79        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   80        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   81        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   84 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   85 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   85             | KW_IF '(' logical_expression ')' ':' • commands KW_ENDIF
   86             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   86             | KW_IF '(' logical_expression ')' ':' • commands KW_ELSE ':' commands KW_ENDIF
   87 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   88              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   89 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   90 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   91 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 36
    KW_IF          shift, and go to state 37
    KW_FOR         shift, and go to state 38
    KW_WHILE       shift, and go to state 39
    KW_BREAK       shift, and go to state 40
    KW_RETURN      shift, and go to state 41
    KW_CONTINUE    shift, and go to state 42
    ';'            shift, and go to state 43

    commands              go to state 208
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51


State 204

   87 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER • ':' TK_NUMBER ']' commands KW_ENDFOR
   88              | KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER • ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR

    ':'  shift, and go to state 209


State 205

   91 while_statement: KW_WHILE '(' logical_expression ')' commands • KW_ENDWHILE

    KW_ENDWHILE  shift, and go to state 210


State 206

   94 function_header: TK_IDENTIFIER '(' function_arg ')' '-' '>' data_type •

    $default  reduce using rule 94 (function_header)


State 207

   90 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER • ':' expression ']' ':' data_type

    ':'  shift, and go to state 211


State 208

   85 if_statement: KW_IF '(' logical_expression ')' ':' commands • KW_ENDIF
   86             | KW_IF '(' logical_expression ')' ':' commands • KW_ELSE ':' commands KW_ENDIF

    KW_ELSE   shift, and go to state 212
    KW_ENDIF  shift, and go to state 213


State 209

   87 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' • TK_NUMBER ']' commands KW_ENDFOR
   88              | KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' • TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR

    TK_NUMBER  shift, and go to state 214


State 210

   91 while_statement: KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE •

    $default  reduce using rule 91 (while_statement)


State 211

   24 expression: • TK_NUMBER
   25           | • TK_REAL
   26           | • TK_CHAR
   27           | • TK_STRING
   28           | • TK_DIGIT
   29           | • TK_DECIMAL
   30           | • TK_IDENTIFIER
   31           | • TK_IDENTIFIER '(' function_arg ')'
   32           | • TK_IDENTIFIER '(' ')'
   33           | • TK_IDENTIFIER brackets
   34           | • KW_TRUE
   35           | • KW_FALSE
   36           | • '(' expression ')'
   37           | • math_expression
   38           | • logical_expression
   39           | • '+' expression
   40           | • '-' expression
   41 math_expression: • expression POW expression
   42                | • expression '+' expression
   43                | • expression '-' expression
   44                | • expression '*' expression
   45                | • expression '/' expression
   46                | • expression MOD expression
   47                | • expression KW_MOD expression
   48 logical_expression: • expression EQ expression
   49                   | • expression LEQ expression
   50                   | • expression GEQ expression
   51                   | • expression NEQ expression
   52                   | • expression '<' expression
   53                   | • expression '>' expression
   54                   | • expression LAND expression
   55                   | • expression KW_AND expression
   56                   | • expression LOR expression
   57                   | • expression KW_OR expression
   58                   | • '!' expression
   59                   | • KW_NOT expression
   90 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' • expression ']' ':' data_type

    TK_IDENTIFIER  shift, and go to state 63
    TK_CHAR        shift, and go to state 64
    TK_STRING      shift, and go to state 65
    TK_REAL        shift, and go to state 66
    TK_DIGIT       shift, and go to state 67
    TK_NUMBER      shift, and go to state 68
    TK_DECIMAL     shift, and go to state 69
    KW_TRUE        shift, and go to state 70
    KW_FALSE       shift, and go to state 71
    '!'            shift, and go to state 72
    KW_NOT         shift, and go to state 73
    '-'            shift, and go to state 74
    '+'            shift, and go to state 75
    '('            shift, and go to state 76

    expression          go to state 215
    math_expression     go to state 78
    logical_expression  go to state 79


State 212

   86 if_statement: KW_IF '(' logical_expression ')' ':' commands KW_ELSE • ':' commands KW_ENDIF

    ':'  shift, and go to state 216


State 213

   85 if_statement: KW_IF '(' logical_expression ')' ':' commands KW_ENDIF •

    $default  reduce using rule 85 (if_statement)


State 214

   87 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER • ']' commands KW_ENDFOR
   88              | KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER • ':' TK_NUMBER ']' commands KW_ENDFOR

    ']'  shift, and go to state 217
    ':'  shift, and go to state 218


State 215

   41 math_expression: expression • POW expression
   42                | expression • '+' expression
   43                | expression • '-' expression
   44                | expression • '*' expression
   45                | expression • '/' expression
   46                | expression • MOD expression
   47                | expression • KW_MOD expression
   48 logical_expression: expression • EQ expression
   49                   | expression • LEQ expression
   50                   | expression • GEQ expression
   51                   | expression • NEQ expression
   52                   | expression • '<' expression
   53                   | expression • '>' expression
   54                   | expression • LAND expression
   55                   | expression • KW_AND expression
   56                   | expression • LOR expression
   57                   | expression • KW_OR expression
   90 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression • ']' ':' data_type

    KW_AND  shift, and go to state 119
    KW_OR   shift, and go to state 120
    LOR     shift, and go to state 121
    LAND    shift, and go to state 122
    NEQ     shift, and go to state 123
    EQ      shift, and go to state 124
    LEQ     shift, and go to state 125
    GEQ     shift, and go to state 126
    '<'     shift, and go to state 127
    '>'     shift, and go to state 128
    '*'     shift, and go to state 129
    '/'     shift, and go to state 130
    MOD     shift, and go to state 131
    KW_MOD  shift, and go to state 132
    '-'     shift, and go to state 133
    '+'     shift, and go to state 134
    POW     shift, and go to state 135
    ']'     shift, and go to state 219


State 216

   63 commands: • command commands
   64         | • command
   65 command: • ';'
   66        | • variable_assignement
   67        | • TK_IDENTIFIER brackets '=' expression ';'
   68        | • if_statement ';'
   69        | • for_statement ';'
   70        | • compound_array_i ';'
   71        | • compound_array_a ';'
   72        | • while_statement ';'
   73        | • KW_BREAK ';'
   74        | • KW_CONTINUE ';'
   75        | • KW_RETURN ';'
   76        | • KW_RETURN expression ';'
   77        | • TK_IDENTIFIER '(' function_arg ')' ';'
   78        | • TK_IDENTIFIER '(' ')' ';'
   79        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   80        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   81        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   84 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   85 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   86             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   86             | KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' • commands KW_ENDIF
   87 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   88              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   89 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   90 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   91 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 36
    KW_IF          shift, and go to state 37
    KW_FOR         shift, and go to state 38
    KW_WHILE       shift, and go to state 39
    KW_BREAK       shift, and go to state 40
    KW_RETURN      shift, and go to state 41
    KW_CONTINUE    shift, and go to state 42
    ';'            shift, and go to state 43

    commands              go to state 220
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51


State 217

   63 commands: • command commands
   64         | • command
   65 command: • ';'
   66        | • variable_assignement
   67        | • TK_IDENTIFIER brackets '=' expression ';'
   68        | • if_statement ';'
   69        | • for_statement ';'
   70        | • compound_array_i ';'
   71        | • compound_array_a ';'
   72        | • while_statement ';'
   73        | • KW_BREAK ';'
   74        | • KW_CONTINUE ';'
   75        | • KW_RETURN ';'
   76        | • KW_RETURN expression ';'
   77        | • TK_IDENTIFIER '(' function_arg ')' ';'
   78        | • TK_IDENTIFIER '(' ')' ';'
   79        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   80        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   81        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   84 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   85 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   86             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   87 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   87              | KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' • commands KW_ENDFOR
   88              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   89 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   90 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   91 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 36
    KW_IF          shift, and go to state 37
    KW_FOR         shift, and go to state 38
    KW_WHILE       shift, and go to state 39
    KW_BREAK       shift, and go to state 40
    KW_RETURN      shift, and go to state 41
    KW_CONTINUE    shift, and go to state 42
    ';'            shift, and go to state 43

    commands              go to state 221
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51


State 218

   88 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' • TK_NUMBER ']' commands KW_ENDFOR

    TK_NUMBER  shift, and go to state 222


State 219

   90 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' • ':' data_type

    ':'  shift, and go to state 223


State 220

   86 if_statement: KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands • KW_ENDIF

    KW_ENDIF  shift, and go to state 224


State 221

   87 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands • KW_ENDFOR

    KW_ENDFOR  shift, and go to state 225


State 222

   88 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER • ']' commands KW_ENDFOR

    ']'  shift, and go to state 226


State 223

   20 data_type: • KW_INTEGER
   21          | • KW_BOOL
   22          | • KW_SCALAR
   23          | • KW_STR
   90 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' • data_type

    KW_INTEGER  shift, and go to state 25
    KW_SCALAR   shift, and go to state 26
    KW_STR      shift, and go to state 27
    KW_BOOL     shift, and go to state 28

    data_type  go to state 227


State 224

   86 if_statement: KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF •

    $default  reduce using rule 86 (if_statement)


State 225

   87 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR •

    $default  reduce using rule 87 (for_statement)


State 226

   63 commands: • command commands
   64         | • command
   65 command: • ';'
   66        | • variable_assignement
   67        | • TK_IDENTIFIER brackets '=' expression ';'
   68        | • if_statement ';'
   69        | • for_statement ';'
   70        | • compound_array_i ';'
   71        | • compound_array_a ';'
   72        | • while_statement ';'
   73        | • KW_BREAK ';'
   74        | • KW_CONTINUE ';'
   75        | • KW_RETURN ';'
   76        | • KW_RETURN expression ';'
   77        | • TK_IDENTIFIER '(' function_arg ')' ';'
   78        | • TK_IDENTIFIER '(' ')' ';'
   79        | • TK_IDENTIFIER ADD_ASSIGN TK_IDENTIFIER ';'
   80        | • TK_IDENTIFIER SUB_ASSIGN TK_IDENTIFIER ';'
   81        | • TK_IDENTIFIER MULT_ASSIGN TK_IDENTIFIER ';'
   82        | • TK_IDENTIFIER DIV_ASSIGN TK_IDENTIFIER ';'
   83        | • TK_IDENTIFIER MOD_ASSIGN TK_IDENTIFIER ';'
   84 variable_assignement: • TK_IDENTIFIER '=' expression ';'
   85 if_statement: • KW_IF '(' logical_expression ')' ':' commands KW_ENDIF
   86             | • KW_IF '(' logical_expression ')' ':' commands KW_ELSE ':' commands KW_ENDIF
   87 for_statement: • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   88              | • KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR
   88              | KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' • commands KW_ENDFOR
   89 compound_array_a: • TK_IDENTIFIER ASSIGN '[' ']'
   90 compound_array_i: • TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type
   91 while_statement: • KW_WHILE '(' logical_expression ')' commands KW_ENDWHILE

    TK_IDENTIFIER  shift, and go to state 36
    KW_IF          shift, and go to state 37
    KW_FOR         shift, and go to state 38
    KW_WHILE       shift, and go to state 39
    KW_BREAK       shift, and go to state 40
    KW_RETURN      shift, and go to state 41
    KW_CONTINUE    shift, and go to state 42
    ';'            shift, and go to state 43

    commands              go to state 228
    command               go to state 45
    variable_assignement  go to state 46
    if_statement          go to state 47
    for_statement         go to state 48
    compound_array_a      go to state 49
    compound_array_i      go to state 50
    while_statement       go to state 51


State 227

   90 compound_array_i: TK_IDENTIFIER ASSIGN '[' expression KW_FOR TK_IDENTIFIER ':' expression ']' ':' data_type •

    $default  reduce using rule 90 (compound_array_i)


State 228

   88 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands • KW_ENDFOR

    KW_ENDFOR  shift, and go to state 229


State 229

   88 for_statement: KW_FOR TK_IDENTIFIER KW_IN '[' TK_NUMBER ':' TK_NUMBER ':' TK_NUMBER ']' commands KW_ENDFOR •

    $default  reduce using rule 88 (for_statement)
